{"componentChunkName":"component---src-templates-blog-post-js","path":"/148/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"78ec6fec-e037-53c6-9d58-6b9da1d2bf40","excerpt":"캐릭터의 좌표 https://school.programmers.co.kr/learn/courses/30/lessons/120861 변수 배열 keyinput 맵의 크기 board 제한사항 캐릭터는 항상 [0,0]에서 시작 board은 [가로 크기, 세로 크기] 형태 board…","html":"<h3>캐릭터의 좌표</h3>\n<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/120861\">https://school.programmers.co.kr/learn/courses/30/lessons/120861</a></p>\n<h4>변수</h4>\n<p>배열 keyinput<br>\n맵의 크기 board</p>\n<h4>제한사항</h4>\n<p>캐릭터는 항상 [0,0]에서 시작<br>\nboard은 [가로 크기, 세로 크기] 형태<br>\nboard의 가로 크기와 세로 크기는 홀수<br>\nboard의 크기를 벗어난 방향키 입력은 무시<br>\n0 ≤ keyinput의 길이 ≤ 50<br>\n1 ≤ board[0] ≤ 99<br>\n1 ≤ board[1] ≤ 99<br>\nkeyinput은 항상 up, down, left, right만 주어짐</p>\n<h4>풀이</h4>\n<ol>\n<li>상수 res 선언하고 [0, 0] 할당</li>\n<li>상수 limit 선언하고 [Math.trunc(board[0] / 2), Math.trunc(board[1] / 2)] 할당</li>\n<li>for (e of keyinput) 반복문 진입</li>\n<li>조건문으로 e 값 확인, e === 'up'일 때 res[1]++, Math.abs(res[1]) > limit[1] 이면 res[1]--</li>\n<li>e === 'down'일 때 res[1]--, Math.abs(res[1]) > limit[1] 이면 res[1]++</li>\n<li>e === 'left'일 때 res[0]--, Math.abs(res[0]) > limit[0] 이면 res[0]++</li>\n<li>e === 'right'일 때 res[0]++, Math.abs(res[0]) > limit[0] 이면 res[0]--</li>\n<li>res 반환</li>\n</ol>\n<h4>코드</h4>\n<p>switch를 사용한 구문이 깔끔하게 정리가 되어 있고 길이도 크게 길지 않았다. switch를 활용하는 경우를 찾아봐야겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyinput<span class=\"token punctuation\">,</span> board</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> limit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">trunc</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">trunc</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">of</span> keyinput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">===</span> <span class=\"token string\">'up'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> limit<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">===</span> <span class=\"token string\">'down'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> limit<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">===</span> <span class=\"token string\">'left'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> limit<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">===</span> <span class=\"token string\">'right'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> limit<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"캐릭터의 좌표","date":"April 19, 2023","description":"https://school.programmers.co.kr/learn/courses/30/lessons/120861"}},"previous":{"fields":{"slug":"/147/"},"frontmatter":{"title":"진료 순서 정하기"}},"next":{"fields":{"slug":"/149/"},"frontmatter":{"title":"가위 바위 보"}}},"pageContext":{"id":"78ec6fec-e037-53c6-9d58-6b9da1d2bf40","previousPostId":"99b581b4-bbfb-5f70-b613-5e04faa0c8b7","nextPostId":"c96d8e27-4636-5876-9ee2-b74f9d1116d6"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}