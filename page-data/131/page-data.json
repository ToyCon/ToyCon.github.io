{"componentChunkName":"component---src-templates-blog-post-js","path":"/131/","result":{"data":{"site":{"siteMetadata":{"title":"ToyCon's Blog"}},"markdownRemark":{"id":"826bf1a4-a3d6-542c-b973-a1b034724ccd","excerpt":"컨트롤 제트 https://school.programmers.co.kr/learn/courses/30/lessons/120853 변수 문자열 s 제한사항 1 ≤ s의 길이 ≤ 200 -1,000 < s의 원소 중 숫자 < 1,000 s는 숫자, \"Z\", 공백 s에 있는 숫자와 \"Z…","html":"<h3>컨트롤 제트</h3>\n<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/120853\">https://school.programmers.co.kr/learn/courses/30/lessons/120853</a></p>\n<h4>변수</h4>\n<p>문자열 s</p>\n<h4>제한사항</h4>\n<p>1 ≤ s의 길이 ≤ 200<br>\n-1,000 &#x3C; s의 원소 중 숫자 &#x3C; 1,000<br>\ns는 숫자, \"Z\", 공백<br>\ns에 있는 숫자와 \"Z\"는 서로 공백으로 구분<br>\n연속된 공백은 주어지지 않음<br>\n0을 제외하고는 0으로 시작하는 숫자는 없음<br>\ns는 \"Z\"로 시작하지 않음<br>\ns의 시작과 끝에는 공백이 없음<br>\n\"Z\"가 연속해서 나오는 경우는 없음</p>\n<h4>순서</h4>\n<p>공백으로 구분된 문자열 형태로 주어지므로 배열로 나눈 뒤 반복문을 적용하는 방식으로 풀었다.</p>\n<ol>\n<li>변수 res 선언하고 0 할당</li>\n<li>s를 공백 문자열로 split해서 배열로 재할당</li>\n<li>배열 s에서 \"Z\"가 아닌 모든 원소를 숫자로 변환</li>\n<li>for (i = 0; i &#x3C; s.length; i++) 반복문 진입</li>\n<li>s[i] === 'Z' 일 때 res -= s[i - 1]</li>\n<li>그 외의 경우 res += s[i]</li>\n<li>res 반환</li>\n</ol>\n<h4>코드</h4>\n<p>코드를 작성하면서 reduce 메서드를 떠올렸는데 Z의 경우를 처리하는 게 불편하다고 생각해서 반복문으로 풀었다. 다른 사람들의 풀이를 보니 reduce를 사용한 풀이가 보이는데 보면서 어떻게 사용했는지 분석을 해봐야겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> e <span class=\"token operator\">===</span> <span class=\"token string\">\"Z\"</span> <span class=\"token operator\">?</span> e <span class=\"token operator\">:</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"Z\"</span> <span class=\"token operator\">?</span> res<span class=\"token operator\">-=</span>s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> res<span class=\"token operator\">+=</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"컨트롤 제트","date":"March 23, 2023","description":"https://school.programmers.co.kr/learn/courses/30/lessons/120853"}},"previous":{"fields":{"slug":"/130/"},"frontmatter":{"title":"분수의 덧셈"}},"next":{"fields":{"slug":"/132/"},"frontmatter":{"title":"나머지 구하기"}}},"pageContext":{"id":"826bf1a4-a3d6-542c-b973-a1b034724ccd","previousPostId":"9ffb51c3-f845-5fa3-b6be-6b3a8d2d9c01","nextPostId":"b25ba483-5d97-5189-af90-db7b77bb56f8"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}