{"componentChunkName":"component---src-templates-blog-post-js","path":"/063/2022-12-01-practice31/","result":{"data":{"site":{"siteMetadata":{"title":"ToyCon's Blog"}},"markdownRemark":{"id":"2855e66a-22d8-5619-a7d9-335d7f551177","excerpt":"문자열 나누기 https://school.programmers.co.kr/learn/courses/30/lessons/140108 변수 문자열 s…","html":"<h3>문자열 나누기</h3>\n<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/140108\">https://school.programmers.co.kr/learn/courses/30/lessons/140108</a></p>\n<h4>변수</h4>\n<p>문자열 s</p>\n<h4>순서</h4>\n<p>같은 글자가 나오는 횟수를 카운트 해야 하는데, 한번 카운트가 끝나면 남은 문자열을 가지고 같은 과정을 반복해야 해서 이중 반복문을 써야 했다. 이중 반복문을 쓰더라도 한번 큰 반복 구간이 나온다면 나머지 문자열에서 글자수가 크게 줄어들기 때문에 문제가 없다고 생각하고 처음 생각한대로 정리했다.</p>\n<ol>\n<li>결과를 담을 상수 result를 선언하고 빈 배열 할당</li>\n<li>while 반복문 진입(s.length > 0)</li>\n<li>변수 x를 선언하고 s[0] 할당</li>\n<li>변수 sameCount를 선언하고 0 할당</li>\n<li>변수 diffCount를 선언하고 0 할당</li>\n<li>변수 seperator를 선언하고 빈 문자열 할당</li>\n<li>for 반복문 진입(i = 0; i &#x3C; s.length; i++)</li>\n<li>조건문 x === s[i] 일 때 sameCount++, 아니면 diffCount++</li>\n<li>조건문 sameCount === diffCount 일 때 seperator에 s.slice(0, i) 할당</li>\n<li>같은 조건문 내부에서 result.push(seperator)</li>\n<li>s = s.slice(i); 이후 break</li>\n<li>while 구문을 빠져 나온 후 result.length 반환</li>\n</ol>\n<h4>코드</h4>\n<p>문제에서 제시한 '두 횟수가 다른 상태에서 더 이상 읽을 글자가 없다면, 역시 지금까지 읽은 문자열을 분리하고 종료합니다'에 해당하는 탈출조건이 없는데 코드가 통과가 됐다. 해당 코드를 추가해서 다시 테스트해봐야겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> sC <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> dC <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> sep <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sC<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> \n        dC<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sC <span class=\"token operator\">!==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> dC <span class=\"token operator\">!==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> sC <span class=\"token operator\">===</span> dC<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sep <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"문자열 나누기","date":"December 01, 2022","description":null}},"previous":{"fields":{"slug":"/062/2022-11-30-practice30/"},"frontmatter":{"title":"문자열안에 문자열"}},"next":{"fields":{"slug":"/064/2022-12-02-practice32/"},"frontmatter":{"title":"자릿수 더하기"}}},"pageContext":{"id":"2855e66a-22d8-5619-a7d9-335d7f551177","previousPostId":"e1ec6065-d86e-529f-abe5-802eabed1e48","nextPostId":"6a994bc0-c0bd-5dc9-b90e-3b3fb990a13c"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}