{"componentChunkName":"component---src-templates-blog-post-js","path":"/147/","result":{"data":{"site":{"siteMetadata":{"title":"ToyCon's Blog"}},"markdownRemark":{"id":"99b581b4-bbfb-5f70-b613-5e04faa0c8b7","excerpt":"진료 순서 정하기 https://school.programmers.co.kr/learn/courses/30/lessons/120835 변수 정수 배열 emergency 제한사항 중복된 원소 없음 1 ≤ emergency의 길이 ≤ 10 1 ≤ emergency의 원소 ≤ 10…","html":"<h3>진료 순서 정하기</h3>\n<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/120835\">https://school.programmers.co.kr/learn/courses/30/lessons/120835</a></p>\n<h4>변수</h4>\n<p>정수 배열 emergency</p>\n<h4>제한사항</h4>\n<p>중복된 원소 없음<br>\n1 ≤ emergency의 길이 ≤ 10<br>\n1 ≤ emergency의 원소 ≤ 100</p>\n<h4>풀이</h4>\n<p>emergency 배열을 내림차순으로 정렬한 새로운 배열을 받은 다음, 반복문을 통해 메서드로 인덱스 넘버를 받는 방식으로 풀었다.</p>\n<ol>\n<li>상수 dig 선언하고 emergency를 복사한 배열을 내림차순으로 정렬</li>\n<li>상수 res 선언하고 빈 배열 할당</li>\n<li>for(i=0, i &#x3C; emergency.length, i++) 반복문 실행</li>\n<li>반복문 내부에서 res.push(dig.findIndex(e => e === emergency[i]) + 1) 실행</li>\n<li>res 반환</li>\n</ol>\n<h4>코드</h4>\n<p>for 반복문을 forEach 메서드로 대체해서 풀었다. 다른 풀이를 보니 별도의 배열을 선언해서 정렬한 것은 같은데 emergency에 바로 map을 적용해서 푸는 방식이 많았다. indexOf 메서드를 썼는데 더 간단한 방법인 것 같다. 기억해야겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">emergency</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> dig <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>emergency<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    emergency<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dig<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> e <span class=\"token operator\">===</span> ele<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"진료 순서 정하기","date":"April 18, 2023","description":"https://school.programmers.co.kr/learn/courses/30/lessons/120835"}},"previous":{"fields":{"slug":"/146/"},"frontmatter":{"title":"배열 자르기"}},"next":{"fields":{"slug":"/148/"},"frontmatter":{"title":"캐릭터의 좌표"}}},"pageContext":{"id":"99b581b4-bbfb-5f70-b613-5e04faa0c8b7","previousPostId":"52cbe8c1-5776-5b31-b07f-c8d765348044","nextPostId":"78ec6fec-e037-53c6-9d58-6b9da1d2bf40"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}