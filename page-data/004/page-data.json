{"componentChunkName":"component---src-templates-blog-post-js","path":"/004/","result":{"data":{"site":{"siteMetadata":{"title":"ToyCon's Blog"}},"markdownRemark":{"id":"d712861f-c7ce-5daf-a092-1ebcfadaed0d","excerpt":"Narrowing & Assertion | 연산자를 사용해서 두 가지 type을 지정할 수 있음\nany type : 어떤 자료 형태도 할당 가능. 하지만 타입 관련 에러를 막기 위해 typescript를 쓰기 때문에 남발하면 typescript 쓰는 이유가 사라짐\nunknown…","html":"<h1>Narrowing &#x26; Assertion</h1>\n<p>| 연산자를 사용해서 두 가지 type을 지정할 수 있음\nany type : 어떤 자료 형태도 할당 가능. 하지만 타입 관련 에러를 막기 위해 typescript를 쓰기 때문에 남발하면 typescript 쓰는 이유가 사라짐\nunknown : any와 마찬가지로 모든 타입의 변수를 다 할당할 수 있음. 차이점은 unknown type은 어떤 자료가 들어가도 그대로 타입이 unknown임</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> 이름<span class=\"token operator\">:</span><span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Bulbarsaur'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//이름 = 123; 컴파일할 때 오류가 뜬다.</span>\n\n<span class=\"token keyword\">let</span> 배열<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Bulbarsaur'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Ivysaur'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> 번호<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>indexnum <span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> indexnum<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">nameType</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> 이름<span class=\"token operator\">:</span>nameType <span class=\"token operator\">=</span> <span class=\"token string\">'Venusaur'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">함수명</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//에러가 발생하는 함수</span>\n<span class=\"token comment\">/*function 함수명(x:number | string) {\n    return x*2;\n}*/</span>\n<span class=\"token comment\">//이건 가능</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">함수2</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> nbumber <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">pokemon</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> bulbarsaur<span class=\"token operator\">:</span>pokemon <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">001</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bulbarsaur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"Narrowing과 Assertion","date":"July 14, 2022","description":"Narrowing과 Assertion"}},"previous":{"fields":{"slug":"/003/"},"frontmatter":{"title":"TypeScript에서 사용하는 Type"}},"next":{"fields":{"slug":"/005/2022-07-15TypeScript5/"},"frontmatter":{"title":"TypeScript Part 1-5"}}},"pageContext":{"id":"d712861f-c7ce-5daf-a092-1ebcfadaed0d","previousPostId":"f8514ac0-e409-5dbd-ab17-315e67923d30","nextPostId":"f50124d8-5e39-5cc6-a746-49e1e5eb49f6"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}