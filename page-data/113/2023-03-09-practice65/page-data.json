{"componentChunkName":"component---src-templates-blog-post-js","path":"/113/2023-03-09-practice65/","result":{"data":{"site":{"siteMetadata":{"title":"ToyCon's Blog"}},"markdownRemark":{"id":"a6100188-8d24-5498-8092-6f0158517d33","excerpt":"로그인 성공? https://school.programmers.co.kr/learn/courses/30/lessons/120883 변수 아이디와 패스워드가 담긴 배열 id_pw 회원들의 정보가 담긴 2차원 배열 db…","html":"<h3>로그인 성공?</h3>\n<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/120883\">https://school.programmers.co.kr/learn/courses/30/lessons/120883</a></p>\n<h4>변수</h4>\n<p>아이디와 패스워드가 담긴 배열 id_pw<br>\n회원들의 정보가 담긴 2차원 배열 db</p>\n<h4>제한사항</h4>\n<p>회원들의 아이디는 문자열<br>\n회원들의 아이디는 알파벳 소문자와 숫자로만 이루어져 있음<br>\n회원들의 패스워드는 숫자로 구성된 문자열<br>\n회원들의 비밀번호는 같을 수 있지만 아이디는 같을 수 없음<br>\nid_pw의 길이는 2<br>\nid_pw와 db의 원소는 [아이디, 패스워드]<br>\n1 ≤ 아이디의 길이 ≤ 15<br>\n1 ≤ 비밀번호의 길이 ≤ 6<br>\n1 ≤ db의 길이 ≤ 10<br>\ndb의 원소의 길이는 2</p>\n<h4>순서</h4>\n<p>아이디가 db에 포함되어 있는지 검색하고, 포함된 경우에만 비밀번호가 일치하는지 확인하면 된다. id와 pw의 일치 여부를 별도의 변수에 불리언 값으로 담은 다음 마지막에 조건문으로 답을 반환하는 방식을 생각했다.</p>\n<ol>\n<li>변수 corId, corPw 선언하고 false 할당</li>\n<li>for (e of db) 반복문 진입</li>\n<li>id_pw[0] === e[0] 확인, 일치하면 corId 에 true 할당</li>\n<li>3 조건문 내부에서 id_pw[1] === e[1] 확인, 일치하면 corPw에 true 할당, 3 하위에서 break로 반복문 종료</li>\n<li>corId와 corPw가 모두 true인지 확인, 맞으면 login 반환</li>\n<li>corId만 true, corPw는 false일 때 wrong pw 반환</li>\n<li>모두 false일 때 fail 반환</li>\n</ol>\n<h4>코드</h4>\n<p>다른 사람들의 답을 보니 Map 객체와 구조 분해 할당을 활용한 답들을 살펴볼수 있었다. 배열에서 구조분해 할당을 사용할 수 있는지 여부를 항상 기억해야겠다. Map 객체는 공부를 해봐야겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id_pw<span class=\"token punctuation\">,</span> db</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> corId <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> corPw <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>e <span class=\"token keyword\">of</span> db<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>id_pw<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> e<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            corId <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>id_pw<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> e<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> corPw <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> corId <span class=\"token operator\">&amp;&amp;</span> corPw <span class=\"token operator\">?</span> <span class=\"token string\">'login'</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>corId <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>corPw <span class=\"token operator\">?</span> <span class=\"token string\">'wrong pw'</span><span class=\"token operator\">:</span> <span class=\"token string\">'fail'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"로그인 성공?","date":"March 09, 2023","description":null}},"previous":{"fields":{"slug":"/111/2023-03-08-practice64/"},"frontmatter":{"title":"치킨 쿠폰"}},"next":{"fields":{"slug":"/114/2023-03-09JavaScript3/"},"frontmatter":{"title":"틸더 연산자"}}},"pageContext":{"id":"a6100188-8d24-5498-8092-6f0158517d33","previousPostId":"c81a883a-24fc-596e-93a0-b2f147b73578","nextPostId":"04743e98-8920-5391-b495-a65320f13cae"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}