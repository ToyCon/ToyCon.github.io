{"componentChunkName":"component---src-templates-blog-post-js","path":"/074/2023-01-05-practice41/","result":{"data":{"site":{"siteMetadata":{"title":"ToyCon's Blog"}},"markdownRemark":{"id":"112146ba-ddc7-594b-9fa6-11df470f2bfb","excerpt":"문자열 계산하기 https://school.programmers.co.kr/learn/courses/30/lessons/120902 변수 문자열로 된 수식 my_string 제한사항 연산자는 +, -만 존재 5 ≤ my_string의 길이 ≤ 10…","html":"<h3>문자열 계산하기</h3>\n<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/120902\">https://school.programmers.co.kr/learn/courses/30/lessons/120902</a></p>\n<h4>변수</h4>\n<p>문자열로 된 수식 my_string</p>\n<h4>제한사항</h4>\n<p>연산자는 +, -만 존재<br>\n5 ≤ my_string의 길이 ≤ 100</p>\n<h4>순서</h4>\n<p>문자열이 공백으로 구분되어 있기 쉽게 분해할 수 있다. 배열로 분해한 뒤 반복문으로 답을 구하는 방식으로 접근했다.</p>\n<ol>\n<li>my_string 배열로 분해</li>\n<li>변수 res 선언하고 my_string[0]을 할당, 배열에서 삭제</li>\n<li>while 반복문 진입(my_string.length)</li>\n<li>my_string[0]이 '+' 이면 res에 my_string[1]을 더함</li>\n<li>my_string[0]이 '-' 이면 res에 my_string[1]을 더함</li>\n<li>my_string[0], my_string[1]을 배열에서 삭제</li>\n<li>res를 반환</li>\n</ol>\n<h4>코드</h4>\n<p>eval이 답안에 제일 많았는데, 보안상 문제로 사용하지 말것을 강력하게 권고하는 코드여서 체크해뒀다. eval은 나중에 꼭 왜 쓰지 말아야 하는지 간단하게라도 정리해야겠다. eval을 제외한 문제 풀이는 대체로 비슷했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">my_string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    my_string <span class=\"token operator\">=</span> my_string<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>my_string<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>my_string<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>my_string<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res <span class=\"token operator\">=</span> res <span class=\"token operator\">+</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>my_string<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            res <span class=\"token operator\">=</span> res <span class=\"token operator\">-</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>my_string<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        my_string<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        my_string<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"문자열 계산하기","date":"January 05, 2023","description":null}},"previous":{"fields":{"slug":"/071/2022-12-29-practice39/"},"frontmatter":{"title":"배열의 유사도"}},"next":{"fields":{"slug":"/075/2023-01-19-practice42/"},"frontmatter":{"title":"편지"}}},"pageContext":{"id":"112146ba-ddc7-594b-9fa6-11df470f2bfb","previousPostId":"fc51258b-bdfc-53e2-868e-4ceb88e48cff","nextPostId":"cc0b8c4a-b8b2-5a70-a1bc-c259558fe9b1"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}