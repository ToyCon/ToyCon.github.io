{"componentChunkName":"component---src-templates-blog-post-js","path":"/092/2023-02-23-practice52/","result":{"data":{"site":{"siteMetadata":{"title":"ToyCon's Blog"}},"markdownRemark":{"id":"b1f85e38-3ede-57a1-a53e-eeefe602b682","excerpt":"한 번만 등장한 문자 https://school.programmers.co.kr/learn/courses/30/lessons/120896 변수 문자열 s 제한사항 0 < s의 길이 < 1,000 s…","html":"<h3>한 번만 등장한 문자</h3>\n<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/120896\">https://school.programmers.co.kr/learn/courses/30/lessons/120896</a></p>\n<h4>변수</h4>\n<p>문자열 s</p>\n<h4>제한사항</h4>\n<p>0 &#x3C; s의 길이 &#x3C; 1,000<br>\ns는 소문자로만 구성</p>\n<h4>순서</h4>\n<p>반복문을 한 번만 사용해서 문제를 해결하는 방법을 고민했다. 별도의 변수를 선언해서 담는 것은 문제가 없는데, 만약 지웠다가 다시 추가를 하게 되는 경우 의도와 달라지기 때문이다. 메서드를 써서 짧게 풀 수 있을 것 같은데 어떻게 조합해야 할지 감이 잘 오지 않았다. 정규표현식을 사용해봤는데 제대로 작동하지 않았다. 같은 알파벳이 두 개 이상 있으면 무조건 항목에서 제외되므로 동일한 알파벳이 두개 이상 연속되어 포함되어 있는지를 체크한 다음 없는 것을 확인한 경우 별도의 변수에 담아 반환하는 방식으로 풀었다.</p>\n<ol>\n<li>변수 res 선언하고 빈 문자열 할당</li>\n<li>변수 letter를 선언하고 소문자 a부터 z까지를 문자열로 할당</li>\n<li>s를 메서드를 통해 오름차순 정렬</li>\n<li>for (i &#x3C; 26) 반복문 진입</li>\n<li>같은 알파벳이 1개 이상 포함되어 있는지 확인</li>\n<li>and 조건으로 같은 알파벳이 2개 이상 있는지 확인한 뒤 없으면 res에 letter(i)를 추가</li>\n<li>res를 반환</li>\n</ol>\n<h4>코드</h4>\n<p>쉬운 문제라고 생각했는데 시간이 오래 걸릴줄 몰랐다. 다른 사람들의 풀이를 보니 역시나 쉽게 해결한 풀이가 많았다. 다른 사람들의 풀이도 분석해보고 내일은 정규표현식을 꼭 공부해야겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> letter <span class=\"token operator\">=</span> <span class=\"token string\">'abcdefghijklmnopqrstuvwxyz'</span><span class=\"token punctuation\">;</span>\n    s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> letter<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            res <span class=\"token operator\">+=</span> letter<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"한 번만 등장한 문자","date":"February 23, 2023","description":null}},"previous":{"fields":{"slug":"/090/2023-02-22-practice51/"},"frontmatter":{"title":"약수 구하기"}},"next":{"fields":{"slug":"/093/2023-02-24-practice53/"},"frontmatter":{"title":"인덱스 바꾸기"}}},"pageContext":{"id":"b1f85e38-3ede-57a1-a53e-eeefe602b682","previousPostId":"76284b9e-e7ad-5acf-bc47-e0187984d5ab","nextPostId":"dadb47ac-62c7-5458-a0af-8014e359e5b4"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}