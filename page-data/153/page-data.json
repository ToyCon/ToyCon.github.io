{"componentChunkName":"component---src-templates-blog-post-js","path":"/153/","result":{"data":{"site":{"siteMetadata":{"title":"ToyCon's Blog"}},"markdownRemark":{"id":"ba0d6d8d-407a-57b8-b0bf-f8569644888e","excerpt":"숨어있는 숫자의 덧셈 (2) https://school.programmers.co.kr/learn/courses/30/lessons/120864 변수 문자열 my_string 제한사항 1 ≤ my_string의 길이 ≤ 1,000 1 ≤ my_string 안의 자연수 ≤ 100…","html":"<h3>숨어있는 숫자의 덧셈 (2)</h3>\n<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/120864\">https://school.programmers.co.kr/learn/courses/30/lessons/120864</a></p>\n<h4>변수</h4>\n<p>문자열 my_string</p>\n<h4>제한사항</h4>\n<p>1 ≤ my_string의 길이 ≤ 1,000<br>\n1 ≤ my_string 안의 자연수 ≤ 1000<br>\n연속된 수는 하나의 숫자로 간주<br>\n0이 선행하는 경우 없음<br>\n문자열에 자연수가 없는 경우 0을 return</p>\n<h4>풀이</h4>\n<p>split 메서드로 나눠서 숫자 여부를 확인할 수 있다. 빈 문자열로 나누는 대신 정규표현식을 써서 알파벳에 해당하면 모두 빈 문자열로 치환하고, 숫자만 남은 배열을 하나의 값으로 합쳐서 바로 반환했다.</p>\n<ol>\n<li>my_string.split(/\\D/) 실행</li>\n<li>filter 메서드로 원소의 길이가 0보다 큰 원소만 남김</li>\n<li>reduce 메서드로 초기값 0, 나머지 원소의 Number tpye을 모두 합쳐서 반환</li>\n</ol>\n<h4>코드</h4>\n<p>다른 풀이를 보니 나와 비슷하게 접근했는데 정규식의 뒤에 +를 붙이고 filter를 생략한 풀이가 있었다. 저런 활용법은 생각하지 못했다. 정규표현식 응용 방법을 많이 검색해봐야겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">my_string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> my_string<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\D</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"숨어있는 숫자의 덧셈 (2)","date":"April 08, 2023","description":"https://school.programmers.co.kr/learn/courses/30/lessons/120864"}},"previous":{"fields":{"slug":"/152/"},"frontmatter":{"title":"순서쌍의 개수"}},"next":{"fields":{"slug":"/154/"},"frontmatter":{"title":"짝수의 합"}}},"pageContext":{"id":"ba0d6d8d-407a-57b8-b0bf-f8569644888e","previousPostId":"b625b95f-c0f9-5eca-9c60-67981228fd20","nextPostId":"ed50ef12-6c4f-53e9-aae7-6d4ffc0b2075"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}