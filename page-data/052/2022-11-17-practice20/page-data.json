{"componentChunkName":"component---src-templates-blog-post-js","path":"/052/2022-11-17-practice20/","result":{"data":{"site":{"siteMetadata":{"title":"ToyCon's Blog"}},"markdownRemark":{"id":"afeb07f7-8d59-5919-8a20-022eb81bbe5e","excerpt":"숫자 문자열과 영단어 https://school.programmers.co.kr/learn/courses/30/lessons/81301 변수 숫자 또는 영문자로 구성된 문자열 s 반환할 결과값은 숫자여야 함(Number type) 순서 반복문 내부에서 replace…","html":"<h3>숫자 문자열과 영단어</h3>\n<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/81301\">https://school.programmers.co.kr/learn/courses/30/lessons/81301</a></p>\n<h4>변수</h4>\n<p>숫자 또는 영문자로 구성된 문자열 s<br>\n반환할 결과값은 숫자여야 함(Number type)</p>\n<h4>순서</h4>\n<p>반복문 내부에서 replace 메서드를 실행해서 간단하게 치환할 수 있다고 생각했다. 그런데 replace 메서드를 검색해보니 무조건 처음에 한 번 검색되는 문자열만 치환된다는 것을 확인했다. 결국 정규표현식을 쓸 수 밖에 없었다. 정규표현식 정리를 계속 미뤘는데 조만간 공부를 해봐야겠다.</p>\n<ol>\n<li>단어를 대조할 대조군을 담을 상수 words를 선언하고 배열 [\"zero\", ... \"nine\"]을 할당</li>\n<li>index를 사용한 반복문을 선언</li>\n<li>변수 regex를 선언하고 words에 저장한 각 단어를 검색 대상으로 지정할 정규표현식 words[i], 'g' 를 할당</li>\n<li>s에 replace 메서드를 사용하여 regex로 검색한 단어를 i.toString()로 변환하고 s에 재할당</li>\n<li>s를 number type으로 치환하여 반환</li>\n</ol>\n<h4>코드</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"zero\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"four\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"five\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"six\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"seven\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"eight\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nine\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>words<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"숫자 문자열과 영단어","date":"November 17, 2022","description":null}},"previous":{"fields":{"slug":"/051/2022-11-16-practice19/"},"frontmatter":{"title":"문자열 정렬하기 (2)"}},"next":{"fields":{"slug":"/050/2022-11-15-practice18/"},"frontmatter":{"title":"종이 자르기"}}},"pageContext":{"id":"afeb07f7-8d59-5919-8a20-022eb81bbe5e","previousPostId":"b0b2b4ae-389f-5f60-8266-f1951df839a5","nextPostId":"1b8afb34-61d7-5289-be97-e6bd1d738589"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}