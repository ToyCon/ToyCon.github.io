{"componentChunkName":"component---src-templates-blog-post-js","path":"/166/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"2491580e-94b9-51ce-833d-cb2f547e6de1","excerpt":"…","html":"<p>소인수분해를 구현하는 문제를 푸는데 많은 시간을 썼다. 아쉽다. 앞으로 미흡하다고 생각하는 부분은 미루지 않고 이해가 될때까지 풀어보려고 한다.</p>\n<ol>\n<li>연습문제 풀기</li>\n<li>소수를 판별하는 함수 작성 중 에러가 발생하여 해당 에러 메시지를 검색하고 해결 방법 정리(포스트 작성 중)</li>\n<li>소인수분해 알고리즘 학습</li>\n</ol>\n<p>**내가 생각하지 못했던 부분은 while 반복문 사용, 중복되는 원소를 걸러주는 set 객체 사용<br>\n**내가 생각하기에 직관적으로 이해가 제일 잘됐던 구현(<a href=\"https://dalconbox.tistory.com/288\">https://dalconbox.tistory.com/288</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> input <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/dev/stdin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> primes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> i <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    num <span class=\"token operator\">=</span> num <span class=\"token operator\">/</span> i\n    primes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>primes<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"4\">\n<li>수의 범위를 정해야 하는 경우 제곱근을 쓰면 왜 시간복잡도가 줄어드는지 이해함 → '좌우대칭'을 기억하자</li>\n<li>소인수분해 2부터 시작해서 순서대로 나누는 과정을 console.log로 보여주는 코드 → <a href=\"https://rheem-hm.tistory.com/48\">https://rheem-hm.tistory.com/48</a></li>\n</ol>","frontmatter":{"title":"TIL6","date":"May 01, 2023","description":"5월 1일 학습일지"}},"previous":{"fields":{"slug":"/165/"},"frontmatter":{"title":"소인수분해 문제를 풀면서 발생했던 오류 파헤치기"}},"next":{"fields":{"slug":"/167/"},"frontmatter":{"title":"최댓값 만들기 (2)"}}},"pageContext":{"id":"2491580e-94b9-51ce-833d-cb2f547e6de1","previousPostId":"5fd50517-d2bd-50ea-8277-48bda9f4e927","nextPostId":"21229ece-4a53-5aa1-81e9-b982af3ff494"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}