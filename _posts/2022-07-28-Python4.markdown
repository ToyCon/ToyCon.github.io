---
layout: post
title: Python Part 4
date: 2022-07-28 17:00:00 +0900
categories: Python
---
### Python의 자료형
#### 1. 숫자형
JS의 number, BigInt에 해당하는 자료형. 정수와 실수를 모두 포함.

#### 2. 문자형
JS의 string과 동일. 문자나 단어로 구성된 자료형.

#### 3. 리스트    
입력과 출력 모두 JS의 배열과 똑같음. 변수 선언하고 [] 안에 값을 쉼표로 구분해서 넣으면 됨. 배열안에 배열 값이 들어가는 것과 마찬가지로 리스트 안에 리스트가 들어갈 수 있음. JS 메서드처럼 Python에도 .명령어 식으로 내장함수 쓸 수 있음.

Python
```Pyhton
이상해씨 = [1, ['Grass', 'Poison'], True]
print(이상해씨)
print(이상해씨[0])
print(이상해씨[1][1])
```
> [1, ['Grass', 'Poison'], True]    
> 1    
> Poison    

JavaScript
```JavaScript
const 이상해꽃 = [3, ['Grass', 'Poison'], false];
console.log(이상해꽃);
console.log(이상해꽃[0]);
console.log(이상해꽃[1][1]);
```
> [3, ['Grass', 'Poison'], false]    
> 3    
> Poison    

#### 4. 튜플
JS에서 const로 선언한 배열. 리스트와 거의 유사하나 두 가지 차이점이 있음.
> 튜플은 생성할 때 ()로 둘러쌈    
> 튜플은 한번 선언하면 값을 바꿀 수 없음    

#### 5. 딕셔너리    
JS의 객체와 비슷함. 변수 선언하고 {} 안에 키:값 형태로 입력하고 쉼표로 구분해서 넣으면 됨. 차이점은 키에도 ''를 붙여야 함. 출력할 때 명령어는 JS와 다르다. 딕셔너리 안에 딕셔너리도 리스트와 마찬가지로 가능. 딕셔너리도 .명령어 식으로 내장함수 쓸 수 있음.

Python
```Pyhton
이상해씨 = {
    'index' : 1,
    'type' : ['Grass', 'Poison'],
    'evolve' : True,
    'evolveTo' : '이상해풀'
}
print(이상해씨['type'][0])
print(이상해씨['evolve'])
```
> Grass    
> True    

JavaScript
```JavaScript
const 킬리아 = {
    index: 281,
    type: ['Psychic', 'Fairy'],
    evolve: true,
    evolveTo : ['가디안', '엘레이드']
};
console.log(킬리아.type);
console.log(킬리아.evolveTo[1]);
```
> [ 'Psychic', 'Fairy' ]    
> 엘레이드    

#### 6. 집합

#### 7. 불(bool)
JS의 불린(boolean)에 해당. True와 False 두가지 값만 존재한다. Python에서는 첫글자가 대문자여야 인식함.