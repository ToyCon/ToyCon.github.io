<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[A starter blog demonstrating what Gatsby can do.]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 20 Jul 2023 11:26:49 GMT</lastBuildDate><item><title><![CDATA[TIL28]]></title><description><![CDATA[이미지 관련 기능을 구현하는데 계속 에러가 났다. 컴파일 단계에서 에러가 나서 정상적으로 실행이 불가능해서 일단 에러 코드만 기록해놓고 다른 기능을 구현하고 있다. db쪽을 업데이트했는데 mongosh로 update…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/202/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/202/</guid><pubDate>Thu, 20 Jul 2023 20:20:00 GMT</pubDate><content:encoded>&lt;p&gt;이미지 관련 기능을 구현하는데 계속 에러가 났다. 컴파일 단계에서 에러가 나서 정상적으로 실행이 불가능해서 일단 에러 코드만 기록해놓고 다른 기능을 구현하고 있다. db쪽을 업데이트했는데 mongosh로 update 함수로 값을 업데이트하는 과정도 정상적으로 작동하지 않아서 이것도 힘들다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;몽고db updateOne() 작동을 안함
&lt;ul&gt;
&lt;li&gt;글을 완전히 db에서 삭제하지 않고 isDeleted라는 항목을 별도로 생성, 서버에서 메시지를 받으면 해당 값을 true로 바꾸는 코드를 작성했으나 해당 기능이 작동하지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; db &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; connectDB&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;board&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;post&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;deleteOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ObjectId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// deletedCheck 항목으로 업데이트가 안되서 일단 스킵(7/20/15:40)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// let result = await db.collection(&apos;post&apos;).&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//   updateOne({_id: new ObjectId(req.body._id)}, {$set: {deleteCheck: 1}});&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// console.log(result);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;input&gt; 태그에 이미지 삽입 기능 구현했을때 발생한 컴파일 에러 기록&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;wait  - compiling /write/page (client and server)...
error - ./node_modules/@mapbox/node-pre-gyp/lib/clean.js:8:0
Module not found: Can&apos;t resolve &apos;fs&apos;

https://nextjs.org/docs/messages/module-not-found

Import trace for requested module:
./node_modules/@mapbox/node-pre-gyp/lib/ sync ^\.\/.*$
./node_modules/@mapbox/node-pre-gyp/lib/node-pre-gyp.js
./node_modules/bcrypt/bcrypt.js
./pages/api/auth/[...nextauth].js
./app/write/page.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL27]]></title><description><![CDATA[슬슬 기능을 구현하거나 수정하는 데 시간이 오래 걸려서 하루에 한 일을 정리하기가 쉽지 않다. 작업하면서 의문이 들었던 내용을 따로 적어뒀다가 검색해 보면서 학습을 하려고 한다. useState…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/201/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/201/</guid><pubDate>Tue, 18 Jul 2023 19:41:00 GMT</pubDate><content:encoded>&lt;p&gt;슬슬 기능을 구현하거나 수정하는 데 시간이 오래 걸려서 하루에 한 일을 정리하기가 쉽지 않다. 작업하면서 의문이 들었던 내용을 따로 적어뒀다가 검색해 보면서 학습을 하려고 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;useState 추적 변수
&lt;ul&gt;
&lt;li&gt;댓글을 작성했을 때 자동으로 불러오도록 별도의 state를 하나 생성하고 버튼 쪽에서 setState로 변경&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//댓글 작성했는지 여부를 확인하는 state&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;checkNewComment&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCheckNewComment&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//useEffect, 내용은 생략&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;checkNewComment&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//댓글 전송 버튼&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;acknowledged &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCheckNewComment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;checkNewComment&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;createObjectURL
&lt;ul&gt;
&lt;li&gt;Presigned URL 방식을 사용하면 글을 최종적으로 등록하지 않아도 이미지가 S3에 업로드되서 비효율적&lt;/li&gt;
&lt;li&gt;별도의 변수 선언한뒤 URL.createObjectURL() 담아서 사용하고 사용이 끝나면 revokeObjectURL() 호출해서 지우기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL26]]></title><description><![CDATA[몽고db id에서 document…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/200/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/200/</guid><pubDate>Fri, 14 Jul 2023 23:42:00 GMT</pubDate><content:encoded>&lt;p&gt;몽고db id에서 document가 작성된 시간을 확인하는 것은 성공했다. 그런데 그게 복잡하지 않은 과정이더라도 그 수가 늘어나면 매번 서버도 시간을 계산해야 하고 클라이언트도 시간을 계산하는 과정이 실행되서 비효율적이라는 것을 깨달았다. 그냥 몽고db에 작성 시간을 별도로 입력하면 간편하게 처리가 가능하기 때문에 작성 시간을 추가로 저장하기로 했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;시간 꺼내는 코드&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getKST&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;postId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;postId&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;몽고db document에서 시간 다루기
&lt;ul&gt;
&lt;li&gt;클라이언트 or 서버에서 new Date로 시간을 생성해서 몽고디비로 보내도 자동으로 ISODate 형식으로 저장&lt;/li&gt;
&lt;li&gt;줄루 타임이므로 +9시간 해주는 과정은 거쳐야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;loading.js, error.js, not-found.js
&lt;ul&gt;
&lt;li&gt;로딩 인터페이스 넣을 때 loading.js, 같은 폴더 안에 넣으면 자동으로 적용&lt;/li&gt;
&lt;li&gt;error.js의 경우 클라이언트 컴포넌트로 만들어야 함&lt;/li&gt;
&lt;li&gt;app 폴더 바로 아래에 넣어주면 모든 페이지에 적용 가능, error.js, not-found.js도 동일&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL25]]></title><description><![CDATA[한 주동안 손을 못대서 강의를 돌려보고 댓글 기능 구현을 위해서 필요한 내용을 검색했다. Date Date 함수로 날짜 불러오기, 대한민국 표준시로 맞추기(https://codechacha.com/ko/javascript-add-time-to-date…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/199/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/199/</guid><pubDate>Thu, 13 Jul 2023 23:55:00 GMT</pubDate><content:encoded>&lt;p&gt;한 주동안 손을 못대서 강의를 돌려보고 댓글 기능 구현을 위해서 필요한 내용을 검색했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Date
&lt;ul&gt;
&lt;li&gt;Date 함수로 날짜 불러오기, 대한민국 표준시로 맞추기(&lt;a href=&quot;https://codechacha.com/ko/javascript-add-time-to-date/&quot;&gt;https://codechacha.com/ko/javascript-add-time-to-date/&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;몽고DB id에서 시간 꺼내오기
&lt;ul&gt;
&lt;li&gt;_id를 BSON 해석해서 시간으로 변환 가능(&lt;a href=&quot;https://domdom.tistory.com/393&quot;&gt;https://domdom.tistory.com/393&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;몽고DB는 그리니치 표준시(UTC+0) 일괄 적용&lt;/li&gt;
&lt;li&gt;몽고DB 자체에서 일관성있게 UTC+0 쓰기 때문에, id에서 시간을 불러와서 9시간 추가해주면 한국 시간으로 표시할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL24]]></title><description><![CDATA[백엔드는 직접 만들어봤기에 오늘은 시간이 조금 걸려도 어려움없이 기능을 구현할 수 있었다. 코드가 지저분하지만 기능 구현에 집중했다. bcrypt 비밀번호를 암호화하는 라이브러리 hash(암호화할 변수, 암호화 횟수) round…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/198/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/198/</guid><pubDate>Thu, 06 Jul 2023 19:45:00 GMT</pubDate><content:encoded>&lt;p&gt;백엔드는 직접 만들어봤기에 오늘은 시간이 조금 걸려도 어려움없이 기능을 구현할 수 있었다. 코드가 지저분하지만 기능 구현에 집중했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;bcrypt
&lt;ul&gt;
&lt;li&gt;비밀번호를 암호화하는 라이브러리&lt;/li&gt;
&lt;li&gt;hash(암호화할 변수, 암호화 횟수)&lt;/li&gt;
&lt;li&gt;round는 &lt;a href=&quot;https://www.npmjs.com/package/bcrypt&quot;&gt;공식문서&lt;/a&gt;에 설명, 2GHz CPu 기준으로 최대 10회(~10 hashes/sec)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ID + 비밀번호 회원 기능
&lt;ul&gt;
&lt;li&gt;mongodb에 별도 폴더 만들어서 저장 가능&lt;/li&gt;
&lt;li&gt;CredentialsProvider 함수  가져와서 [...nextauth].js에 적용&lt;/li&gt;
&lt;li&gt;권한 구현, admin은 모든 게시물에 접근하고 삭제할수 있음&lt;/li&gt;
&lt;li&gt;로그인 했을 때 게시물 보여주기 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.env
&lt;ul&gt;
&lt;li&gt;nextjs는 환경변수 사용하는 모듈 내장(react는 dotenv 가져다 썼음)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL23]]></title><description><![CDATA[Oauth 로그인 기능 프로바이더 앱 등록, next-auth 설치 jwt + session 방식은 adapter 추가 설치 getServerSession 서버에 저장된 로그인 정보 불러오는 함수 CRUD…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/197/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/197/</guid><pubDate>Thu, 06 Jul 2023 01:58:00 GMT</pubDate><content:encoded>&lt;ol&gt;
&lt;li&gt;Oauth 로그인 기능&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;프로바이더 앱 등록, next-auth 설치&lt;/li&gt;
&lt;li&gt;jwt + session 방식은 adapter 추가 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;getServerSession&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;서버에 저장된 로그인 정보 불러오는 함수&lt;/li&gt;
&lt;li&gt;CRUD 기능 실행할 때 본인이 맞는지 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;아이디/비번 + jwt 방식&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;암호화 라이브러리 bcrypt 사용&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL22]]></title><description><![CDATA[렌더링 전환 반대의 경우 'force-static', 'auto'는 자동으로 판단 fetch 함수로 캐싱 fetch('url', { cache: 'force-cache' }) fetch('/URL', { next: { revalidate: 6…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/196/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/196/</guid><pubDate>Wed, 05 Jul 2023 01:39:00 GMT</pubDate><content:encoded>&lt;ol&gt;
&lt;li&gt;렌더링 전환
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; dynamic &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;force-dynamic&apos;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 다이나믹 렌더링 페이지&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;반대의 경우 &apos;force-static&apos;, &apos;auto&apos;는 자동으로 판단&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fetch 함수로 캐싱
&lt;ul&gt;
&lt;li&gt;fetch(&apos;url&apos;, { cache: &apos;force-cache&apos; })&lt;/li&gt;
&lt;li&gt;fetch(&apos;/URL&apos;, { next: { revalidate: 60 } }) : 캐싱 결과를 60초간 보관&lt;/li&gt;
&lt;li&gt;fetch(&apos;/URL&apos;, { cache: &apos;no-store&apos; }) : 캐싱 기능 사용 안함&lt;/li&gt;
&lt;li&gt;next.js에서만 사용 가능한 문법임&lt;/li&gt;
&lt;li&gt;서버 컴포넌트에서만 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;revalidate
&lt;ul&gt;
&lt;li&gt;페이지 단위로 캐싱 가능, 초단위로 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; revalidate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//60초동안 캐싱된 페이지를 보관&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL21]]></title><description><![CDATA[build를 실행하고 난 뒤 npm run dev 명령어로도, build 후 npm run start도 실행해도 40…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/195/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/195/</guid><pubDate>Mon, 03 Jul 2023 20:20:00 GMT</pubDate><content:encoded>&lt;p&gt;build를 실행하고 난 뒤 npm run dev 명령어로도, build 후 npm run start도 실행해도 404 페이지로 연결되는 상황이 발생했다. 파일들을 하나씩 되돌리면서 실행해도 계속 같은 증상이 나와 어쩔 수 없이 프로젝트를 아예 새로 생성하고 build를 수시로 실행하면서 오류가 나지 않는지 체크하면서 진행했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;에러 발생
&lt;ul&gt;
&lt;li&gt;list 페이지에서 삭제기능 추가하기 위해서 클라이언트 컴포넌트를 하위 컴포넌트로 추가, db에서 불러오는 기능을 이관&lt;/li&gt;
&lt;li&gt;에러 메시지&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Warning: Only plain objects can be passed to Client Components from Server Components. Objects with toJSON methods are not supported. Convert it manually to a simple value before passing it to props.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;list 페이지에서&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_id&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
추가해서 실행&lt;/li&gt;
&lt;li&gt;빌드한 뒤 npm run start로 실행했을때 에러 발생&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;에러 메시지&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Unhandled Runtime Error ChunkLoadError: Loading chunk 272 failed.
(missing: http://localhost:3000/_next/static/chunks/webpack-498aab44f1ab4ab1.js)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;검색결과 기존에 빌드했던 .next 폴더를 지우고 재실행하면 된다고 해서 그대로 해결&lt;a href=&quot;http://itpsolver.com/react-next-js-chunkloaderror-loading-chunk-node_modules_next_dist_client_dev_noop_js-failed-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0/&quot;&gt;링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Error: Failed to collect page data for]]></title><description><![CDATA[엊그제 npm run build 명령어로 배포 빌드 생성시 발생했던 오류와 해결 방법을 기록해둔다. 이런 오류 메시지가 뜨면서 빌드 중간에 멈추는 현상이 발생했다. 계속 검색을 하다가 답을 찾았다.
https://github.com/vercel…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/194/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/194/</guid><pubDate>Fri, 30 Jun 2023 15:16:00 GMT</pubDate><content:encoded>&lt;p&gt;엊그제 npm run build 명령어로 배포 빌드 생성시 발생했던 오류와 해결 방법을 기록해둔다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;info  - Creating an optimized production build .ReferenceError: options is not defined
    at 3599 (/home/hyeondeok/refresh/.next/server/app/edit/[postId]/page.js:334:75)
    at __webpack_require__ (/home/hyeondeok/refresh/.next/server/webpack-runtime.js:25:42)
    at 4218 (/home/hyeondeok/refresh/.next/server/app/edit/[postId]/page.js:250:72)
    at Function.__webpack_require__ (/home/hyeondeok/refresh/.next/server/webpack-runtime.js:25:42)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async collectGenerateParams (/home/hyeondeok/refresh/node_modules/next/dist/build/utils.js:741:17)

&gt; Build error occurred
Error: Failed to collect page data for /edit/[postId]
    at /home/hyeondeok/refresh/node_modules/next/dist/build/utils.js:1055:15
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {
  type: &apos;Error&apos;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런 오류 메시지가 뜨면서 빌드 중간에 멈추는 현상이 발생했다. 계속 검색을 하다가 답을 찾았다.
&lt;a href=&quot;https://github.com/vercel/next.js/discussions/34249&quot;&gt;https://github.com/vercel/next.js/discussions/34249&lt;/a&gt;
이게 정답이었다. next.config.json 파일에 설정을 추가해주니 해결됐다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; nextConfig &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;experimental&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;appDir&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//&gt;&gt;아래 코드 추가했음&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;pageExtensions&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;page.tsx&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;page.ts&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;page.jsx&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;page.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 깃허브 포럼에서 공식 문서 링크(&lt;a href=&quot;https://nextjs.org/docs/pages/api-reference/next-config-js/pageExtensions#including-non-page-files-in-the-pages-directory&quot;&gt;https://nextjs.org/docs/pages/api-reference/next-config-js/pageExtensions#including-non-page-files-in-the-pages-directory&lt;/a&gt;
)를 연결해줬다. 테스트 관련 설정같은데 읽어보고 이 포스트에 내용을 추가하거나 새로 포스트를 작성해서 정리해둬야겠다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[TIL20]]></title><description><![CDATA[여태까지 작업한 게시판 프로젝트를 처음으로 빌드했는데 오류가 났다. 에러 해결을 위해서 오늘은 학습 내용을 일찍 정리했다. 내일은 아마 에러 핸들링이 주요 내용이 될 것 같다. AJAX로 서버에서 보낸 메시지 받아서 추가 기능 실행 fetch…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/193/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/193/</guid><pubDate>Wed, 28 Jun 2023 17:06:00 GMT</pubDate><content:encoded>&lt;p&gt;여태까지 작업한 게시판 프로젝트를 처음으로 빌드했는데 오류가 났다. 에러 해결을 위해서 오늘은 학습 내용을 일찍 정리했다. 내일은 아마 에러 핸들링이 주요 내용이 될 것 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AJAX로 서버에서 보낸 메시지 받아서 추가 기능 실행
&lt;ul&gt;
&lt;li&gt;fetch() 뒤에 promise 문법 .then() 붙여서 추가 기능 실행 가능, then((res) =&gt; { 실행할 함수 })&lt;/li&gt;
&lt;li&gt;마지막에 에러 핸들링 위해서 .catch((err) =&gt; {에러 발생시 실행할 함수})&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;게시물 삭제에 애니메이션 기능 넣기
&lt;ul&gt;
&lt;li&gt;onClick으로 작성한 함수에 매개변수를 넣으면 해당 태그를 조작할 수 있음. 보통 e로 줄여서 전달&lt;/li&gt;
&lt;li&gt;삭제 기능 쪽에서 응답 받은 다음 실행할 then() 함수에서 e를 조작하면 정상적으로 응답이 왔을 때 삭제 애니메이션 실행할 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;query string
&lt;ul&gt;
&lt;li&gt;장점 : 간단한 값은 서버에 간단하게 전송 가능, GET 요청도 데이터 전송가능({method: &apos;GET&apos;, body: 보내고 싶은 값} 이렇게 전송 불가능)&lt;/li&gt;
&lt;li&gt;단점 : 데이터가 많으면 더러움, 보안문제 → URL에 데이터가 보이는데 만약 유저 id와 pw가 노출된다면?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;url 파라미터 문법
&lt;ul&gt;
&lt;li&gt;api 폴더 하위에 다이나믹라우트와 똑같이 폴더, 파일명 만들고 fetch(&apos;/api/폴더/파일명&apos;)&lt;/li&gt;
&lt;li&gt;서버에서 req.query 조회해서 데이터 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;static rendering, dynamic rendering
&lt;ul&gt;
&lt;li&gt;build 실행해서 확인할 수 있는 페이지 앞에 원 기호가 있으면 static rendering, 람다 기호 있으면 dynamic rendering&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL19]]></title><description><![CDATA[삭제 기능을 완성하려고 시간을 오래 써도 계속 안되서 힘들었는데 오늘 쉽게 완성이 됐다. 이런 경우가 종종 있다. 부트캠프에서 공부하던 것처럼 기술적 부채로 남겨놓고 다른 기능 먼저 진행해야겠다. 게시판 프로젝트 글 삭제 기능 완성 fetch('url…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/192/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/192/</guid><pubDate>Tue, 27 Jun 2023 20:30:00 GMT</pubDate><content:encoded>&lt;p&gt;삭제 기능을 완성하려고 시간을 오래 써도 계속 안되서 힘들었는데 오늘 쉽게 완성이 됐다. 이런 경우가 종종 있다. 부트캠프에서 공부하던 것처럼 기술적 부채로 남겨놓고 다른 기능 먼저 진행해야겠다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;게시판 프로젝트 글 삭제 기능 완성
&lt;ul&gt;
&lt;li&gt;fetch(&apos;url&apos;, {method: CRUD 기능에 맞춰서 적절한 메서드 &apos;&apos;안에, body: 메시지에 포함되어야 하는 내용})&lt;/li&gt;
&lt;li&gt;body에 담을 내용이 많으면 객체에 담아서 JSON으로 보내기. 보낼때는 JSON.stringify(전송할 object), 받을때는 JSON.parse(전송받은 object)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;몽고DB 데이터 삭제 기능
&lt;ul&gt;
&lt;li&gt;deleteOne() 함수. 고유한 값을 가지는 _id로 검색&lt;/li&gt;
&lt;li&gt;result로 담아서 출력하면 { acknowledged: true, deletedCount: 1 } 이렇게 뜸&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;검색 노출이 중요할 경우 글 제목같은 데이터는 부모 컴포넌트에서 props로 받아오기
&lt;ul&gt;
&lt;li&gt;useEffect를 써서 렌더링과 동시에 DB에서 데이터를 조회할 경우, 검색엔진이 웹페이지를 방문하면 내용이 없는 html문서를 조회함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이모지 입력
&lt;ul&gt;
&lt;li&gt;vscode 익스텐션 :emojisense: 설치함&lt;/li&gt;
&lt;li&gt;extension setting에서 edit in settings.json 눌러서 열고 &quot;javascript&quot;: true 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL18]]></title><description><![CDATA[몽고DB 기능때문에 시행착오를 좀 많이 겪었다. 어렵지 않은 해결책이었는데 시간을 많이 쓴것 같다. 게시판 프로젝트 글 수정 기능 완성 form 태그로 전송할 경우 POST 요청 써야만 정상적으로 전송됨 redirect…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/191/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/191/</guid><pubDate>Thu, 22 Jun 2023 22:36:00 GMT</pubDate><content:encoded>&lt;p&gt;몽고DB 기능때문에 시행착오를 좀 많이 겪었다. 어렵지 않은 해결책이었는데 시간을 많이 쓴것 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;게시판 프로젝트 글 수정 기능 완성
&lt;ul&gt;
&lt;li&gt;form 태그로 전송할 경우 POST 요청 써야만 정상적으로 전송됨&lt;/li&gt;
&lt;li&gt;redirect 문법으로 응답을 줄 경우 단일 url만 사용 가능. detail/title 이런식으로 리다이렉트가 불가능함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;몽고DB 데이터 수정 기능
&lt;ul&gt;
&lt;li&gt;updateOne() 기능 쓸 경우 $inc 연산자를 쓸 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL17]]></title><description><![CDATA[MongoDB에 새로운 document 생성 insertOne()으로 하나의 document를 db에 생성할 수 있음 MongoDB 데이터 수정 updateOne()으로 게시물 수정 가능 JavaScript try catch 문법 db…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/190/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/190/</guid><pubDate>Wed, 21 Jun 2023 21:15:00 GMT</pubDate><content:encoded>&lt;ol&gt;
&lt;li&gt;MongoDB에 새로운 document 생성
&lt;ul&gt;
&lt;li&gt;insertOne()으로 하나의 document를 db에 생성할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MongoDB 데이터 수정
&lt;ul&gt;
&lt;li&gt;updateOne()으로 게시물 수정 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JavaScript try catch 문법
&lt;ul&gt;
&lt;li&gt;db를 불러오는데 실패했을 경우 적용 가능&lt;/li&gt;
&lt;li&gt;정상적으로 실행할 코드를 try {} 내부에 작성&lt;/li&gt;
&lt;li&gt;에러가 발생했을 경우 catch(err) {} 내부에 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL16]]></title><description><![CDATA[Nextjs - useRouter client component에서 사용할 수 있음 useRouter를 불러올 때 'next/navigation'에서 import(router 아님) useRouter…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/189/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/189/</guid><pubDate>Tue, 20 Jun 2023 22:54:00 GMT</pubDate><content:encoded>&lt;ol&gt;
&lt;li&gt;Nextjs - useRouter
&lt;ul&gt;
&lt;li&gt;client component에서 사용할 수 있음&lt;/li&gt;
&lt;li&gt;useRouter를 불러올 때 &apos;next/navigation&apos;에서 import(router 아님)&lt;/li&gt;
&lt;li&gt;useRouter에서 쓸수 있는 기능들은 공식문서에 설명 있음(&lt;a href=&quot;https://nextjs.org/docs/pages/api-reference/functions/use-router&quot;&gt;https://nextjs.org/docs/pages/api-reference/functions/use-router&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;useRouter 기능중에 prefetch를 통해 링크 문서를 미리 받아놓을 수 있는데, Link 태그가 prefetch 기능을 포함하고 있음. Link 태그로 많은 링크를 불러올 경우 prefetch={false} 지정해서 prefetch 막을 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nextjs 서버 생성
&lt;ul&gt;
&lt;li&gt;/app/api/ 폴더 또는 루트 경로에서 /pages/api/ 폴더 하위에 JS 파일 생성&lt;/li&gt;
&lt;li&gt;req.method 유형에 따라서 if문으로 응답을 보내주면 됨. express와 똑같다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;과거 블로그 포스트 복구
&lt;ul&gt;
&lt;li&gt;2022.8.4 windows10 diskpart 포스트부터 복구, 양식 정리는 천천히 진행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL15]]></title><description><![CDATA[한동안 다른 일 때문에 손을 못댔다. 프로젝트를 새로 만들어서 nextjs 강의를 복습하고 끊겼던 진도도 추가로 나갔다. Nextjs 강의 수강 복습(Part 1) 복습 프로젝트 새로은 레포지토리 생성해서 연동 Nextjs 강의 수강 복습(Part…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/188/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/188/</guid><pubDate>Mon, 19 Jun 2023 22:54:00 GMT</pubDate><content:encoded>&lt;p&gt;한동안 다른 일 때문에 손을 못댔다. 프로젝트를 새로 만들어서 nextjs 강의를 복습하고 끊겼던 진도도 추가로 나갔다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Nextjs 강의 수강 복습(Part 1)
&lt;ul&gt;
&lt;li&gt;복습 프로젝트 새로은 레포지토리 생성해서 연동&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nextjs 강의 수강 복습(Part 2)
&lt;ul&gt;
&lt;li&gt;MongoDB 연동&lt;/li&gt;
&lt;li&gt;서버 컴포넌트, 클라이언트 컴포넌트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dynamic Route
&lt;ul&gt;
&lt;li&gt;Dynamic Route를 사용하기 위한 페이지 명 폴더를 만들고 하위에 대괄호로 감싼 폴더명 지정해서 하위 폴더 또 생성&lt;/li&gt;
&lt;li&gt;대괄호 안에 폴더명이 page.js 내부 함수에서 props로 불러오는 변수명이 됨&lt;/li&gt;
&lt;li&gt;MongoDB에서 document마다 자동으로 부여하는 id를 확인&lt;/li&gt;
&lt;li&gt;Link 태그에 href 속성 링크에 _id 변수를 적용해서 게시물마다 각각 다른 id를 받아서 url로 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL14]]></title><description><![CDATA[mongodb에서 불러온 데이터를 페이지에 적용하는 데 시행착오를 좀 겪었다. 서버 컴포넌트가 자바스크립트를 아예 사용하지 못한다고 생각해서 layout.js도 만들어보고 에러메시지도 검색해보고 하루를 넘게 삽질을 했는데 그냥 map…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/187/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/187/</guid><pubDate>Fri, 19 May 2023 21:00:00 GMT</pubDate><content:encoded>&lt;p&gt;mongodb에서 불러온 데이터를 페이지에 적용하는 데 시행착오를 좀 겪었다. 서버 컴포넌트가 자바스크립트를 아예 사용하지 못한다고 생각해서 layout.js도 만들어보고 에러메시지도 검색해보고 하루를 넘게 삽질을 했는데 그냥 map 함수로 평범하게 페이지를 잘 작성할 수 있었다. 1강때 배웠던 &apos;html 내부에서 JS 사용 불가능&apos; 이 내용이 무슨 의미인지 좀 찾아봐야겠다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;서버 컴포넌트에서 db에서 받아온 배열에 map을 적용해 바로 내용을 페이지로 보여주기 구현&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL13]]></title><description><![CDATA[몽고DB 연동 nextjs project 폴더에서 mongodb 라이브러리 설치 db와 연동을 담당하는 js 파일 하나 생성해서 아래 코드 실행 db에서 받아온 데이터를 실제로 활용할 페이지에서 connectDB 함수 호출해서 사용]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/186/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/186/</guid><pubDate>Thu, 18 May 2023 23:45:00 GMT</pubDate><content:encoded>&lt;ol&gt;
&lt;li&gt;몽고DB 연동
&lt;ul&gt;
&lt;li&gt;nextjs project 폴더에서 mongodb 라이브러리 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install mongodb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;db와 연동을 담당하는 js 파일 하나 생성해서 아래 코드 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import { MongoClient } from &apos;mongodb&apos;
const url = &apos;DB접속URL~~&apos;
const options = { useNewUrlParser: true }
let connectDB

if (process.env.NODE_ENV === &apos;development&apos;) {
  if (!global._mongo) {
     global._mongo = new MongoClient(url, options).connect()
   }
   connectDB = global._mongo
} else {
   connectDB = new MongoClient(url, options).connect()
}
export { connectDB }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;db에서 받아온 데이터를 실제로 활용할 페이지에서 connectDB 함수 호출해서 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import { connectDB } from &quot;/util/database.js&quot;

function () {
   let client = await connectDB;
   const db = client.db(&apos;forum&apos;);
   let result = await db.collection(&apos;post&apos;).find().toArray();
   console.log(result);       
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL12]]></title><description><![CDATA[Part2로 넘어가기 전에 Part1 강의내용을 복습하고 Part2 강의 내용을 일부 진행했다. NextJS에서 이미지 넣는 방법 이미지는 public 폴더에 저장 html  태그로 넣기 Nextjs에서 제공하는  태그로 넣기 - 최적화, import…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/185/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/185/</guid><pubDate>Thu, 18 May 2023 23:40:00 GMT</pubDate><content:encoded>&lt;p&gt;Part2로 넘어가기 전에 Part1 강의내용을 복습하고 Part2 강의 내용을 일부 진행했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NextJS에서 이미지 넣는 방법
&lt;ul&gt;
&lt;li&gt;이미지는 public 폴더에 저장&lt;/li&gt;
&lt;li&gt;html &lt;img&gt; 태그로 넣기&lt;/li&gt;
&lt;li&gt;Nextjs에서 제공하는 &lt;Image&gt; 태그로 넣기 - 최적화, import로 불러오기 필요함&lt;/li&gt;
&lt;li&gt;Image 태그는 외부 이미지 불러올 경우 width, height 무조건 지정 + next.config.js에 이미지 경로 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Client component와 Server component
&lt;ul&gt;
&lt;li&gt;Server component: 페이지 로드할 때 빠르지만 html 내부에 JS 사용 불가능함&lt;/li&gt;
&lt;li&gt;Client component: html 내부에 JS 사용이 가능하지만 페이지 용량이 늘어나고 로딩속도가 약간 느려짐&lt;/li&gt;
&lt;li&gt;hydration: html 문서 불러온 뒤 리액트 문법 적용을 위해 PC가 html을 분석하는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;deduplication 기능
&lt;ul&gt;
&lt;li&gt;같은 데이터 요청이 여러번 있을 경우 묶어서 1번만 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;몽고DB 생성
&lt;ul&gt;
&lt;li&gt;mongodb.com 가입&lt;/li&gt;
&lt;li&gt;freetier로 생성, 관리자를 생성할 때 권한을 atlas admin으로 변경해주기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL11]]></title><description><![CDATA[연습문제 풀이(175) 배열에 대해서 조건을 만족하는 원소가 하나라도 있는지 검사하는 some 메서드를 활용한 풀이를 봤다. 그동안 완전히 까먹고 있었던 메서드다. 활용 방법이 많다고 생각하니 잊지 말아야겠다. Nextjs 강의 수강 복습(Part…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/184/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/184/</guid><pubDate>Fri, 12 May 2023 22:54:00 GMT</pubDate><content:encoded>&lt;ol&gt;
&lt;li&gt;연습문제 풀이(175)
&lt;ul&gt;
&lt;li&gt;배열에 대해서 조건을 만족하는 원소가 하나라도 있는지 검사하는 some 메서드를 활용한 풀이를 봤다. 그동안 완전히 까먹고 있었던 메서드다. 활용 방법이 많다고 생각하니 잊지 말아야겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nextjs 강의 수강 복습(Part 1)
&lt;ul&gt;
&lt;li&gt;프로젝트 업로드 전에 복습하고 기능 구현 체크, 주석 달기 진행&lt;/li&gt;
&lt;li&gt;사이드 이펙트에 관한 내용을 학습하였으나 정리는 하지 못했음. 내일 잊지 말고 할 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[외계어 사전]]></title><description><![CDATA[외계어 사전 https://school.programmers.co.kr/learn/courses/30/lessons/120869 변수 배열 spell 사전 dic 제한 spell과 dic의 원소는 알파벳 소문자로만 이루어져 있음 2 ≤ spell…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/183/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/183/</guid><pubDate>Fri, 12 May 2023 22:40:00 GMT</pubDate><content:encoded>&lt;h3&gt;외계어 사전&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120869&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120869&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;배열 spell&lt;br&gt;
사전 dic&lt;/p&gt;
&lt;h4&gt;제한&lt;/h4&gt;
&lt;p&gt;spell과 dic의 원소는 알파벳 소문자로만 이루어져 있음&lt;br&gt;
2 ≤ spell의 크기 ≤ 10&lt;br&gt;
spell의 원소의 길이는 1&lt;br&gt;
1 ≤ dic의 크기 ≤ 10&lt;br&gt;
1 ≤ dic의 원소의 길이 ≤ 10&lt;br&gt;
spell의 원소를 모두 사용&lt;br&gt;
spell의 원소를 모두 사용해 만들 수 있는 단어는 dic에 두 개 이상 존재하지 않음&lt;br&gt;
dic과 spell 모두 중복된 원소를 갖지 않음&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;알파벳 문자는 배열에 담은 상태에서 sort 메서드로 정렬이 가능하기 때문에, 알파벳을 오름차순으로 정렬한 값을 비교하여 일치하는 값이 있는지 확인하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 2 할당&lt;/li&gt;
&lt;li&gt;변수 word 선언하고 spell을 오름차순으로 정렬한 뒤 string 타입으로 묶어서 할당&lt;/li&gt;
&lt;li&gt;변수 dictionary 선언하고 2와 같은 과정으로 원소를 오름차순으로 정렬한 배열을 할당&lt;/li&gt;
&lt;li&gt;배열의 모든 원소 중 word와 같은 값이 있는지 확인하여 있으면 res에 1 할당&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;some 메서드를 사용해서 아주 쉽게 푼 문제가 있었다. 꼭 기억해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;spell&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//기본값으로 일치하는 항목이 없다고 가정하고 2 할당&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; word &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;spell&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//알파벳 순으로 정렬&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; dictionary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;dic&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//dic의 원소를 알파벳 순으로 정렬, word와 같은 방식&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dictionary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; word&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//dictonary의 원소 중 word와 같은 원소가 있으면 res를 1로 변환&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL10]]></title><description><![CDATA[일교차가 큰데 밤에 그냥 자는 바람에 몸살 증세가 와서 애먹었다. 건강한 컨디션 유지하는데 신경써야겠다. 연습문제 풀이(172) forEach를 사용한 풀이 뜯어보는 중. mdn…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/182/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/182/</guid><pubDate>Thu, 11 May 2023 22:07:00 GMT</pubDate><content:encoded>&lt;p&gt;일교차가 큰데 밤에 그냥 자는 바람에 몸살 증세가 와서 애먹었다. 건강한 컨디션 유지하는데 신경써야겠다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;연습문제 풀이(172)
&lt;ul&gt;
&lt;li&gt;forEach를 사용한 풀이 뜯어보는 중. mdn 문서에서 설명한 전달 가능한 인자에 대해서 계속 찾아보고 있다. 배열의 속성을 뜯어서 따로 가져오는 문법은 모던 자바스크립트 책자에서 이미 읽어서 알고 있었는데 self는 오늘 처음봤다. 연습장에 따로 적어놓던가 해서 주말에 정리해야겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1 관련해서 시간복잡도 검색해봄
&lt;ul&gt;
&lt;li&gt;board가 length * length 이고 또 그 주변을 다시 한번 돌아야 하기 때문에 시간복잡도가 매우 크다고 생각했는데 실상은 그냥 O(n)이었다. board에 들어간 모든 데이터의 수가 n개라고 하면 그냥 시간복잡도가 O(n)이고, 검사를 9번 하는 것을 포함하면 O(9n)인데 계수는 영향을 끼치지 않으므로 그냥 O(n)이 맞다. 이런거 헷갈리지 말아야겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nextjs 강의 수강 복습(Part 1)
&lt;ul&gt;
&lt;li&gt;프로젝트 업로드 전에 복습하고 기능 구현 체크, 주석 달기 진행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL9]]></title><description><![CDATA[연습문제 푸는 중(172) Nextjs 강의 수강(Part 1 - 10) state 문법의 응용, state 변경을 위해 얕은 복사 깊은 복사 개념 설명, 구조분해 할당]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/181/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/181/</guid><pubDate>Mon, 08 May 2023 21:47:00 GMT</pubDate><content:encoded>&lt;ol&gt;
&lt;li&gt;연습문제 푸는 중(172)&lt;/li&gt;
&lt;li&gt;Nextjs 강의 수강(Part 1 - 10)
&lt;ul&gt;
&lt;li&gt;state 문법의 응용, state 변경을 위해 얕은 복사 깊은 복사 개념 설명, 구조분해 할당&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[안전지대]]></title><description><![CDATA[안전지대 https://school.programmers.co.kr/learn/courses/30/lessons/120866 변수 2차원 배열 지도 board 제한 board는 n * n 배열 1 ≤ n ≤ 100 지뢰는 1로 표시 board…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/180/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/180/</guid><pubDate>Mon, 08 May 2023 14:22:52 GMT</pubDate><content:encoded>&lt;h3&gt;안전지대&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120866&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120866&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;2차원 배열 지도 board&lt;/p&gt;
&lt;h4&gt;제한&lt;/h4&gt;
&lt;p&gt;board는 n * n 배열&lt;br&gt;
1 ≤ n ≤ 100&lt;br&gt;
지뢰는 1로 표시&lt;br&gt;
board에는 지뢰가 있는 지역 1과 지뢰가 없는 지역 0만 존재&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;시간복잡도를 줄이는 방법을 고민했지만 별다른 수를 찾지 못했다. 나중에 다른 풀이를 보면서 공부해보기로 하고 반복문을 사용해서 모든 항목을 검사하되, 지뢰가 있는 칸이 나오면 반복문의 반복연산자에 숫자를 더해서 위험지역이 확실한 지역을 건너뛰는 방식을 적용했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;변수 n 선언하고 board.length를 number로 받아서 반환&lt;/li&gt;
&lt;li&gt;for (i = 0; i &amp;#x3C; n; i++) 반복문 진입 - 아래로 내려가는 반복문&lt;/li&gt;
&lt;li&gt;2번 반복문 내부에서 for (j = 0; j &amp;#x3C; n; j++) 반복문 진입 - 우측으로 진행하는 반복문&lt;/li&gt;
&lt;li&gt;변수 danger 선언하고 false 할당 - 검사해서 true로 바뀌면 res에 추가하지 않음&lt;/li&gt;
&lt;li&gt;for (k = i - 1; k &amp;#x3C;= i + 1; k++) 반복문 진입 - 윗줄 부터 아랫줄까지 검사&lt;/li&gt;
&lt;li&gt;k가 -1 또는 n 일때 continue - 검사 안함&lt;/li&gt;
&lt;li&gt;5번 반복문 내부에서 for (l = j - 1; l &amp;#x3C;= j + 1; l++) 반복문 진입 - 왼쪽부터 오른쪽까지 검사&lt;/li&gt;
&lt;li&gt;l가 -1 또는 n 일때 continue - 검사 안함&lt;/li&gt;
&lt;li&gt;board[k][l] === 1 확인, 맞으면 danger에 true 할당&lt;/li&gt;
&lt;li&gt;3번 반복문 내부에서 danger가 true인지 확인, 맞으면 j+=2, 틀리면 res++&lt;/li&gt;
&lt;li&gt;모든 반복문 나와서 res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;테스트케이스가 공개되지 않아서 어떤 이유인지는 모르겠으나 11번 조건이 있을 때 조건을 통과하지 못하는 경우가 있었다. 2씩 더했을때와 1씩 더했을 때 통과하지 못하는 케이스가 다른 걸 봐서는 이런 형태의 조건은 정상적으로 작동하지 않는 모양이다. 짝수와 홀수의 경우로 나뉘는 듯 한데 이건 직접 연구를 해봐야겠다. 다른 사람들의 풀이를 보니 좌표를 미리 배열로 받은 다음 forEach 메서드를 두 번 사용해 반복문과 같은 방식으로 답을 낸 풀이가 있었다. 이 풀이를 해석해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;board&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//board 전체에서 아래로 내려가는 반복문&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//i번째 줄에서 우측으로 진행하는 반복문&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; danger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//위험 여부 확인&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;k &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; k &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; k&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//윗줄부터 아래줄까지 검사&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;k &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; k &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//배열의 범위 바깥을 검사하지 않음&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;l &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; l &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; l&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//왼쪽부터 오른쪽까지 검사&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;l &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; l &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//배열의 범위 바깥을 검사하지 않음&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;board&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;l&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; danger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//지뢰가 있으면 위험&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;danger&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//풀이 11번 danger ? j+=2 : res++; 코드를 대체함&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL8]]></title><description><![CDATA[다항식 연산자 문제를 푸는데 시간을 많이썼다. Nextjs 강의 수강(9강) state 문법 연습문제 풀이(169) JavaScript의 스코프]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/179/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/179/</guid><pubDate>Sun, 07 May 2023 22:45:00 GMT</pubDate><content:encoded>&lt;p&gt;다항식 연산자 문제를 푸는데 시간을 많이썼다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Nextjs 강의 수강(9강)
&lt;ul&gt;
&lt;li&gt;state 문법&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;연습문제 풀이(169)&lt;/li&gt;
&lt;li&gt;JavaScript의 스코프&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[스코프]]></title><description><![CDATA[…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/178/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/178/</guid><pubDate>Sun, 07 May 2023 22:40:00 GMT</pubDate><content:encoded>&lt;p&gt;소인수분해 문제를 풀면서 내가 최초에 마주쳤던 오류가 변수와 관련된 문제여서 꼭 공부를 해야겠다고 생각했다. 모던 자바스크립트를 펼쳐보니 생각보다 내용이 많아서 한번에 내용을 찾아서 정리하는 것은 어려울 것 같아 기본적인 내용을 우선 정리했다. 이 포스트는 계속 업데이트 할 예정이다.&lt;/p&gt;
&lt;h3&gt;스코프&lt;/h3&gt;
&lt;p&gt;모든 프로그래밍 언어에서 적용되는 개념&lt;br&gt;
&lt;strong&gt;식별자(변수 이름, 함수 이름, 클래스 이름 등)가 유효한 범위&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;JavaScript의 스코프&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;식별자를 검색할 때 사용하는 규칙&lt;/strong&gt;&lt;br&gt;
자바스크립트 엔진은 코드를 실행할 때 코드의 문맥(context)를 고려함&lt;/p&gt;
&lt;h4&gt;전역 스코프와 지역 스코프&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;전역 : 코드의 가장 바깥 영역&lt;/li&gt;
&lt;li&gt;지역 : 함수 몸체 내부&lt;/li&gt;
&lt;li&gt;전역에 선언된 식별자는 전역 스코프, 지역에 선언된 식별자는 지역 스코프&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[다항식 더하기]]></title><description><![CDATA[다항식 더하기 https://school.programmers.co.kr/learn/courses/30/lessons/120863 변수 다항식 polynomial 제한 0 < polynomial에 있는 수 < 100 polynomial에 변수는 'x…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/177/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/177/</guid><pubDate>Sun, 07 May 2023 20:33:00 GMT</pubDate><content:encoded>&lt;h3&gt;다항식 더하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120863&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120863&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;다항식 polynomial&lt;/p&gt;
&lt;h4&gt;제한&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; polynomial에 있는 수 &amp;#x3C; 100&lt;br&gt;
polynomial에 변수는 &apos;x&apos;만 존재&lt;br&gt;
polynomial은 0부터 9까지의 정수, 공백, ‘x’, ‘+&apos;로 구성&lt;br&gt;
항과 연산기호 사이에는 항상 공백이 존재&lt;br&gt;
공백은 연속되지 않으며 시작이나 끝에는 공백이 없음&lt;br&gt;
하나의 항에서 변수가 숫자 앞에 오는 경우는 없음&lt;br&gt;
&quot; + 3xx + + x7 + &quot;와 같은 잘못된 입력은 주어지지 않음&lt;br&gt;
&quot;012x + 001&quot;처럼 0을 제외하고는 0으로 시작하는 수는 없음&lt;br&gt;
문자와 숫자 사이의 곱하기는 생략&lt;br&gt;
polynomial에는 일차 항과 상수항만 존재&lt;br&gt;
계수 1은 생략&lt;br&gt;
결괏값에 상수항은 마지막에 나옴&lt;br&gt;
0 &amp;#x3C; polynomial의 길이 &amp;#x3C; 50&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;x의 동류항을 별도의 배열로 분리하여 x와 정수의 합을 반환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 X 선언하고 polynomial.match(/\d*x/g) 할당&lt;/li&gt;
&lt;li&gt;X의 모든 원소의 x를 replace 0으로 변환한 뒤 결과가 &apos;0&apos;인 경우 &apos;10&apos;으로 재변환&lt;/li&gt;
&lt;li&gt;reduce 메서드 적용하여 모든 원소의 합으로 변환한 뒤 10으로 나눠줌&lt;/li&gt;
&lt;li&gt;변수 numbers 선언하고 polynomial.split(&apos; &apos;) 할당&lt;/li&gt;
&lt;li&gt;numbers 배열의 모든 원소를 number 타입으로 변환하고 NaN이 아닌 원소만 남김&lt;/li&gt;
&lt;li&gt;numbers에 reduce 적용하여 모든 수의 합을 할당&lt;/li&gt;
&lt;li&gt;X의 값이 1인지 확인, 1일 경우 빈 문자열을 재할당&lt;/li&gt;
&lt;li&gt;삼항연산자로 numbers의 값이 0인지 확인, 0일 경우 &lt;code class=&quot;language-text&quot;&gt;{X}x&lt;/code&gt;, 아닐 경우 &lt;code class=&quot;language-text&quot;&gt;{X}x + {numbers}&lt;/code&gt; 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;실제로 풀 때는 x동류항 또는 숫자 동류항이 없는 경우를 고려해서 중간에 배열이 맞는지 확인하는 과정을 추가하였다. x항만 존재하는 경우와, 정수항만 존재하는 경우가 따로 있어서 풀이와 코드가 많이 달라졌다. 다른 사람들의 풀이를 보니 split 메서드 연산자를 아예 &apos; + &apos;로 사용해서 항만 골라내는 방식이 있었는데 좋은 방식인 것 같다. 기억하고 있어야 겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;polynomial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; polynomial&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\d*x&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; numbers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; polynomial&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isNaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token constant&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;10&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cur&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cur&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        numbers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cur&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; acc &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; cur&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        res &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; + &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL7]]></title><description><![CDATA[답을 찾고나니 정말 작은 실수였는데 이렇게 시간을 오래 끌었나 싶다. 파면 팔수록 알아야 할게 늘어나는 기분이다. 소인수분해 문제 풀면서 발생했던 오류 원인과 해결책 찾아서 해당 포스트 업데이트 연습문제 풀이(168) 코딩애플 NextJs…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/176/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/176/</guid><pubDate>Thu, 04 May 2023 22:03:00 GMT</pubDate><content:encoded>&lt;p&gt;답을 찾고나니 정말 작은 실수였는데 이렇게 시간을 오래 끌었나 싶다. 파면 팔수록 알아야 할게 늘어나는 기분이다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;소인수분해 문제 풀면서 발생했던 오류 원인과 해결책 찾아서 해당 포스트 업데이트&lt;/li&gt;
&lt;li&gt;연습문제 풀이(168)&lt;/li&gt;
&lt;li&gt;코딩애플 NextJs 강의 수강 및 실습(8강)
&lt;ul&gt;
&lt;li&gt;props로 component간 데이터 상속하는 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[최댓값 만들기 (2)]]></title><description><![CDATA[최댓값 만들기 (2) https://school.programmers.co.kr/learn/courses/30/lessons/120862 변수 정수 배열 numbers 제한 -10,000 ≤ numbers의 원소 ≤ 10,000 2 ≤ numbers…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/175/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/175/</guid><pubDate>Thu, 04 May 2023 14:16:00 GMT</pubDate><content:encoded>&lt;h3&gt;최댓값 만들기 (2)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120862&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120862&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 numbers&lt;/p&gt;
&lt;h4&gt;제한&lt;/h4&gt;
&lt;p&gt;-10,000 ≤ numbers의 원소 ≤ 10,000&lt;br&gt;
2 ≤ numbers 의 길이 ≤ 100&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;처음에는 조건이 매우 까다롭다고 생각했다. 두 번째로 큰 수가 0이거나, 혹은 숫자가 하나만 양수고 나머지 숫자가 모두 음수이거나 하는 경우를 생각해봤다. 그런데 더 고민해보니 음수와 음수를 곱할 경우 양수가 되니 그냥 음수와 양수를 곱하는 경우만 피하면 된다는 결론이 나왔다. numbers에 100개의 원소가 다 들어있고 양수가 50개, 음수가 50개 들어있는 경우를 가정하여, 오름차순으로 정렬한뒤 numbers의 맨 앞의 원소 두개의 곱과 맨 뒤의 원소 두개의 곱을 비교하는 방법을 생각했다. numbers의 원소가 최소 2개이기 때문에, 모든 경우에 이 방법을 적용할 수 있다고 생각하여 이 방법 그대로 답을 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 arr 선언하고 [...numbers].sort((a, b) =&gt; b - a) 할당&lt;/li&gt;
&lt;li&gt;변수 length 선언하고 Number(arr.length) - 1 할당&lt;/li&gt;
&lt;li&gt;삼항연산자로 arr[0] * arr[1] &gt;= arr[length] * arr[length - 1] 확인&lt;/li&gt;
&lt;li&gt;맞으면 arr[0] * [1] 반환, 틀리면 arr[length] * arr[length - 1] 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 풀이를 보니 방식은 똑같고 삼항연산자 대신 Math.max 메서드로 두 값을 비교했는데 이 쪽이 더 깔끔해보인다. 아직 메서드 사용이 서투른 것 같다. 더 공부해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL6]]></title><description><![CDATA[…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/174/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/174/</guid><pubDate>Mon, 01 May 2023 21:20:00 GMT</pubDate><content:encoded>&lt;p&gt;소인수분해를 구현하는 문제를 푸는데 많은 시간을 썼다. 아쉽다. 앞으로 미흡하다고 생각하는 부분은 미루지 않고 이해가 될때까지 풀어보려고 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;연습문제 풀기&lt;/li&gt;
&lt;li&gt;소수를 판별하는 함수 작성 중 에러가 발생하여 해당 에러 메시지를 검색하고 해결 방법 정리(포스트 작성 중)&lt;/li&gt;
&lt;li&gt;소인수분해 알고리즘 학습&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;**내가 생각하지 못했던 부분은 while 반복문 사용, 중복되는 원소를 걸러주는 set 객체 사용&lt;br&gt;
**내가 생각하기에 직관적으로 이해가 제일 잘됐던 구현(&lt;a href=&quot;https://dalconbox.tistory.com/288&quot;&gt;https://dalconbox.tistory.com/288&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;fs&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; input &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/dev/stdin&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; primes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; i
    primes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;primes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;수의 범위를 정해야 하는 경우 제곱근을 쓰면 왜 시간복잡도가 줄어드는지 이해함 → &apos;좌우대칭&apos;을 기억하자&lt;/li&gt;
&lt;li&gt;소인수분해 2부터 시작해서 순서대로 나누는 과정을 console.log로 보여주는 코드 → &lt;a href=&quot;https://rheem-hm.tistory.com/48&quot;&gt;https://rheem-hm.tistory.com/48&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[소인수분해]]></title><description><![CDATA[소인수분해 https://school.programmers.co.kr/learn/courses/30/lessons/120852 변수 자연수 n 제한 2 ≤ n ≤ 10,000 풀이 짝수 여부를 확인한 뒤,…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/172/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/172/</guid><pubDate>Mon, 01 May 2023 17:25:00 GMT</pubDate><content:encoded>&lt;h3&gt;소인수분해&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120852&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120852&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;자연수 n&lt;/p&gt;
&lt;h4&gt;제한&lt;/h4&gt;
&lt;p&gt;2 ≤ n ≤ 10,000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;짝수 여부를 확인한 뒤, 2로 나눈 수를 홀수로 나눠서 검사하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 res 선언하고 빈 배열 할당&lt;/li&gt;
&lt;li&gt;n % 2 === 0 이면 res에 2 추가&lt;/li&gt;
&lt;li&gt;위의 if문 내부에서 while (n % 2 === 0) n /= 2 실행&lt;/li&gt;
&lt;li&gt;for(i = 3; i * i &amp;#x3C;= n; i+=2) 반복문 진입&lt;/li&gt;
&lt;li&gt;n % i === 0 이면 res에 i 추가&lt;/li&gt;
&lt;li&gt;5번 if문 내부에서 while(n % i === 0) n /= i 실행&lt;/li&gt;
&lt;li&gt;n &gt; 2일 경우 res에 추가&lt;/li&gt;
&lt;li&gt;res.length가 0보다 큰지 확인, 크면 res, 그렇지 않으면 [n]을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;문제 풀이에 오늘 하루를 거의 다 보냈다. 소수를 구하는 공식에서 에러가 나서 시간을 많이 잡아먹었고, 에러를 해결했는데도 테스트케이스를 통과하지 못해서 또 많이 고민해야했다. 공부해야할 다른 내용들이 많지만 굉장히 기본적인 것을 놓친 기분이 들어서 이 문제를 풀면서 생긴 의문들을 해소할때까지 다른 내용을 미뤄두고 우선 공부해볼 생각이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; n&lt;span class=&quot;token operator&quot;&gt;/=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; n&lt;span class=&quot;token operator&quot;&gt;/=&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[소인수분해 문제를 풀면서 발생했던 오류 파헤치기]]></title><description><![CDATA[내가 처음에 소인수분해 문제를 풀면서 작성했던 코드는 이거였다(틀린 답이다). 제대로 작성한것 같은데, 계속 아래와 같은 오류가 발생했다. 처음에는 소수 여부를 판별하는 isPrime…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/173/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/173/</guid><pubDate>Mon, 01 May 2023 17:25:00 GMT</pubDate><content:encoded>&lt;p&gt;내가 처음에 소인수분해 문제를 풀면서 작성했던 코드는 이거였다(틀린 답이다).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;제대로 작성한것 같은데, 계속 아래와 같은 오류가 발생했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;#
# Fatal error &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; line &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
# Fatal JavaScript invalid size error &lt;span class=&quot;token number&quot;&gt;169220804&lt;/span&gt;
#
#
#
#FailureMessage Object&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x7fff4a7255d0&lt;/span&gt;
 &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xb6ca81&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x1bef1a4&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;V8_Fatal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;char &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xe63268&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x1010b12&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x1011456&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x11d1b73&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;internal&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Runtime_GrowArrayElements&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;int&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; unsigned long&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;internal&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;Isolate&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x15d5439&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;처음에는 소수 여부를 판별하는 isPrime 함수가 잘못되었나 싶어서 아래 함수를 복사해서 붙여넣었더니 정상적으로 작동했다(&lt;a href=&quot;https://velog.io/@loocia1910/javascript%EC%97%90%EC%84%9C-%EC%86%8C%EC%88%98Prime-number-%EA%B5%AC%ED%95%98%EA%B8%B0&quot;&gt;https://velog.io/@loocia1910/javascript%EC%97%90%EC%84%9C-%EC%86%8C%EC%88%98Prime-number-%EA%B5%AC%ED%95%98%EA%B8%B0&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 음수와 1은 소수가 아니다&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 2는 짝수 중 유일한 소수이다&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token comment&quot;&gt;// 이제 num이 홀수 일때 다른 수에 나눠지는지 판별한다&lt;/span&gt;
  
  &lt;span class=&quot;token comment&quot;&gt;// Math.sqrt(num) 즉, √num까지 나눠 떨어지는지 검사한다&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 원리는 아래글 &quot;에라토스테네스의 체&quot; 참고&lt;/span&gt;
 
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sqrt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; divider &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; divider &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; sqrt&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; divider &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; divider &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;내가 작성한 isPrime과 별 차이가 없다고 생각해서, 에러 메시지 자체를 검색하니 스택오버플로우 질문과 해당 질문의 답변을 한글로 번역한 포스트를 찾을수 있었는데, 심플한 오류 메시지 그대로 &apos;메모리를 과하게 사용했다&apos;가 결론이었다. 여기서 &apos;메모리를 과하게 사용할 이유가 있나?&apos; 싶어서 설마하는 마음에, 원래의 코드에서 isPrime함수의 for 반복문 변수명을 i에서 j로 바꿨다. 그랬더니 잘 작동한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; sqrt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;내 기억으론 분명히 변수의 범위는 함수 내부로 제한된다고 기억하고 있어서 같은 변수를 써도 된다고 생각했는데, 문제를 푸는 페이지 내부에서는 하나의 범위로 묶인 모양이다. 그래서 반복문마다 i가 계속 사용되는 바람에 메모리를 모두 점유하는 문제가 발생했다. 이 문제에 발을 좀 오래 묶여있어서, 앞으로 함수를 선언할 때 변수명도 겹치지 않게 잘 선택해야겠다는 교훈으로 마무리 지으려고 한다. 대신 변수 범위는 주말에 공부를 조금 해봐야겠다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[TIL5]]></title><description><![CDATA[컨디션 이슈가 있어서 시간을 많이 못썼다. 오늘 한 일들 코딩 테스트 2문제 풀음 161, 162 정규식 표현 복습해봄, 몰랐던 연산자 활용 검색 ** /\d/ 생각 못함. 오늘 봤으니 확실히 기억해두기 ** string type…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/171/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/171/</guid><pubDate>Fri, 28 Apr 2023 21:30:00 GMT</pubDate><content:encoded>&lt;p&gt;컨디션 이슈가 있어서 시간을 많이 못썼다.&lt;/p&gt;
&lt;h4&gt;오늘 한 일들&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;코딩 테스트 2문제 풀음&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;161, 162&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;정규식 표현 복습해봄, 몰랐던 연산자 활용 검색&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;** /\d/ 생각 못함. 오늘 봤으니 확실히 기억해두기&lt;br&gt;
** string type 원소를 바꾸는 과정에서 v =&gt; +v 용법. + 활용법&lt;/p&gt;</content:encoded></item><item><title><![CDATA[문자열 정렬하기 (1)]]></title><description><![CDATA[문자열 정렬하기 (1) https://school.programmers.co.kr/learn/courses/30/lessons/120850 변수 문자열 my_string 제한 1 ≤ my_string의 길이 ≤ 100 my_string…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/170/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/170/</guid><pubDate>Fri, 28 Apr 2023 21:26:00 GMT</pubDate><content:encoded>&lt;h3&gt;문자열 정렬하기 (1)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120850&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120850&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 my_string&lt;/p&gt;
&lt;h4&gt;제한&lt;/h4&gt;
&lt;p&gt;1 ≤ my_string의 길이 ≤ 100&lt;br&gt;
my_string에는 숫자가 한 개 이상 포함되어 있음&lt;br&gt;
my_string은 영어 소문자 또는 0부터 9까지의 숫자로 이루어져 있음&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;숫자를 오름차순으로 골라내서 배열로 반환해야 한다. 메서드를 써서 쉽게 반환할 수 있기 때문에 순서를 고민했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;my_string.replaceAll(/[a-z]/g,&apos;&apos;) 실행&lt;/li&gt;
&lt;li&gt;split 메서드로 배열로 분해&lt;/li&gt;
&lt;li&gt;map 메서드로 e =&gt; Number(e) 변환&lt;/li&gt;
&lt;li&gt;sort 메서드로 오름차순 정렬 후 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;풀이가 다양했다. 모르는 부분들을 잘 체크해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; my_string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[a-z]&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[모음 제거]]></title><description><![CDATA[모음 제거 https://school.programmers.co.kr/learn/courses/30/lessons/120849 변수 문자열 my_string 제한사항 my_string은 소문자와 공백으로 이루어져 있음 1 ≤ my_string…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/169/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/169/</guid><pubDate>Fri, 28 Apr 2023 21:16:00 GMT</pubDate><content:encoded>&lt;h3&gt;모음 제거&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120849&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120849&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 my_string&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;my_string은 소문자와 공백으로 이루어져 있음&lt;br&gt;
1 ≤ my_string의 길이 ≤ 1,000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;my_string.replaceAll(/a|e|i|o|u/g,&apos;&apos;) 실행 후 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;| 연산자 대신 []로 묶는 정규식이 더 깔끔했다. 정규식에 더 익숙해져야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; my_string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;a|e|i|o|u&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL4]]></title><description><![CDATA[오늘 한 일들 코딩 테스트 1문제 풀기(레벨 1 문제 푸는 중) '코드 없는 알고리즘과 데이터 구조' 독서(3장, 20:40 ~ 21:30) 코딩애플 NextJs 강의 수강 및 실습(7강)]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/168/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/168/</guid><pubDate>Thu, 27 Apr 2023 21:38:00 GMT</pubDate><content:encoded>&lt;h3&gt;오늘 한 일들&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;코딩 테스트 1문제 풀기(레벨 1 문제 푸는 중)&lt;/li&gt;
&lt;li&gt;&apos;코드 없는 알고리즘과 데이터 구조&apos; 독서(3장, 20:40 ~ 21:30)&lt;/li&gt;
&lt;li&gt;코딩애플 NextJs 강의 수강 및 실습(7강)&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[팩토리얼]]></title><description><![CDATA[팩토리얼 https://school.programmers.co.kr/learn/courses/30/lessons/120848 변수 정수 n 제한사항 i! ≤ n 0 < n ≤ 3,628,800 풀이 변수 res, fac 선언하고 1 할당 while…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/167/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/167/</guid><pubDate>Thu, 27 Apr 2023 20:25:00 GMT</pubDate><content:encoded>&lt;h3&gt;팩토리얼&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120848&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120848&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 n&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;i! ≤ n&lt;br&gt;
0 &amp;#x3C; n ≤ 3,628,800&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;변수 res, fac 선언하고 1 할당&lt;/li&gt;
&lt;li&gt;while(fac &amp;#x3C;= n) 반복문 진입&lt;/li&gt;
&lt;li&gt;fac *= res; res++ 실행&lt;/li&gt;
&lt;li&gt;res - 2 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;res가 계속 크게 나와서 2를 뺀 값을 return했더니 모든 테스트를 통과해서 당황했다. 내 풀이처럼 두 변수를 놓고 계산 결과를 반영하면서 반복문으로 해결한 다른 풀이를 보니 마찬가지로 -1을 한 풀이가 있었는데 접근 자체는 옳은 방향이었던것 같다. 이해를 위해 검색을 해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; fac &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fac &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        fac &lt;span class=&quot;token operator&quot;&gt;*=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        res&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;     
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL3]]></title><description><![CDATA[오늘 한 일들 코딩 테스트 1문제 풀기(레벨 1 문제 푸는 중) '코드 없는 알고리즘과 데이터 구조' 독서(3장, 16:10 ~ 17:15) 코딩애플 NextJs 강의 수강 및 실습(5, 6강) 예전 블로그 포스트 25개 복구 블로그 deploy…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/166/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/166/</guid><pubDate>Wed, 26 Apr 2023 21:38:00 GMT</pubDate><content:encoded>&lt;h3&gt;오늘 한 일들&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;코딩 테스트 1문제 풀기(레벨 1 문제 푸는 중)&lt;/li&gt;
&lt;li&gt;&apos;코드 없는 알고리즘과 데이터 구조&apos; 독서(3장, 16:10 ~ 17:15)&lt;/li&gt;
&lt;li&gt;코딩애플 NextJs 강의 수강 및 실습(5, 6강)&lt;/li&gt;
&lt;li&gt;예전 블로그 포스트 25개 복구&lt;/li&gt;
&lt;li&gt;블로그 deploy 실행&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;내일 할 일들&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;코딩 테스트 문제 1문제 풀기, 어제 못 푼 문제 이어서 풀기&lt;/li&gt;
&lt;li&gt;&apos;코드 없는 알고리즘과 데이터 구조&apos; 40분 이상 읽기&lt;/li&gt;
&lt;li&gt;NestJS 강의 수강 및 실습&lt;/li&gt;
&lt;li&gt;예전 블로그 포스트 Gatsby 형식으로 복구&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[최댓값 만들기 (1)]]></title><description><![CDATA[최댓값 만들기 (1) https://school.programmers.co.kr/learn/courses/30/lessons/120847 변수 정수 배열 numbers 제한사항 0 ≤ numbers의 원소 ≤ 10,000 2 ≤ numbers…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/165/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/165/</guid><pubDate>Wed, 26 Apr 2023 16:06:00 GMT</pubDate><content:encoded>&lt;h3&gt;최댓값 만들기 (1)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120847&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120847&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 numbers&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 ≤ numbers의 원소 ≤ 10,000&lt;br&gt;
2 ≤ numbers의 길이 ≤ 100&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;numbers를 정렬한 다음 가장 큰 두개의 값만 남겨서 곱을 바로 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;numbers 내림차순 정렬&lt;/li&gt;
&lt;li&gt;numbers의 원소를 앞의 두 개만 남기고 모두 삭제&lt;/li&gt;
&lt;li&gt;두 원소의 곱을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;reduce 메서드를 이용해 slice 과정을 생략한 풀이가 있었다. reduce에 전달되는 인자로 인덱스가 존재한다는 사실을 자꾸 까먹는것 같다. 답안을 잘 기억해두고 MDN 문서도 다시 봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cur&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; acc &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; cur&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL2]]></title><description><![CDATA[오늘 한 일들 코딩 테스트 2문제 풀기 '코드 없는 알고리즘과 데이터 구조' 독서(2장, 16:00 ~ 16:42) 코딩애플 NextJs 강의 수강 및 실습(3, 4강) 예전 블로그 포스트 10개 복구 내일 할 일들 코딩 테스트 문제…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/164/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/164/</guid><pubDate>Tue, 25 Apr 2023 22:43:00 GMT</pubDate><content:encoded>&lt;h3&gt;오늘 한 일들&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;코딩 테스트 2문제 풀기&lt;/li&gt;
&lt;li&gt;&apos;코드 없는 알고리즘과 데이터 구조&apos; 독서(2장, 16:00 ~ 16:42)&lt;/li&gt;
&lt;li&gt;코딩애플 NextJs 강의 수강 및 실습(3, 4강)&lt;/li&gt;
&lt;li&gt;예전 블로그 포스트 10개 복구&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;내일 할 일들&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;코딩 테스트 문제 2문제 이상 풀기(1문제는 레벨 1)&lt;/li&gt;
&lt;li&gt;&apos;코드 없는 알고리즘과 데이터 구조&apos; 40분 이상 읽기&lt;/li&gt;
&lt;li&gt;NestJS 강의 수강 및 실습&lt;/li&gt;
&lt;li&gt;예전 블로그 포스트 Gatsby 형식으로 복구&lt;/li&gt;
&lt;li&gt;블로그 deploy 실행&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[합성수 찾기]]></title><description><![CDATA[합성수 찾기 https://school.programmers.co.kr/learn/courses/30/lessons/120846 변수 자연수 n 제한사항 1 ≤ n ≤ 100 풀이 약수의 갯수를 구하는 방법을 어떻게 할지에 시간을 정말 많이 썼다.…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/163/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/163/</guid><pubDate>Tue, 25 Apr 2023 10:15:00 GMT</pubDate><content:encoded>&lt;h3&gt;합성수 찾기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120846&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120846&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;자연수 n&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ n ≤ 100&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;약수의 갯수를 구하는 방법을 어떻게 할지에 시간을 정말 많이 썼다. 4 이상의 짝수는 무조건 합성수다. 홀수의 경우가 문제인데, 홀수 x 홀수가 나오는 경우가 생각보다 많지 않았다(결국 검색을 해서 소수를 제외하면 9 이상의 홀수도 모두 합성수라는 사실을 알았다). 조금 무식한 방법이지만 n의 범위가 1에서 100 사이로 넓지 않기 때문에, n의 범위 안에 있는 소수를 검색해서 소수의 갯수를 제외한 n의 값을 반환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 n 할당&lt;/li&gt;
&lt;li&gt;상수 primeNumber 선언하고 1에서 97까지 소수를 담은 배열 할당&lt;/li&gt;
&lt;li&gt;for (i = 1; i &amp;#x3C;= n; i++) 반복문 진입&lt;/li&gt;
&lt;li&gt;primeNumber.includes(i) 확인, 맞으면 res--&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;문제의 조건에 맞춰서 풀긴 했지만 만족하기 어려운 풀이였다. 더 넓은 범위에도 적용할 수 있는 방식을 다른 사람들 풀이를 보면서 연구해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; primeNumber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;37&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;67&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;71&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;79&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;83&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;primeNumber&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[주사위의 개수]]></title><description><![CDATA[주사위의 개수 https://school.programmers.co.kr/learn/courses/30/lessons/120845 변수 배열 box 주사위 모서리의 길이 정수 n 제한사항 box의 길이는 3 box[0] = 상자의 가로 길이 box[…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/162/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/162/</guid><pubDate>Tue, 25 Apr 2023 09:55:00 GMT</pubDate><content:encoded>&lt;h3&gt;주사위의 개수&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120845&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120845&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;배열 box&lt;br&gt;
주사위 모서리의 길이 정수 n&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;box의 길이는 3&lt;br&gt;
box[0] = 상자의 가로 길이&lt;br&gt;
box[1] = 상자의 세로 길이&lt;br&gt;
box[2] = 상자의 높이 길이&lt;br&gt;
1 ≤ box의 원소 ≤ 100&lt;br&gt;
1 ≤ n ≤ 50&lt;br&gt;
n ≤ box의 원소&lt;br&gt;
주사위는 상자와 평행하게 넣음&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;box[i]/n 의 정수 부분을 곱한 값을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;box에 reduce 메서드를 적용한 풀이들이 있었다. 배열이 나오면 항상 배열에 적용하는 메서드 적용이 가능한지 생각해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;box&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;box&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;box&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;box&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL1]]></title><description><![CDATA[그동안 코딩 테스트 문제도 풀고 블로그를 꾸준히 작성은 해 왔는데, 제대로 활용하지 못하는 것 같아서 블로그를 더 잘 활용할 방법을 떠올리던 중에 마침 TIL 포스트가 떠올라서 오늘부터 바로 작성하려고 한다. 오늘 한 일들 코딩 테스트…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/161/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/161/</guid><pubDate>Mon, 24 Apr 2023 22:02:00 GMT</pubDate><content:encoded>&lt;p&gt;그동안 코딩 테스트 문제도 풀고 블로그를 꾸준히 작성은 해 왔는데, 제대로 활용하지 못하는 것 같아서 블로그를 더 잘 활용할 방법을 떠올리던 중에 마침 TIL 포스트가 떠올라서 오늘부터 바로 작성하려고 한다.&lt;/p&gt;
&lt;h3&gt;오늘 한 일들&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;코딩 테스트 1문제 풀기&lt;/li&gt;
&lt;li&gt;&apos;코드 없는 알고리즘과 데이터 구조&apos; 독서(1장, 13:20 ~ 14:00)&lt;/li&gt;
&lt;li&gt;코딩애플 NextJs 강의 수강 및 실습(1, 2 강)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;내일 할 일들&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;코딩 테스트 문제 2문제 이상 풀기&lt;/li&gt;
&lt;li&gt;&apos;코드 없는 알고리즘과 데이터 구조&apos; 40분 이상 읽기&lt;/li&gt;
&lt;li&gt;NestJS 강의 수강 및 실습&lt;/li&gt;
&lt;li&gt;예전 블로그 포스트 Gatsby 형식으로 복구&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[배열 회전시키기]]></title><description><![CDATA[배열 회전시키기 https://school.programmers.co.kr/learn/courses/30/lessons/120844 변수 정수가 담긴 배열 numbers 문자열 direction 제한사항 3 ≤ numbers의 길이 ≤ 2…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/160/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/160/</guid><pubDate>Mon, 24 Apr 2023 21:57:00 GMT</pubDate><content:encoded>&lt;h3&gt;배열 회전시키기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120844&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120844&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수가 담긴 배열 numbers&lt;br&gt;
문자열 direction&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;3 ≤ numbers의 길이 ≤ 20&lt;br&gt;
direction은 &quot;left&quot; 와 &quot;right&quot; 둘 중 하나&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;변수를 최대한 줄여서 간략하게 문제를 풀어보려고 했으나 코드를 간결하게 만들기 어려웠다. 변수를 선언하고 direction에 맞춰서 배열을 조합해서 반환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 left 선언하고 numbers.shift() 할당&lt;/li&gt;
&lt;li&gt;변수 right 선언하고 numbers.pop() 할당&lt;/li&gt;
&lt;li&gt;삼항연산자 조건으로 direction === &apos;left&apos; 확인&lt;/li&gt;
&lt;li&gt;만족하면 numbers.concat([right, left])&lt;/li&gt;
&lt;li&gt;아니면 [right, left].concat(numbers)&lt;/li&gt;
&lt;li&gt;5를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;unshift(numbers.pop()), push(numbers.shift())로 바로 집어넣는 방식을 전혀 떠올리지 못했다. 다른 풀이를 보니 대부분 이런 식으로 풀었다. 복잡하지 않은 문제에 시간을 많이 쓴 것 같다. 메소드를 응용하는 방법을 계속 고민해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; direction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; left &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; right &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; direction &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;left&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[공 던지기]]></title><description><![CDATA[공 던지기 https://school.programmers.co.kr/learn/courses/30/lessons/120843 변수 정수 배열 numbers 정수 K 제한사항 공은…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/159/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/159/</guid><pubDate>Fri, 21 Apr 2023 17:15:00 GMT</pubDate><content:encoded>&lt;h3&gt;공 던지기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120843&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120843&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 numbers&lt;br&gt;
정수 K&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;공은 1번부터 던지며 오른쪽으로 한 명을 건너뛰고 그다음 사람에게만 던질 수 있음&lt;br&gt;
2 &amp;#x3C; numbers의 길이 &amp;#x3C; 100&lt;br&gt;
0 &amp;#x3C; k &amp;#x3C; 1,000&lt;br&gt;
numbers의 첫 번째와 마지막 번호는 실제로 바로 옆에 있음&lt;br&gt;
numbers는 1부터 시작하며 번호는 순서대로 올라감&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;수열이라고 생각하고 10번째 값까지 적어보니 2n-1번째 값을 찾는 수열 문제임을 확인했다. 추가로 배열의 인덱스는 0부터 시작하기 때문에, 구하는 값은 2n - 2에 해당하는 numbers의 원소다. numbers의 길이보다 길 경우 길이로 나눈 나머지를 인덱스에 넣는 방식으로 값을 찾았다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;삼항연산자 조건으로 k * 2 - 2 &gt; numbsers.length 확인&lt;/li&gt;
&lt;li&gt;만족하면 numbers[(k * 2 - 2) % numbers.length]&lt;/li&gt;
&lt;li&gt;그 외의 경우 numbers[k * 2 - 2]&lt;/li&gt;
&lt;li&gt;3을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 풀이를 살펴보니 2n - 2의 값을 numbers의 길이와 굳이 비교할 필요가 없었다. -- 연산자를 사용한 풀이도 있었는데 변수 앞에 먼저 --를 실행해서 k가 1일 때 바로 0으로 만드는 풀이도 있었다. (n - 1) * 2로 푸는 방법인데 이 쪽이 계산을 더 간단하게 만들어준다. 답이 정상적으로 구해지더라도 계산을 더 간소하게 할 수 있는지 꼭 제출 전에 살펴봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; k&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; k &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;k &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;k &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[가위 바위 보]]></title><description><![CDATA[가위 바위 보 https://school.programmers.co.kr/learn/courses/30/lessons/120839 변수 문자열 rsp 제한사항 가위는 2 바위는 0 보는 5로 표현 0 < rsp의 길이 ≤ 100 rsp…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/158/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/158/</guid><pubDate>Thu, 20 Apr 2023 20:18:00 GMT</pubDate><content:encoded>&lt;h3&gt;가위 바위 보&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120839&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120839&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 rsp&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;가위는 2 바위는 0 보는 5로 표현&lt;br&gt;
0 &amp;#x3C; rsp의 길이 ≤ 100&lt;br&gt;
rsp와 길이가 같은 문자열을 return&lt;br&gt;
rsp는 숫자 0, 2, 5로 이루어져 있음&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;replaceAll 메서드를 생각했는데 바꾼 답이 바꾸지 않은 답과 중복될 경우 그 다음번 변환에서 반드시 바뀌어서 쓸 수 없었다. 배열로 받아서 모두 바꾸는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;구조분해 할당으로 rsp 분해&lt;/li&gt;
&lt;li&gt;map 메서드 적용, 콜백 함수로 삼항연산자 ? 사용해서 &quot;2&quot;, 아닐 경우 &quot;0&quot; 여부를 확인&lt;/li&gt;
&lt;li&gt;가위 바위 보에 이기는 답을 반환&lt;/li&gt;
&lt;li&gt;join(&apos;&apos;) 메서드 실행한 3을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;문자열을 분해해서 변환하는 접근 방식은 대부분 동일했다. 더 좋은 방식이 있는지 찾아봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;rsp&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;2&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;5&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[캐릭터의 좌표]]></title><description><![CDATA[캐릭터의 좌표 https://school.programmers.co.kr/learn/courses/30/lessons/120861 변수 배열 keyinput 맵의 크기 board 제한사항 캐릭터는 항상 [0,0]에서 시작 board…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/157/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/157/</guid><pubDate>Wed, 19 Apr 2023 19:55:07 GMT</pubDate><content:encoded>&lt;h3&gt;캐릭터의 좌표&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120861&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120861&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;배열 keyinput&lt;br&gt;
맵의 크기 board&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;캐릭터는 항상 [0,0]에서 시작&lt;br&gt;
board은 [가로 크기, 세로 크기] 형태&lt;br&gt;
board의 가로 크기와 세로 크기는 홀수&lt;br&gt;
board의 크기를 벗어난 방향키 입력은 무시&lt;br&gt;
0 ≤ keyinput의 길이 ≤ 50&lt;br&gt;
1 ≤ board[0] ≤ 99&lt;br&gt;
1 ≤ board[1] ≤ 99&lt;br&gt;
keyinput은 항상 up, down, left, right만 주어짐&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;상수 res 선언하고 [0, 0] 할당&lt;/li&gt;
&lt;li&gt;상수 limit 선언하고 [Math.trunc(board[0] / 2), Math.trunc(board[1] / 2)] 할당&lt;/li&gt;
&lt;li&gt;for (e of keyinput) 반복문 진입&lt;/li&gt;
&lt;li&gt;조건문으로 e 값 확인, e === &apos;up&apos;일 때 res[1]++, Math.abs(res[1]) &gt; limit[1] 이면 res[1]--&lt;/li&gt;
&lt;li&gt;e === &apos;down&apos;일 때 res[1]--, Math.abs(res[1]) &gt; limit[1] 이면 res[1]++&lt;/li&gt;
&lt;li&gt;e === &apos;left&apos;일 때 res[0]--, Math.abs(res[0]) &gt; limit[0] 이면 res[0]++&lt;/li&gt;
&lt;li&gt;e === &apos;right&apos;일 때 res[0]++, Math.abs(res[0]) &gt; limit[0] 이면 res[0]--&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;switch를 사용한 구문이 깔끔하게 정리가 되어 있고 길이도 크게 길지 않았다. switch를 활용하는 경우를 찾아봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;keyinput&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; board&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; limit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;board&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;board&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; keyinput&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;up&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; limit&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;down&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; limit&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;left&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; limit&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;right&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; limit&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[진료 순서 정하기]]></title><description><![CDATA[진료 순서 정하기 https://school.programmers.co.kr/learn/courses/30/lessons/120835 변수 정수 배열 emergency 제한사항 중복된 원소 없음 1 ≤ emergency의 길이 ≤ 10…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/156/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/156/</guid><pubDate>Tue, 18 Apr 2023 11:38:00 GMT</pubDate><content:encoded>&lt;h3&gt;진료 순서 정하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120835&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120835&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 emergency&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;중복된 원소 없음&lt;br&gt;
1 ≤ emergency의 길이 ≤ 10&lt;br&gt;
1 ≤ emergency의 원소 ≤ 100&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;emergency 배열을 내림차순으로 정렬한 새로운 배열을 받은 다음, 반복문을 통해 메서드로 인덱스 넘버를 받는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 dig 선언하고 emergency를 복사한 배열을 내림차순으로 정렬&lt;/li&gt;
&lt;li&gt;상수 res 선언하고 빈 배열 할당&lt;/li&gt;
&lt;li&gt;for(i=0, i &amp;#x3C; emergency.length, i++) 반복문 실행&lt;/li&gt;
&lt;li&gt;반복문 내부에서 res.push(dig.findIndex(e =&gt; e === emergency[i]) + 1) 실행&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;for 반복문을 forEach 메서드로 대체해서 풀었다. 다른 풀이를 보니 별도의 배열을 선언해서 정렬한 것은 같은데 emergency에 바로 map을 적용해서 푸는 방식이 많았다. indexOf 메서드를 썼는데 더 간단한 방법인 것 같다. 기억해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;emergency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; dig &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;emergency&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    emergency&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ele&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; ele&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[배열 자르기]]></title><description><![CDATA[배열 자르기 https://school.programmers.co.kr/learn/courses/30/lessons/120833 변수 정수 배열 numbers 정수 num1, num2 제한사항 2 ≤ numbers의 길이 ≤ 30 0 ≤ numbers…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/155/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/155/</guid><pubDate>Mon, 17 Apr 2023 10:40:00 GMT</pubDate><content:encoded>&lt;h3&gt;배열 자르기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120833&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120833&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 numbers&lt;br&gt;
정수 num1, num2&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;2 ≤ numbers의 길이 ≤ 30&lt;br&gt;
0 ≤ numbers의 원소 ≤ 1,000&lt;br&gt;
0 ≤num1 &amp;#x3C; num2 &amp;#x3C; numbers의 길이&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;메서드를 사용해서 바로 배열을 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;numbers.slice(num1, num2 + 1) 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num2 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[짝수의 합]]></title><description><![CDATA[짝수의 합 https://school.programmers.co.kr/learn/courses/30/lessons/120831 변수 정수 n 제한사항 0 < n ≤ 100…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/154/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/154/</guid><pubDate>Wed, 12 Apr 2023 09:35:00 GMT</pubDate><content:encoded>&lt;h3&gt;짝수의 합&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120831&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120831&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 n&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; n ≤ 1000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;조건을 만족하는 수의 합은 보통 공식이 있어서 이 문제도 공식이 있지 않을까 했는데, 혼자서 찾는 것은 쉽지 않았다. 공식은 나중에 찾아보기로 하고 반복문으로 합을 구했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;for(i = 2; i &amp;#x3C;= n; i += 2) 반복문 진입&lt;/li&gt;
&lt;li&gt;res += i 실행&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 사람들의 풀이를 보니 역시 공식이 있었다. 원리를 찾아봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[숨어있는 숫자의 덧셈 (2)]]></title><description><![CDATA[숨어있는 숫자의 덧셈 (2) https://school.programmers.co.kr/learn/courses/30/lessons/120864 변수 문자열 my_string 제한사항 1 ≤ my_string의 길이 ≤ 1,000 1 ≤ my…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/153/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/153/</guid><pubDate>Sat, 08 Apr 2023 23:52:00 GMT</pubDate><content:encoded>&lt;h3&gt;숨어있는 숫자의 덧셈 (2)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120864&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120864&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 my_string&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ my_string의 길이 ≤ 1,000&lt;br&gt;
1 ≤ my_string 안의 자연수 ≤ 1000&lt;br&gt;
연속된 수는 하나의 숫자로 간주&lt;br&gt;
0이 선행하는 경우 없음&lt;br&gt;
문자열에 자연수가 없는 경우 0을 return&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;split 메서드로 나눠서 숫자 여부를 확인할 수 있다. 빈 문자열로 나누는 대신 정규표현식을 써서 알파벳에 해당하면 모두 빈 문자열로 치환하고, 숫자만 남은 배열을 하나의 값으로 합쳐서 바로 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;my_string.split(/\D/) 실행&lt;/li&gt;
&lt;li&gt;filter 메서드로 원소의 길이가 0보다 큰 원소만 남김&lt;/li&gt;
&lt;li&gt;reduce 메서드로 초기값 0, 나머지 원소의 Number tpye을 모두 합쳐서 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 풀이를 보니 나와 비슷하게 접근했는데 정규식의 뒤에 +를 붙이고 filter를 생략한 풀이가 있었다. 저런 활용법은 생각하지 못했다. 정규표현식 응용 방법을 많이 검색해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; my_string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cur&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cur&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[순서쌍의 개수]]></title><description><![CDATA[순서쌍의 개수 https://school.programmers.co.kr/learn/courses/30/lessons/120836 변수 자연수 n 제한사항 1 ≤ n ≤ 1,000,00…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/152/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/152/</guid><pubDate>Fri, 07 Apr 2023 16:12:00 GMT</pubDate><content:encoded>&lt;h3&gt;순서쌍의 개수&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120836&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120836&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;자연수 n&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ n ≤ 1,000,000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;순서쌍의 갯수를 물어보는 문제이므로 반복문을 통해 순서쌍이 성립되는 경우만 별도의 변수에 합산했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;for(i = 1; i &amp;#x3C;= n / 2; i++) 반복문 진입&lt;/li&gt;
&lt;li&gt;n % i === 0 확인, 맞으면 res++&lt;/li&gt;
&lt;li&gt;res + 1을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;제곱근을 이용한 방식이 아직도 헷갈린다. 제곱근 방식을 사용한 다른 사람들의 풀이를 연구해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[양꼬치]]></title><description><![CDATA[양꼬치 https://school.programmers.co.kr/learn/courses/30/lessons/120830 변수 정수 n, k 제한사항 0 < n < 1,000 n / 10 ≤ k < 1,00…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/151/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/151/</guid><pubDate>Thu, 06 Apr 2023 01:31:00 GMT</pubDate><content:encoded>&lt;h3&gt;양꼬치&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120830&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120830&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 n, k&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; n &amp;#x3C; 1,000&lt;br&gt;
n / 10 ≤ k &amp;#x3C; 1,000&lt;br&gt;
서비스로 받은 음료수는 모두 마심&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;양꼬치의 주문 수가 n이므로 n을 10으로 나눈 몫 만큼 음료수 주문 숫자 k를 차감하면 된다. 별도의 변수 선언 없이 바로 값을 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;12000 * n + 2000 * (k - Math.trunc(n / 10))를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; k&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;k &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[특정 문자 제거하기]]></title><description><![CDATA[특정 문자 제거하기 https://school.programmers.co.kr/learn/courses/30/lessons/120826 변수 문자열 my_string 문자 letter 제한사항 1 ≤ my_string의 길이 ≤ 100 letter…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/150/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/150/</guid><pubDate>Wed, 05 Apr 2023 23:06:00 GMT</pubDate><content:encoded>&lt;h3&gt;특정 문자 제거하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120826&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120826&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 my_string&lt;br&gt;
문자 letter&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ my_string의 길이 ≤ 100&lt;br&gt;
letter은 길이 1인 영문자&lt;br&gt;
my_string과 letter은 알파벳 대소문자 구성&lt;br&gt;
대문자와 소문자를 구분&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;replaceAll 메서드로 letter에 해당하는 모든 문자를 모두 바로 변환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;my_string.replaceAll(letter, &apos;&apos;)를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;my_string&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; letter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; my_string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;letter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[문자 반복 출력하기]]></title><description><![CDATA[문자 반복 출력하기 https://school.programmers.co.kr/learn/courses/30/lessons/120825 변수 문자열 my_string 정수 n 제한사항 2 ≤ my_string 길이 ≤ 5 2 ≤ n ≤ 10 "my…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/149/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/149/</guid><pubDate>Wed, 05 Apr 2023 22:56:00 GMT</pubDate><content:encoded>&lt;h3&gt;문자 반복 출력하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120825&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120825&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 my_string&lt;br&gt;
정수 n&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;2 ≤ my_string 길이 ≤ 5&lt;br&gt;
2 ≤ n ≤ 10&lt;br&gt;
&quot;my_string&quot;은 영어 대소문자&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;문자열을 그대로 반복하는게 아니라 글자별로 반복하는 구조다. 배열로 분해한 다음 각 원소를 n번씩 반복해서 합치는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;my_string을 배열로 변환&lt;/li&gt;
&lt;li&gt;map 메서드 실행, 콜백 함수로 e =&gt; e = e.repeat(n) 실행&lt;/li&gt;
&lt;li&gt;join(&apos;&apos;) 메서드 실행&lt;/li&gt;
&lt;li&gt;my_string 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;my_string&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;my_string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[문자열 뒤집기]]></title><description><![CDATA[문자열 뒤집기 https://school.programmers.co.kr/learn/courses/30/lessons/120822 변수 문자열 my_string 제한사항 1 ≤ my_string의 길이 ≤ 1,00…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/148/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/148/</guid><pubDate>Wed, 05 Apr 2023 21:50:00 GMT</pubDate><content:encoded>&lt;h3&gt;문자열 뒤집기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120822&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120822&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 my_string&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ my_string의 길이 ≤ 1,000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;바로 전 문제에서 배열을 뒤집는 방식을 사용했다. 배열로 분해한 다음 뒤집어서 합치는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;my_string.split(&apos;&apos;) 실행&lt;/li&gt;
&lt;li&gt;reverse 메서드로 반전&lt;/li&gt;
&lt;li&gt;join(&apos;&apos;) 메서드 실행&lt;/li&gt;
&lt;li&gt;my_string 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 사람들의 풀이 중에 Array 생성자를 써서 split 메서드를 대신 사용하는 풀이가 있었다. 앞으로 문자열을 분해할 때는 Array 생성자를 써야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; my_string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[배열 뒤집기]]></title><description><![CDATA[배열 뒤집기 https://school.programmers.co.kr/learn/courses/30/lessons/120821 변수 정수 배열 num_list 제한사항 1 ≤ num_list의 길이 ≤ 1,000 0 ≤ num_list의 원소 ≤…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/147/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/147/</guid><pubDate>Wed, 05 Apr 2023 21:41:00 GMT</pubDate><content:encoded>&lt;h3&gt;배열 뒤집기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120821&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120821&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 num_list&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ num_list의 길이 ≤ 1,000&lt;br&gt;
0 ≤ num_list의 원소 ≤ 1,000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;반복문을 통해 배열을 역으로 순환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 res 선언하고 빈 배열 할당&lt;/li&gt;
&lt;li&gt;for(i = num_list.length - 1; i &gt;= 0; i--) 반복문 실행&lt;/li&gt;
&lt;li&gt;res.push(num_list[i]) 실행&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;배열을 뒤집는 메서드가 없다고 생각했는데, reverse라는 메서드가 있었다. 앞으로는 특별한 경우가 아니면 reverse 메서드를 써야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num_list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; num_list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num_list&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[나이 출력]]></title><description><![CDATA[나이 출력 https://school.programmers.co.kr/learn/courses/30/lessons/120820 변수 나이 age 제한사항 0 < age ≤ 120 나이는 태어난 연도에 1살이며 1년마다…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/146/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/146/</guid><pubDate>Wed, 05 Apr 2023 20:23:00 GMT</pubDate><content:encoded>&lt;h3&gt;나이 출력&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120820&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120820&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;나이 age&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; age ≤ 120&lt;br&gt;
나이는 태어난 연도에 1살이며 1년마다 1씩 증가&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;간단한 사칙연산이라 바로 답을 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;2022 - age + 1 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; age &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[짝수 홀수 개수]]></title><description><![CDATA[짝수 홀수 개수 https://school.programmers.co.kr/learn/courses/30/lessons/120824 변수 정수 배열 num_list 제한사항 1 ≤ num_list의 길이 ≤ 100 0 ≤ num_list의 원소 ≤…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/145/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/145/</guid><pubDate>Tue, 04 Apr 2023 17:15:00 GMT</pubDate><content:encoded>&lt;h3&gt;짝수 홀수 개수&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120824&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120824&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 num_list&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ num_list의 길이 ≤ 100&lt;br&gt;
0 ≤ num_list의 원소 ≤ 1,000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;다른 문제의 풀이를 보면서 reduce 메서드를 통해 하나의 배열로 묶어서 반환하는 방식을 봤는데 직접 시도해보니 잘 되지 않았다. 별도의 배열을 선언해서 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 res 선언하고 [0, 0] 할당&lt;/li&gt;
&lt;li&gt;num_list에 forEach 적용, 콜백 함수로 각 원소에 대해서 짝수, 홀수 여부를 확인&lt;/li&gt;
&lt;li&gt;짝수면 res[0] + 1, 홀수면 res[1] + 1&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;접근방법이 굉장히 다양했다. 짝수 홀수 검사를 하지 않고 2로 나눈 나머지를 바로 반환할 배열의 순서로 활용한 답이 많은 추천을 받았는데 나중에 사용할 수 있는 방법인 것 같다. 기억해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num_list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    num_list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[저주의 숫자 3]]></title><description><![CDATA[저주의 숫자 3 https://school.programmers.co.kr/learn/courses/30/lessons/120871 변수 정수 배열 n 제한사항 1 ≤ n ≤ 100 풀이 숫자 3이 등장하면 안되고,…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/144/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/144/</guid><pubDate>Mon, 03 Apr 2023 10:56:00 GMT</pubDate><content:encoded>&lt;h3&gt;저주의 숫자 3&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120871&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120871&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 n&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ n ≤ 100&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;숫자 3이 등장하면 안되고, 3의 배수도 사용할 수 없다. 이 조건들을 그대로 만족하는 식은 작성하기 어렵고 직관적이지 않다고 생각해서, 반복문을 써서 조건을 만족하는 경우에 변환되는 숫자에 1씩 더해서 조건을 피하는 방식으로 변환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;for(i = 0; i &amp;#x3C; n; i++) 반복문 진입&lt;/li&gt;
&lt;li&gt;res + 1&lt;/li&gt;
&lt;li&gt;res가 3의 배수인지 확인, 맞으면 res + 1&lt;/li&gt;
&lt;li&gt;res 끝자리 3 여부 확인, 맞으면 res + 1&lt;/li&gt;
&lt;li&gt;res 10의 자리 3 여부 확인, 맞으면 res + 10&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;실제 코드를 작성한 다음 오류를 체크하면서 계산해보니 처음에 순서대로 작성한 알고리즘과는 조금 달라졌다. 변환의 경우 53 → 54 → 55와 같이 두 번 연속으로 변환해야 하는 경우가 있어 같은 조건을 한 번 더 체크하는 방식으로 해결했다. 다른 풀이를 보니 대체로 정규표현식이나 배열을 생성하는 과정을 통해서 문제를 해결했다. for 반복문 i를 쓰면서 i에 3이 포함되지 않은 경우 별도로 선언된 카운트를 올리는 방식으로 i를 바로 반환하는 풀이가 제일 직관적이었던 것 같다. 정규표현식은 잊을만하면 항상 찾게 되는데 아직까지 자유자재로 쓰진 못하는 것 같다. 자주 찾아봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        res&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;       
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[배열의 평균값]]></title><description><![CDATA[배열의 평균값 https://school.programmers.co.kr/learn/courses/30/lessons/120817 변수 정수 배열 numbers 제한사항 0 ≤ numbers의 원소 ≤ 1,000 1 ≤ numbers의 길이 ≤ 10…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/143/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/143/</guid><pubDate>Sat, 01 Apr 2023 22:03:00 GMT</pubDate><content:encoded>&lt;h3&gt;배열의 평균값&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120817&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120817&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 numbers&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 ≤ numbers의 원소 ≤ 1,000&lt;br&gt;
1 ≤ numbers의 길이 ≤ 100&lt;br&gt;
정답의 소수 부분이 .0 또는 .5인 경우만 주어짐&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;reduce 메서드로 바로 답을 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;numbers.reduce() 실행&lt;/li&gt;
&lt;li&gt;콜백 함수로 (acc, cur, idx, { length }) =&gt; idx === length - 1 ? (acc + cur) / length : acc + cur 실행&lt;/li&gt;
&lt;li&gt;최초값으로 0 할당&lt;/li&gt;
&lt;li&gt;1을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cur&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; idx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; length &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; idx &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;acc &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; cur&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; acc &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; cur&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[개미 군단]]></title><description><![CDATA[개미 군단 https://school.programmers.co.kr/learn/courses/30/lessons/120837 변수 사냥감의 체력 hp 제한사항 hp는 자연수 0 ≤ hp ≤ 100…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/142/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/142/</guid><pubDate>Sat, 01 Apr 2023 21:40:00 GMT</pubDate><content:encoded>&lt;h3&gt;개미 군단&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120837&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120837&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;사냥감의 체력 hp&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;hp는 자연수&lt;br&gt;
0 ≤ hp ≤ 1000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;복잡한 계산이 필요하지 않아서 답을 담을 변수를 선언하고 사칙 연산으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 Math.trunc(hp / 5) 할당&lt;/li&gt;
&lt;li&gt;hp = hp % 5 할당&lt;/li&gt;
&lt;li&gt;res = res + hp Math.trunc(hp / 3) 할당&lt;/li&gt;
&lt;li&gt;hp = hp % 3 할당&lt;/li&gt;
&lt;li&gt;res + hp를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hp &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    hp &lt;span class=&quot;token operator&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    res &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hp &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    hp &lt;span class=&quot;token operator&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; hp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[옷가게 할인 받기]]></title><description><![CDATA[옷가게 할인 받기 https://school.programmers.co.kr/learn/courses/30/lessons/120818 변수 구매한 옷의 가격 price 제한사항 10 ≤ price ≤ 1,000,000 price는 10원 단위(…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/141/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/141/</guid><pubDate>Fri, 31 Mar 2023 17:15:00 GMT</pubDate><content:encoded>&lt;h3&gt;옷가게 할인 받기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120818&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120818&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;구매한 옷의 가격 price&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;10 ≤ price ≤ 1,000,000&lt;br&gt;
price는 10원 단위(1의 자리가 0)&lt;br&gt;
소수점 이하를 버린 정수를 반환&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;조건문을 통해서 price의 할인 조건을 확인 후 할인된 가격을 반환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;price &gt;= 500000 확인, 맞으면 price * 8 / 10에서 소수점 이하를 버린 값을 반환&lt;/li&gt;
&lt;li&gt;price &gt;= 300000 확인, 맞으면 price * 9 / 10에서 소수점 이하를 버린 값을 반환&lt;/li&gt;
&lt;li&gt;price &gt;= 100000 확인, 맞으면 price * 95 / 100에서 소수점 이하를 버린 값을 반환&lt;/li&gt;
&lt;li&gt;조건을 모두 만족하지 않으면 price를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;price &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; price &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; price &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;300000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; price &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; price &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; price &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;95&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; price&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[아이스 아메리카노]]></title><description><![CDATA[아이스 아메리카노 https://school.programmers.co.kr/learn/courses/30/lessons/120819 변수 돈 money 제한사항 0 < money ≤ 1,000,00…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/140/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/140/</guid><pubDate>Fri, 31 Mar 2023 16:40:00 GMT</pubDate><content:encoded>&lt;h3&gt;아이스 아메리카노&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120819&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120819&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;돈 money&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; money ≤ 1,000,000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;배열 내부에서 필요한 값을 계산해서 바로 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;money를 5500으로 나눈 값의 소수점을 버린 값을 배열에 추가&lt;/li&gt;
&lt;li&gt;money를 5500으로 나눈 값의 나머지를 배열에 추가&lt;/li&gt;
&lt;li&gt;배열을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;money &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; money &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[숨어있는 숫자의 덧셈 (1)]]></title><description><![CDATA[숨어있는 숫자의 덧셈 (1) https://school.programmers.co.kr/learn/courses/30/lessons/120851 변수 문자열 my_string 제한사항 1 ≤ my_string의 길이 ≤ 1,000 my_string…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/139/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/139/</guid><pubDate>Thu, 30 Mar 2023 15:10:00 GMT</pubDate><content:encoded>&lt;h3&gt;숨어있는 숫자의 덧셈 (1)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120851&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120851&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 my_string&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ my_string의 길이 ≤ 1,000&lt;br&gt;
my_string은 소문자, 대문자 그리고 한자리 자연수로 구성&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;배열로 분해하여 숫자만 골라내는 과정을 적용했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;split(&apos;&apos;) 메서드 써서 배열로 분해&lt;/li&gt;
&lt;li&gt;배열의 각 원소를 강제로 number 타입으로 변환했을 때 NaN 여부를 확인&lt;/li&gt;
&lt;li&gt;숫자로 변환&lt;/li&gt;
&lt;li&gt;모든 원소의 합을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;reduce 메서드의 콜백에서 자꾸 이상한 결과가 나와서 결국 map 메서드를 써서 number 타입으로 전체 형변환을 해버렸다. 다른 사람들의 풀이를 보니 reduce의 콜백에서 acc와 cur을 모두 강제로 paresInt 함수로 number 타입으로 강제로 바꿔서 연산을 했는데, 아마 이 부분을 내가 놓친 것 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; my_string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isNaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cur&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; acc &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; cur&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[배열 원소의 길이]]></title><description><![CDATA[배열 원소의 길이 https://school.programmers.co.kr/learn/courses/30/lessons/120854 변수 문자열 배열 strlist 제한사항 1 ≤ strlist 원소의 길이 ≤ 100 strlist…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/138/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/138/</guid><pubDate>Thu, 30 Mar 2023 14:15:00 GMT</pubDate><content:encoded>&lt;h3&gt;배열 원소의 길이&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120854&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120854&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 배열 strlist&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ strlist 원소의 길이 ≤ 100&lt;br&gt;
strlist는 알파벳 소문자, 대문자, 특수문자로 구성&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;길이는 메서드를 통해 바로 받을 수 있기 때문에, 별도의 변수 없이 바로 변환해서 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;strlist에 map 메서드 적용, e =&gt; e = e.length 콜백함수 실행 후 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;strlist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; strlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[점의 위치 구하기]]></title><description><![CDATA[점의 위치 구하기 https://school.programmers.co.kr/learn/courses/30/lessons/120841 변수 정수 배열 dot 제한사항 dot의 길이 = 2 dot[0] x좌표, dot[1] y좌표 -500 ≤ dot…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/137/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/137/</guid><pubDate>Wed, 29 Mar 2023 13:20:00 GMT</pubDate><content:encoded>&lt;h3&gt;점의 위치 구하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120841&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120841&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 dot&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;dot의 길이 = 2&lt;br&gt;
dot[0] x좌표, dot[1] y좌표&lt;br&gt;
-500 ≤ dot의 원소 ≤ 500&lt;br&gt;
dot의 원소는 0이 오지 않음&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;Y축을 기준으로 dot[0]이 양수인지 음수인지 확인하여 1, 2 사분면을 정한다. 만약 dot[1]이 음수라면 사분면의 값에서 5를 빼고 절대값을 취하면 원하는 사분면을 얻을 수 있기 때문에, 이 과정을 그대로 코드로 옮겼다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 dot[0]이 0보다 큰지 확인하여 1 또는 2 할당&lt;/li&gt;
&lt;li&gt;dot[1]이 0보다 작은 수인지 확인, 작으면 res에서 5를 빼고 절대값&lt;/li&gt;
&lt;li&gt;res를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;변수를 선언하지 않고 조건문을 연달아서 사용하는 방식의 풀이들이 많았다. 알아보기 어려운 코드라고 생각하지만, 사용할 수 있는 방법이기 때문에 직접 작성해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dot&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; dot&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[직사각형 넓이 구하기]]></title><description><![CDATA[직사각형 넓이 구하기 https://school.programmers.co.kr/learn/courses/30/lessons/120860 변수 배열 dots 제한사항 dots의 길이 = 4 dots의 원소의 길이 = 2 -256 < dots[i…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/136/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/136/</guid><pubDate>Tue, 28 Mar 2023 16:13:00 GMT</pubDate><content:encoded>&lt;h3&gt;직사각형 넓이 구하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120860&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120860&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;배열 dots&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;dots의 길이 = 4&lt;br&gt;
dots의 원소의 길이 = 2&lt;br&gt;
-256 &amp;#x3C; dots[i]의 원소 &amp;#x3C; 256&lt;br&gt;
잘못된 입력 없음&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;문제에서 변이 축과 평행한 직사각형이라고 조건을 줘서 계산이 쉬웠다. 예시 2에서 각 꼭짓점이 순서대로 주어지지 않았기 때문에 dots를 정렬하는 방식을 고민했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 x, y를 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;dots에 sort((a, b) =&gt; a[0] === b[0] || a - b) 실행&lt;/li&gt;
&lt;li&gt;x에 dots[0][0] - dots[2][0]의 절대값 할당&lt;/li&gt;
&lt;li&gt;y에 dots[0][1] - dots[1][1]의 절대값 할당&lt;/li&gt;
&lt;li&gt;x * y 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 사람들의 풀이가 매우 다채로웠다. 대체로 변의 길이를 구해서 푸는 방식은 비슷했는데 그 과정을 알아보기 힘든 몇개의 풀이가 있었다. 이 답변들을 살펴봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;dots&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    dots&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dots&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; dots&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dots&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; dots&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[모스부호 (1)]]></title><description><![CDATA[모스부호 (1) https://school.programmers.co.kr/learn/courses/30/lessons/120838 변수 문자열 letter 제한사항 1 ≤ letter의 길이 ≤ 1,000 return값은 소문자 letter…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/135/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/135/</guid><pubDate>Mon, 27 Mar 2023 09:59:00 GMT</pubDate><content:encoded>&lt;h3&gt;모스부호 (1)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120838&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120838&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 letter&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ letter의 길이 ≤ 1,000&lt;br&gt;
return값은 소문자&lt;br&gt;
letter의 모스부호는 공백으로 나누어져 있음&lt;br&gt;
letter에 공백은 연속으로 두 개 이상 존재하지 않음&lt;br&gt;
해독할 수 없는 편지 없음&lt;br&gt;
편지의 시작과 끝에는 공백이 없음&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;공백으로 나누어져 있으므로 배열로 쉽게 분해할 수 있다. 신호를 키, 문자를 값으로 하는 객체를 선언한 다음 letter를 분해한 배열의 모든 원소를 변환한 다음 합쳐서 반환하는 방식으로 접근했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 morse 선언하고 모스 부호 객체 할당&lt;/li&gt;
&lt;li&gt;letter.split(&apos; &apos;) 적용해서 배열로 분해&lt;/li&gt;
&lt;li&gt;메서드로 letter의 모든 요소에 대해서 e =&gt; e = mores[&lt;code class=&quot;language-text&quot;&gt;${e}&lt;/code&gt;] 콜백을 실행하는 메서드 적용&lt;/li&gt;
&lt;li&gt;letter.join(&apos;&apos;) 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;join 메서드와 split 메서드를 합쳐서 reduce 메서드로 한 번에 푸는 방법이 매우 적절해 보인다. 잊지 말고 앞으로 적용해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; morse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;token string-property property&quot;&gt;&apos;.-&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;-...&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;-.-.&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;c&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;-..&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;d&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;.&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;e&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;..-.&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;f&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string-property property&quot;&gt;&apos;--.&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;g&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;....&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;h&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;..&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;i&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;.---&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;j&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;-.-&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;k&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;.-..&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;l&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string-property property&quot;&gt;&apos;--&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;m&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;-.&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;n&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;---&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;o&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;.--.&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;p&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;--.-&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;q&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;.-.&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string-property property&quot;&gt;&apos;...&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;s&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;-&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;t&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;..-&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;u&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;...-&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;v&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;.--&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;w&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;-..-&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string-property property&quot;&gt;&apos;-.--&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;y&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;--..&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;z&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    letter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; letter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; morse&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;e&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; letter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[최빈값 구하기]]></title><description><![CDATA[최빈값 구하기 https://school.programmers.co.kr/learn/courses/30/lessons/120812 변수 정수 배열 array 제한사항 0 < array의 길이 < 100 0 ≤ array의 원소 < 100…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/134/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/134/</guid><pubDate>Sat, 25 Mar 2023 21:21:00 GMT</pubDate><content:encoded>&lt;h3&gt;최빈값 구하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120812&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120812&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 array&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; array의 길이 &amp;#x3C; 100&lt;br&gt;
0 ≤ array의 원소 &amp;#x3C; 1000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;원소의 범위가 0에서 999사이의 정수이므로 큰 계산을 요구하지 않는다. 길이 1000의 별도의 배열을 선언하고 매개변수로 넘겨받은 array에 해당하는 배열[e]의 값을 1 더하는 과정을 통해 최대로 등장한 원소의 길이를 반환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 count 선언하고 Array 생성자로 길이 1000의 배열 생성, 모두 0으로 할당&lt;/li&gt;
&lt;li&gt;변수 maxNum 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;array 모든 원소에 대해서 콜백 함수로 e =&gt; count[e]++ 실행&lt;/li&gt;
&lt;li&gt;maxNum에 array에서 가장 큰 값을 구조분해 할당으로 찾아서 할당&lt;/li&gt;
&lt;li&gt;count.indexOf(maxNum) === count.lastIndexOf(maxNum) 여부를 확인, 맞으면 count.indexOf(maxNum) 반환, 틀리면 -1 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;처음에 객체로 풀면 좋겠다는 생각을 했었는데, 아무리 생각해도 지나치게 많은 과정을 거치는 것 같아 시간을 두고 고민을 해서 풀이 과정을 줄일 수 있었다. 다른 사람들의 풀이를 보니 굉장히 다양한 방법으로 문제를 풀었다. 직관적으로 이해가 쉽지 않은 풀이도 많았는데 이해할 수 있도록 꼼꼼히 살펴봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; maxNum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    maxNum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;maxNum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lastIndexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;maxNum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;maxNum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[중앙값 구하기]]></title><description><![CDATA[중앙값 구하기 https://school.programmers.co.kr/learn/courses/30/lessons/120853 변수 정수 배열 array 제한사항 array의 길이는 홀수 0 < array의 길이 < 100 -1,00…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/133/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/133/</guid><pubDate>Fri, 24 Mar 2023 10:23:00 GMT</pubDate><content:encoded>&lt;h3&gt;중앙값 구하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120853&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120853&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 array&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;array의 길이는 홀수&lt;br&gt;
0 &amp;#x3C; array의 길이 &amp;#x3C; 100&lt;br&gt;
-1,000 &amp;#x3C; array의 원소 &amp;#x3C; 1,000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;배열을 정렬해서 가운데 원소를 바로 반환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;array.sort() 실행&lt;/li&gt;
&lt;li&gt;array[Math.trunc(array.length / 2)] 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;sort 메서드가 오름차순 정렬을 기본으로 하기에 콜백을 따로 주지 않았는데 테스트케이스를 통과하지 못했다. 어떻게 정렬되는지 다시 확인을 해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[나머지 구하기]]></title><description><![CDATA[나머지 구하기 https://school.programmers.co.kr/learn/courses/30/lessons/120810 변수 정수 num1, num2 제한사항 0 < num1 ≤ 100 0 < num2 ≤ 100 코드]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/132/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/132/</guid><pubDate>Fri, 24 Mar 2023 09:53:00 GMT</pubDate><content:encoded>&lt;h3&gt;나머지 구하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120810&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120810&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 num1, num2&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; num1 ≤ 100&lt;br&gt;
0 &amp;#x3C; num2 ≤ 100&lt;/p&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; num1 &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; num2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[컨트롤 제트]]></title><description><![CDATA[컨트롤 제트 https://school.programmers.co.kr/learn/courses/30/lessons/120853 변수 문자열 s 제한사항 1 ≤ s의 길이 ≤ 200 -1,000 < s의 원소 중 숫자 < 1,000 s는 숫자, "Z…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/131/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/131/</guid><pubDate>Thu, 23 Mar 2023 12:47:00 GMT</pubDate><content:encoded>&lt;h3&gt;컨트롤 제트&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120853&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120853&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 s&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ s의 길이 ≤ 200&lt;br&gt;
-1,000 &amp;#x3C; s의 원소 중 숫자 &amp;#x3C; 1,000&lt;br&gt;
s는 숫자, &quot;Z&quot;, 공백&lt;br&gt;
s에 있는 숫자와 &quot;Z&quot;는 서로 공백으로 구분&lt;br&gt;
연속된 공백은 주어지지 않음&lt;br&gt;
0을 제외하고는 0으로 시작하는 숫자는 없음&lt;br&gt;
s는 &quot;Z&quot;로 시작하지 않음&lt;br&gt;
s의 시작과 끝에는 공백이 없음&lt;br&gt;
&quot;Z&quot;가 연속해서 나오는 경우는 없음&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;공백으로 구분된 문자열 형태로 주어지므로 배열로 나눈 뒤 반복문을 적용하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;s를 공백 문자열로 split해서 배열로 재할당&lt;/li&gt;
&lt;li&gt;배열 s에서 &quot;Z&quot;가 아닌 모든 원소를 숫자로 변환&lt;/li&gt;
&lt;li&gt;for (i = 0; i &amp;#x3C; s.length; i++) 반복문 진입&lt;/li&gt;
&lt;li&gt;s[i] === &apos;Z&apos; 일 때 res -= s[i - 1]&lt;/li&gt;
&lt;li&gt;그 외의 경우 res += s[i]&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;코드를 작성하면서 reduce 메서드를 떠올렸는데 Z의 경우를 처리하는 게 불편하다고 생각해서 반복문으로 풀었다. 다른 사람들의 풀이를 보니 reduce를 사용한 풀이가 보이는데 보면서 어떻게 사용했는지 분석을 해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Z&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Z&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;-=&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[분수의 덧셈]]></title><description><![CDATA[분수의 덧셈 https://school.programmers.co.kr/learn/courses/30/lessons/120808 변수 첫 번째 분수의 분자와 분모를 뜻하는 numer1, denom1 두 번째 분수의 분자와 분모를 뜻하는 numer…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/130/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/130/</guid><pubDate>Wed, 22 Mar 2023 13:56:00 GMT</pubDate><content:encoded>&lt;h3&gt;분수의 덧셈&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120808&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120808&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;첫 번째 분수의 분자와 분모를 뜻하는 numer1, denom1&lt;br&gt;
두 번째 분수의 분자와 분모를 뜻하는 numer2, denom2&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C;numer1, denom1, numer2, denom2 &amp;#x3C; 1,000&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;수의 범위가 크지 않으므로 따로 분모를 일치시키는 과정을 거치지 않고 바로 첫 번째 분수에 denom2를 곱하고, 마찬가지로 두 번째 분수에도 denom1을 곱하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;getGCD = (a, b) =&gt; (b &gt; 0 ? getGCD(b, a % b) : a); 함수 선언&lt;/li&gt;
&lt;li&gt;변수 numer3 선언하고 numer1 * denom2 + numer2 * denom1 할당&lt;/li&gt;
&lt;li&gt;denom3 선언하고 denom1 * denom2 할당&lt;/li&gt;
&lt;li&gt;변수 GCD 선언하고 getGCD(numer3, denom3) 할당&lt;/li&gt;
&lt;li&gt;[numer3 / GCD, denom3/GCD] 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numer1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; denom1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; numer2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; denom2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;getGCD&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getGCD&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; numer3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; numer1 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; denom2 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; numer2 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; denom1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; denom3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; denom1 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; denom2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;GCD&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getGCD&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numer3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; denom3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;numer3 &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;GCD&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; denom3&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;GCD&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[숫자 비교하기]]></title><description><![CDATA[숫자 비교하기 https://school.programmers.co.kr/learn/courses/30/lessons/120807 변수 정수 num1, num2 제한사항 0 ≤ num1 ≤ 10,000 0 ≤ num2 ≤ 10,000 순서 num…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/129/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/129/</guid><pubDate>Wed, 22 Mar 2023 13:37:00 GMT</pubDate><content:encoded>&lt;h3&gt;숫자 비교하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120807&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120807&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 num1, num2&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 ≤ num1 ≤ 10,000&lt;br&gt;
0 ≤ num2 ≤ 10,000&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;num1, num2가 같은 값인지 확인, 맞으면 1 반환&lt;/li&gt;
&lt;li&gt;1을 만족하지 않으면 -1 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; num1 &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; num2 &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[두 수의 나눗셈]]></title><description><![CDATA[두 수의 나눗셈 https://school.programmers.co.kr/learn/courses/30/lessons/120806 변수 정수 num1, num2 제한사항 0 < num1 ≤ 100 0 < num2 ≤ 10…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/128/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/128/</guid><pubDate>Wed, 22 Mar 2023 13:33:00 GMT</pubDate><content:encoded>&lt;h3&gt;두 수의 나눗셈&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120806&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120806&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 num1, num2&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; num1 ≤ 100&lt;br&gt;
0 &amp;#x3C; num2 ≤ 100&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;반올림을 하기 전에 먼저 1000을 곱해야 한다. 순서를 고려해서 작성했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Math.floor(num1 * 1000 / num2) 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;floor 대신 trunc 메서드를 다른 사람 풀이를 보면서 알게 됐다. 소수점을 제거하는 기능으로 사용하는 메서드인 만큼, 앞으로는 floor보다는 trunc 메서드를 사용해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num1 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; num2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[몫 구하기]]></title><description><![CDATA[몫 구하기 https://school.programmers.co.kr/learn/courses/30/lessons/120805 변수 정수 num1, num2 제한사항 0 < num1 ≤ 100 0 < num2 ≤ 10…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/127/2023-03-22-practice78/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/127/2023-03-22-practice78/</guid><pubDate>Wed, 22 Mar 2023 13:27:00 GMT</pubDate><content:encoded>&lt;h3&gt;몫 구하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120805&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120805&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 num1, num2&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; num1 ≤ 100&lt;br&gt;
0 &amp;#x3C; num2 ≤ 100&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;소수점 이하의 값을 취하지 않아서 내림값을 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Math.floor(num1 / num2) 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num1 &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; num2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[두 수의 곱]]></title><description><![CDATA[두 수의 곱 https://school.programmers.co.kr/learn/courses/30/lessons/120804 변수 정수 num1, num2 제한사항 0 ≤ num1 ≤ 100 0 ≤ num2 ≤ 100 순서 num1 * num…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/126/2023-03-22-practice77/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/126/2023-03-22-practice77/</guid><pubDate>Wed, 22 Mar 2023 13:22:00 GMT</pubDate><content:encoded>&lt;h3&gt;두 수의 곱&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120804&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120804&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 num1, num2&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 ≤ num1 ≤ 100&lt;br&gt;
0 ≤ num2 ≤ 100&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;num1 * num2 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; num1 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; num2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[두 수의 차]]></title><description><![CDATA[두 수의 차 https://school.programmers.co.kr/learn/courses/30/lessons/120803 변수 정수 num1, num2 제한사항 -50,000 ≤ num1 ≤ 50,000 -50,000 ≤ num2 ≤ 5…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/125/2023-03-22-practice76/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/125/2023-03-22-practice76/</guid><pubDate>Wed, 22 Mar 2023 13:20:00 GMT</pubDate><content:encoded>&lt;h3&gt;두 수의 차&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120803&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120803&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 num1, num2&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;-50,000 ≤ num1 ≤ 50,000&lt;br&gt;
-50,000 ≤ num2 ≤ 50,000&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;num1 - num2 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; num1 &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; num2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[두 수의 합]]></title><description><![CDATA[두 수의 합 https://school.programmers.co.kr/learn/courses/30/lessons/120802 변수 -50,000 ≤ num1 ≤ 50,000 -50,000 ≤ num2 ≤ 50,000 제한사항 -50,00…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/124/2023-03-22-practice75/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/124/2023-03-22-practice75/</guid><pubDate>Wed, 22 Mar 2023 13:18:00 GMT</pubDate><content:encoded>&lt;h3&gt;두 수의 합&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120802&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120802&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;-50,000 ≤ num1 ≤ 50,000&lt;br&gt;
-50,000 ≤ num2 ≤ 50,000&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;-50,000 ≤ num1 ≤ 50,000&lt;br&gt;
-50,000 ≤ num2 ≤ 50,000&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;사칙연산 문제는 답을 바로 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;num1 + num2 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; num1 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; num2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[머쓱이보다 키 큰 사람]]></title><description><![CDATA[머쓱이보다 키 큰 사람 https://school.programmers.co.kr/learn/courses/30/lessons/120585 변수 정수 배열 array 키 height 제한사항 1 ≤ array의 길이 ≤ 100 1 ≤ height…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/123/2023-03-21-practice74/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/123/2023-03-21-practice74/</guid><pubDate>Tue, 21 Mar 2023 13:40:00 GMT</pubDate><content:encoded>&lt;h3&gt;머쓱이보다 키 큰 사람&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120585&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120585&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 array&lt;br&gt;
키 height&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ array의 길이 ≤ 100&lt;br&gt;
1 ≤ height ≤ 200&lt;br&gt;
1 ≤ array의 원소 ≤ 200&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;filter 메서드를 사용해서 배열의 길이를 바로 반환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;array에 filter 적용, height보다 큰지 확인&lt;/li&gt;
&lt;li&gt;array의 길이를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; height&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[중복된 숫자 개수]]></title><description><![CDATA[중복된 숫자 개수 https://school.programmers.co.kr/learn/courses/30/lessons/120583 변수 정수가 담긴 배열 array 정수 n 제한사항 1 ≤ array의 길이 ≤ 100 0 ≤ array…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/122/2023-03-21-practice73/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/122/2023-03-21-practice73/</guid><pubDate>Tue, 21 Mar 2023 13:31:00 GMT</pubDate><content:encoded>&lt;h3&gt;중복된 숫자 개수&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120583&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120583&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수가 담긴 배열 array&lt;br&gt;
정수 n&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ array의 길이 ≤ 100&lt;br&gt;
0 ≤ array의 원소 ≤ 1,000&lt;br&gt;
0 ≤ n ≤ 1,000&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;메서드를 사용해 범위를 좁히는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;array에 filter 적용, n과 같은지 확인&lt;/li&gt;
&lt;li&gt;array의 길이를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[짝수는 싫어요]]></title><description><![CDATA[짝수는 싫어요 https://school.programmers.co.kr/learn/courses/30/lessons/120813 변수 정수 n 제한사항 1 ≤ n ≤ 10…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/121/2023-03-20-practice72/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/121/2023-03-20-practice72/</guid><pubDate>Mon, 20 Mar 2023 14:52:00 GMT</pubDate><content:encoded>&lt;h3&gt;짝수는 싫어요&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120813&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120813&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 n&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ n ≤ 100&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;별도의 변수를 선언하지 않고 바로 배열을 생성해서 메서드만으로 정렬하는 방식을 고민해 봤는데 생성 과정을 작성할 수 없었다. 아예 메서드를 쓰지 않고 바로 조건에 맞는 배열을 생성하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 res 선언하고 빈 배열 할당&lt;/li&gt;
&lt;li&gt;for(i&amp;#x3C;=n) 조건 반복문 진입&lt;/li&gt;
&lt;li&gt;i % 2 !== 0 여부 확인, 맞으면 res.push(i)&lt;/li&gt;
&lt;li&gt;res를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 사람들의 풀이를 보고 인덱스를 활용해서 fill 메서드로 배열을 생성하는 방법을 배울 수 있었다. 언더바를 어떨 때 사용하는 건지 찾아봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[각도기]]></title><description><![CDATA[각도기 https://school.programmers.co.kr/learn/courses/30/lessons/120829 변수 각 angle 제한사항 0 < angle ≤ 180 angle은 정수 순서 switch…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/120/2023-03-18-practice71/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/120/2023-03-18-practice71/</guid><pubDate>Sat, 18 Mar 2023 14:36:00 GMT</pubDate><content:encoded>&lt;h3&gt;각도기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120829&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120829&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;각 angle&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; angle ≤ 180&lt;br&gt;
angle은 정수&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;switch 구문을 적용할 수 있을까 싶어서 적용해 봤는데, case를 엄격하게 따지는 방식이어서 사용하지 못한다는 사실을 알게 됐다. 삼항연산자를 사용해 최대한 간결하게 작성했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;angle이 180인지 확인, 맞으면 4를 반환&lt;/li&gt;
&lt;li&gt;90보다 크면 3을 반환&lt;/li&gt;
&lt;li&gt;90이면 2를 반환&lt;/li&gt;
&lt;li&gt;모두 해당하지 않으면 1을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;배열의 길이를 통해 답을 반환하는 방식의 답변이 있었다. 간결하고 응용하기 좋은 코드인듯 하다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; angle &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;180&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; angle &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; angle &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[배열 두 배 만들기]]></title><description><![CDATA[배열 두 배 만들기 https://school.programmers.co.kr/learn/courses/30/lessons/120809 변수 정수 배열 numbers 제한사항 -10,000 ≤ numbers의 원소 ≤ 10,000 1 ≤ numbers…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/119/2023-03-17-practice70/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/119/2023-03-17-practice70/</guid><pubDate>Fri, 17 Mar 2023 14:03:00 GMT</pubDate><content:encoded>&lt;h3&gt;배열 두 배 만들기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120809&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120809&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 numbers&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;-10,000 ≤ numbers의 원소 ≤ 10,000&lt;br&gt;
1 ≤ numbers의 길이 ≤ 1,000&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;메서드를 써서 바로 배열을 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;map 메서드로 e =&gt; e * 2 콜백 함수를 적용해 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 풀이법을 보다가 reduce 메서드를 사용한 풀이를 봤다. 이해가 될 때까지 봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[외계행성의 나이]]></title><description><![CDATA[외계행성의 나이 https://school.programmers.co.kr/learn/courses/30/lessons/120834 변수 나이 age 제한사항 age는 자연수 age ≤ 1,00…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/118/2023-03-16-practice69/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/118/2023-03-16-practice69/</guid><pubDate>Thu, 16 Mar 2023 14:40:00 GMT</pubDate><content:encoded>&lt;h3&gt;외계행성의 나이&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120834&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120834&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;나이 age&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;age는 자연수&lt;br&gt;
age ≤ 1,000&lt;br&gt;
알파벳 소문자만 사용&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;숫자를 문자열로 치환한 다음 바로 소문자로 치환하는 방식을 생각했는데, 별도의 변수 선언 없이 숫자를 알파벳으로 바로 바꾸는 방법은 떠올릴 수 없었다. 알파벳 소문자를 별도의 배열에 담은 뒤 age에 반복문을 통해 모든 문자를 치환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 빈 문자열과 age를 더한 값을 할당&lt;/li&gt;
&lt;li&gt;상수 spell 선언하고 [a, b, c, d, e, f, g, h, i, j] 할당&lt;/li&gt;
&lt;li&gt;for (i &amp;#x3C; 10) 반복문 진입&lt;/li&gt;
&lt;li&gt;res에 replaceAll 메서드 적용, string(i)를 spell[i]로 변환한 값을 재할당&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;숫자 ↔ 문자 변환 형태의 문제는 패턴이 정해져 있는데도 매번 애를 먹는 듯 하다. 다른 사람들 풀이를 보고 연구를 해봐야겠다. 쓸 일이 많을 것 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; spell &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;c&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;d&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;e&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;f&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;g&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;h&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;i&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;j&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; spell&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[삼각형의 완성조건 (2)]]></title><description><![CDATA[삼각형의 완성조건 (2) https://school.programmers.co.kr/learn/courses/30/lessons/120868 변수 배열 sides 제한사항 sides의 원소는 자연수 sides의 길이는 2 1 ≤ sides…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/117/2023-03-15-practice68/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/117/2023-03-15-practice68/</guid><pubDate>Wed, 15 Mar 2023 13:48:00 GMT</pubDate><content:encoded>&lt;h3&gt;삼각형의 완성조건 (2)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120868&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120868&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;배열 sides&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;sides의 원소는 자연수&lt;br&gt;
sides의 길이는 2&lt;br&gt;
1 ≤ sides의 원소 ≤ 1,000&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;배열의 원소가 둘 뿐이기 때문에 제일 큰 변을 포함하는 경우와 포함하지 않는 경우를 모두 계산해야 한다. 반복문을 사용해 두 경우를 모두 해결할 수 있는 방법을 고민했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;변수 side3 선언하고 둘 중 큰 원소에서 작은 원소를 뺀 후 1을 더한 값을 할당&lt;/li&gt;
&lt;li&gt;while (side3 &amp;#x3C; a + b) 반복문 진입&lt;/li&gt;
&lt;li&gt;res++, side3++ 실행&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 사람들의 풀이를 보니 짧고 간결한 풀이가 많다. 전부 살펴봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;sides&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; side3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sides&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; sides&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; sides&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; sides&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; sides&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; sides&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;side3 &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; sides&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; sides&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        res&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        side3&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[특이한 정렬]]></title><description><![CDATA[특이한 정렬 https://school.programmers.co.kr/learn/courses/30/lessons/120880 변수 정수가 담긴 배열 numlist 정수 n 제한사항 1 ≤ n ≤ 10,000 1 ≤ numlist의 원소 ≤ 1…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/116/2023-03-14-practice67/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/116/2023-03-14-practice67/</guid><pubDate>Tue, 14 Mar 2023 02:41:00 GMT</pubDate><content:encoded>&lt;h3&gt;특이한 정렬&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120880&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120880&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수가 담긴 배열 numlist&lt;br&gt;
정수 n&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ n ≤ 10,000&lt;br&gt;
1 ≤ numlist의 원소 ≤ 10,000&lt;br&gt;
1 ≤ numlist의 길이 ≤ 100&lt;br&gt;
numlist는 중복된 원소를 갖지 않음&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;sort 메서드를 이용해 바로 정렬하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;numlist를 sort 메서드로 정렬&lt;/li&gt;
&lt;li&gt;콜백 함수로 (a, b) =&gt; Math.abs(n - a) - Math.abs(n - b)실행&lt;/li&gt;
&lt;li&gt;정렬한 numlist를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;거리가 같다면 더 큰 수를 앞에 오도록 배치해야 한다는 조건이 있어서 내림차순 정렬 조건을 추가했다. 다른 사람들의 풀이도 대체로 비슷했다. sort를 사용하지 않는 방식으로 접근한 다른 사람들의 풀이를 살펴봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numlist&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; numlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[등수 매기기]]></title><description><![CDATA[등수 매기기 https://school.programmers.co.kr/learn/courses/30/lessons/120882 변수 2차원 정수 배열 score 제한사항 0 ≤ score[0], score[1] ≤ 100 1 ≤ score…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/115/2023-03-13-practice66/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/115/2023-03-13-practice66/</guid><pubDate>Mon, 13 Mar 2023 13:24:00 GMT</pubDate><content:encoded>&lt;h3&gt;등수 매기기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120882&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120882&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;2차원 정수 배열 score&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 ≤ score[0], score[1] ≤ 100&lt;br&gt;
1 ≤ score의 길이 ≤ 10&lt;br&gt;
score의 원소 길이는 2&lt;br&gt;
score는 중복된 원소를 갖지 않음&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;점수가 겹치는 경우를 어떻게 처리할지 고민했다. 평균 점수를 별도의 배열에 담은 뒤 내림차순으로 정렬하고, 원본 배열의 평균 점수를 lastIndexOf 메서드를 사용해서 바로 입력하는 방식을 시도했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 res 선언하고 빈 배열 할당&lt;/li&gt;
&lt;li&gt;상수 avr 선언하고 빈 배열 할당&lt;/li&gt;
&lt;li&gt;avr 배열에 score의 평균 점수를 순서대로 추가&lt;/li&gt;
&lt;li&gt;avr 배열을 오름차순으로 정렬&lt;/li&gt;
&lt;li&gt;res에 score의 평균 점수를 받아서 avr.lastIndexOf 메소드로 index 번호에 +1한 정수값을 추가&lt;/li&gt;
&lt;li&gt;res를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;같은 등수를 받으면 한 단계 내려가는 형식을 취한다고 생각했는데, 그렇지 않아서 indexOf를 사용해서 문제를 해결했다. 입출력 예시 2번을 보고 헷갈렸다. 문제를 더 꼼꼼히 읽어봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; avr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; score&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; score&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; avr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[틸더 연산자]]></title><description><![CDATA[어제 문제 풀면서 새로 알게 된 ~~ 연산자 틸더 연산자 ~를 하나만 쓰면 bit 연산자, 0과 1을 반전 빨리 알았다면 예전에 푼 2진법 문제에서 쓸 수 있었을텐데 아쉽다. 더블틸더 Math.floor()와 같은 기능.]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/114/2023-03-09JavaScript3/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/114/2023-03-09JavaScript3/</guid><pubDate>Thu, 09 Mar 2023 13:45:00 GMT</pubDate><content:encoded>&lt;p&gt;어제 문제 풀면서 새로 알게 된 ~~ 연산자&lt;/p&gt;
&lt;h3&gt;틸더 연산자&lt;/h3&gt;
&lt;p&gt;~를 하나만 쓰면 bit 연산자, 0과 1을 반전&lt;br&gt;
빨리 알았다면 예전에 푼 2진법 문제에서 쓸 수 있었을텐데 아쉽다.&lt;/p&gt;
&lt;h3&gt;더블틸더&lt;/h3&gt;
&lt;p&gt;Math.floor()와 같은 기능.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[로그인 성공?]]></title><description><![CDATA[로그인 성공? https://school.programmers.co.kr/learn/courses/30/lessons/120883 변수 아이디와 패스워드가 담긴 배열 id_pw 회원들의 정보가 담긴 2차원 배열 db…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/113/2023-03-09-practice65/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/113/2023-03-09-practice65/</guid><pubDate>Thu, 09 Mar 2023 13:34:00 GMT</pubDate><content:encoded>&lt;h3&gt;로그인 성공?&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120883&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120883&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;아이디와 패스워드가 담긴 배열 id_pw&lt;br&gt;
회원들의 정보가 담긴 2차원 배열 db&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;회원들의 아이디는 문자열&lt;br&gt;
회원들의 아이디는 알파벳 소문자와 숫자로만 이루어져 있음&lt;br&gt;
회원들의 패스워드는 숫자로 구성된 문자열&lt;br&gt;
회원들의 비밀번호는 같을 수 있지만 아이디는 같을 수 없음&lt;br&gt;
id_pw의 길이는 2&lt;br&gt;
id_pw와 db의 원소는 [아이디, 패스워드]&lt;br&gt;
1 ≤ 아이디의 길이 ≤ 15&lt;br&gt;
1 ≤ 비밀번호의 길이 ≤ 6&lt;br&gt;
1 ≤ db의 길이 ≤ 10&lt;br&gt;
db의 원소의 길이는 2&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;아이디가 db에 포함되어 있는지 검색하고, 포함된 경우에만 비밀번호가 일치하는지 확인하면 된다. id와 pw의 일치 여부를 별도의 변수에 불리언 값으로 담은 다음 마지막에 조건문으로 답을 반환하는 방식을 생각했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 corId, corPw 선언하고 false 할당&lt;/li&gt;
&lt;li&gt;for (e of db) 반복문 진입&lt;/li&gt;
&lt;li&gt;id_pw[0] === e[0] 확인, 일치하면 corId 에 true 할당&lt;/li&gt;
&lt;li&gt;3 조건문 내부에서 id_pw[1] === e[1] 확인, 일치하면 corPw에 true 할당, 3 하위에서 break로 반복문 종료&lt;/li&gt;
&lt;li&gt;corId와 corPw가 모두 true인지 확인, 맞으면 login 반환&lt;/li&gt;
&lt;li&gt;corId만 true, corPw는 false일 때 wrong pw 반환&lt;/li&gt;
&lt;li&gt;모두 false일 때 fail 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 사람들의 답을 보니 Map 객체와 구조 분해 할당을 활용한 답들을 살펴볼수 있었다. 배열에서 구조분해 할당을 사용할 수 있는지 여부를 항상 기억해야겠다. Map 객체는 공부를 해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;id_pw&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; db&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; corId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; corPw &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id_pw&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            corId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id_pw&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; corPw &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; corId &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; corPw &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;login&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;corId &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;corPw &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;wrong pw&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;fail&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[치킨 쿠폰]]></title><description><![CDATA[치킨 쿠폰 https://school.programmers.co.kr/learn/courses/30/lessons/120884 변수 시켜먹은 치킨의 수 chicken 제한사항 chicken은 정수 0 ≤ chicken ≤ 1,000,00…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/111/2023-03-08-practice64/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/111/2023-03-08-practice64/</guid><pubDate>Wed, 08 Mar 2023 14:18:00 GMT</pubDate><content:encoded>&lt;h3&gt;치킨 쿠폰&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120884&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120884&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;시켜먹은 치킨의 수 chicken&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;chicken은 정수&lt;br&gt;
0 ≤ chicken ≤ 1,000,000&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;쿠폰으로 받은 치킨에도 쿠폰을 줘서 10마리가 넘으면 추가로 치킨을 주문할 수 있는 기적의 계산을 요구한다. 재귀함수를 생각했는데, 재귀를 쓰면 쿠폰의 갯수를 넘기는 별도의 함수를 사용해야 해서 오히려 식이 복잡해진다고 생각했다. 쿠폰의 수를 저장할 별도의 변수를 선언하고, while 반복문으로 쿠폰의 수가 치킨을 추가로 주문하지 못할 때 까지 치킨의 수를 누적시키는 방식으로 접근했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;변수 coupon 선언하고 chicken 할당&lt;/li&gt;
&lt;li&gt;while (coupon &gt; 9) 반복문 진입&lt;/li&gt;
&lt;li&gt;변수 usedCoupon 선언하고 Math.floor(coupon / 10) 할당&lt;/li&gt;
&lt;li&gt;coupon에서 usedCoupon *10 을 빼기&lt;/li&gt;
&lt;li&gt;res에 usedCoupon / 10 더하기&lt;/li&gt;
&lt;li&gt;coupon에 usedCoupon / 10 더하기&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;대부분 나와 비슷한 방식으로 접근했는데 신기한 풀이가 몇 개 있었다. 이번에는 ~~ 연산자가 나왔다. 다른 사람들의 풀이를 보면 항상 모르는게 나온다. 모두 살펴봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;chicken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; coupon &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chicken&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;coupon &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; usedCoupon &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;coupon&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        coupon &lt;span class=&quot;token operator&quot;&gt;-=&lt;/span&gt; usedCoupon&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        res &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; usedCoupon &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        coupon &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; usedCoupon &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[이진수 더하기]]></title><description><![CDATA[이진수 더하기 https://school.programmers.co.kr/learn/courses/30/lessons/120885 변수 문자열 bin1, bin2 제한사항 return 값은 이진수를 의미하는 문자열 1 ≤ bin1, bin…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/110/2023-03-08-practice63/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/110/2023-03-08-practice63/</guid><pubDate>Wed, 08 Mar 2023 12:42:00 GMT</pubDate><content:encoded>&lt;h3&gt;이진수 더하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120885&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120885&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 bin1, bin2&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;return 값은 이진수를 의미하는 문자열&lt;br&gt;
1 ≤ bin1, bin2의 길이 ≤ 10&lt;br&gt;
bin1과 bin2는 0과 1로만 이루어져 있음&lt;br&gt;
bin1과 bin2는 &quot;0&quot;을 제외하고 0으로 시작하지 않음&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;진수를 변환하는 방법은 알고 있었는데, 10진수가 아닌 수의 사칙연산에 대해서는 고민해본 적이 없었다. 직접 해보니 2진수의 사칙연산도 정상적으로 작동해서, 변수를 받은 다음 변수의 합을 바로 문자열로 반환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 num1 선언하고 parsint(bin1, 2) 할당&lt;/li&gt;
&lt;li&gt;변수 num2 선언하고 num1과 같은 과정 실행&lt;/li&gt;
&lt;li&gt;(num1 + num2).toString(2)를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 사람의 경우 2진수를 계산하는 과정을 통해 답을 구해서 비슷하게 접근해야 했는지 고민했다. for 반복문으로 10진수로 변환한 다음 두 수를 합쳐 다시 2진수로 나누는 방식을 생각했는데, 실제로 작동하는지 한번 시도해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;bin1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bin2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; num1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bin1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; num2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bin2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num1 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; num2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[A로 B 만들기]]></title><description><![CDATA[A로 B 만들기 https://school.programmers.co.kr/learn/courses/30/lessons/120886 변수 문자열 before, after 제한사항 0 < before의 길이 == after의 길이 < 1,00…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/108/2023-03-06-practice62/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/108/2023-03-06-practice62/</guid><pubDate>Mon, 06 Mar 2023 04:20:00 GMT</pubDate><content:encoded>&lt;h3&gt;A로 B 만들기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120886&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120886&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 before, after&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; before의 길이 == after의 길이 &amp;#x3C; 1,000&lt;br&gt;
before와 after는 모두 소문자&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;A와 B를 변경해서 확인해도 되기 때문에, 알파벳 순서대로 정렬해서 같은지 비교만 하면 된다. 배열로 풀어서 오름차순으로 정렬한 다음 비교하는 방식으로 접근했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;before를 split 메소드로 분해해서 배열로 만들고 sort로 오름차순 정렬&lt;/li&gt;
&lt;li&gt;after도 같은 과정 수행&lt;/li&gt;
&lt;li&gt;같은지 비교, 같으면 0, 틀리면 1 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;실제로 풀어보니 sort에 별도의 콜백함수를 넣었을 때 테스트 케이스를 통과하지 못해서 콜백함수를 제외하였고, 배열 상태로 비교가 불가능하여 다시 문자열로 합쳐서 비교를 했다. 다른 사람들의 풀이도 JavaScript는 대체로 비슷했다. 메서드를 사용해서 반환하는 값이 무엇인지 항상 복습해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;before&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; after&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; before&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; after&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[k의 개수]]></title><description><![CDATA[k의 개수 https://school.programmers.co.kr/learn/courses/30/lessons/120887 변수 정수 i, j, k 제한사항 1 ≤ i < j ≤ 100,000 0 ≤ k ≤…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/107/2023-03-05-practice61/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/107/2023-03-05-practice61/</guid><pubDate>Sun, 05 Mar 2023 14:23:00 GMT</pubDate><content:encoded>&lt;h3&gt;k의 개수&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120887&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120887&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 i, j, k&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ i &amp;#x3C; j ≤ 100,000&lt;br&gt;
0 ≤ k ≤ 9&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;문자열로 변환한 다음 includes 메서드로 검색하면 쉽게 포함 여부를 확인할 수 있다. 별도의 변수를 선언해서 포함된 횟수를 반환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;for (h = i; i&amp;#x3C;=k; h++) 반복문으로 i부터 j까지 순환&lt;/li&gt;
&lt;li&gt;변수 str 선언하고 h를 문자열로 변환&lt;/li&gt;
&lt;li&gt;for (e of str) 반복문 진입, e === 문자열 k 여부를 확인하고 맞으면 res++&lt;/li&gt;
&lt;li&gt;res를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;시간복잡도에 대한 제한사항이 없어서 이중 반복문으로 풀었는데, 다른 사람들의 풀이를 보니 간단하게 풀 수 있는 다양한 풀이가 있었다. 시간을 내서 꼭 다 살펴봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; k&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;h &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; h &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; h&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;h&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;        
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[중복된 문자 제거]]></title><description><![CDATA[중복된 문자 제거 https://school.programmers.co.kr/learn/courses/30/lessons/120888 변수 문자열 my_string 제한사항 1 ≤ my_string ≤ 110 my_string…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/105/2023-03-03-practice60/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/105/2023-03-03-practice60/</guid><pubDate>Fri, 03 Mar 2023 11:25:00 GMT</pubDate><content:encoded>&lt;h3&gt;중복된 문자 제거&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120888&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120888&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 my_string&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ my_string ≤ 110&lt;br&gt;
my_string은 대문자, 소문자, 공백으로 구성&lt;br&gt;
대문자와 소문자를 구분&lt;br&gt;
공백(&quot; &quot;)도 하나의 문자로 구분&lt;br&gt;
중복된 문자 중 가장 앞에 있는 문자를 남김&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;결과를 담을 변수를 선언한 다음 my_string의 문자를 순서대로 받아서 변수에 포함되어 있는지를 확인하는 방식으로 접근했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 빈 문자열 할당&lt;/li&gt;
&lt;li&gt;for of 반복문으로 my_string 순환&lt;/li&gt;
&lt;li&gt;indexOf 메서드를 통해 문자열이 없는지 확인, -1이면 해당 문자를 res에 추가&lt;/li&gt;
&lt;li&gt;res를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 사람들 풀이를 보면서 Set 객체를 처음 알게 됐다. 학습해야 할게 계속 늘어나는 기분이다. 내일 꼭 자세히 공부해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; my_string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[삼각형의 완성조건 (1)]]></title><description><![CDATA[삼각형의 완성조건 (1) https://school.programmers.co.kr/learn/courses/30/lessons/120889 변수 배열 sides 제한사항 sides의 원소는 자연수 sides의 길이는 3 1 ≤ sides…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/104/2023-03-03-practice59/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/104/2023-03-03-practice59/</guid><pubDate>Fri, 03 Mar 2023 11:14:00 GMT</pubDate><content:encoded>&lt;h3&gt;삼각형의 완성조건 (1)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120889&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120889&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;배열 sides&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;sides의 원소는 자연수&lt;br&gt;
sides의 길이는 3&lt;br&gt;
1 ≤ sides의 원소 ≤ 1,000&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;처음부터 배열로 주어지므로 정렬을 통해 합을 비교하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sort 메서드로 sides 오름차순 정렬&lt;/li&gt;
&lt;li&gt;sides[2] &amp;#x3C; sides[0] + sides[1] 여부를 확인&lt;/li&gt;
&lt;li&gt;맞으면 1, 틀리면 2 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;sides&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    sides&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; sides&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; sides&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; sides&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[가까운 수]]></title><description><![CDATA[가까운 수 https://school.programmers.co.kr/learn/courses/30/lessons/120890 변수 정수 배열 array 정수 n 제한사항 1 ≤ array의 길이 ≤ 100 1 ≤ array의 원소 ≤ 100…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/102/2023-03-02-practice58/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/102/2023-03-02-practice58/</guid><pubDate>Thu, 02 Mar 2023 02:21:00 GMT</pubDate><content:encoded>&lt;h3&gt;가까운 수&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120890&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120890&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 array&lt;br&gt;
정수 n&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ array의 길이 ≤ 100&lt;br&gt;
1 ≤ array의 원소 ≤ 100&lt;br&gt;
1 ≤ n ≤ 100&lt;br&gt;
가장 가까운 수가 여러 개일 경우 더 작은 수를 return&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;n에 가까운 수를 절대값을 통해 구하는 방식으로 접근했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sort 메서드로 array 정렬&lt;/li&gt;
&lt;li&gt;정렬 콜백 함수로 (a, b) =&gt; Math.abs(a - n) - Math.abs(b - n)를 호출&lt;/li&gt;
&lt;li&gt;첫번째 요소를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;테스트 케이스 하나를 통과하지 못해서 위 과정을 반복문으로 진행해서 별도의 값을 받아 반환했다. 다른 사람의 풀이를 보니 콜백 함수에 a-b를 조건으로 추가했는데 내가 같은 시도를 했음에도 통과하지 못했던 방법이어서 조금 의아하다. 콜백 함수를 수정하는 도중에 실수를 한 것 같은데 이런 경우에 침착하게 처음부터 다시 작성을 하는 방식으로 문제를 풀어봐야겠다. 한번 혼란이 오니 시간을 많이 쓰게 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; num1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; num2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num1 &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; num2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num1 &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; num2 &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[369게임]]></title><description><![CDATA[369게임 https://school.programmers.co.kr/learn/courses/30/lessons/120891 변수 숫자 order 제한사항 1 ≤ order ≤ 1,000,000 순서 받아오는 변수가 number…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/100/2023-03-01-practice57/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/100/2023-03-01-practice57/</guid><pubDate>Wed, 01 Mar 2023 12:55:00 GMT</pubDate><content:encoded>&lt;h3&gt;369게임&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120891&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120891&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;숫자 order&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ order ≤ 1,000,000&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;받아오는 변수가 number 타입이다. 문자열로 변경한 뒤 반복문으로 숫자를 카운트 하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res를 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;number를 문자열로 변환&lt;/li&gt;
&lt;li&gt;for of 반복문 진입&lt;/li&gt;
&lt;li&gt;e === &apos;3&apos; || e === &apos;6&apos; || e === &apos;9&apos; 일때 res++&lt;/li&gt;
&lt;li&gt;res를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;배열로 변환해서 메서드를 사용하는 것이 오히려 번거롭지 않을까 생각했는데, 정규표현식으로 검색해서 숫자를 카운트하는 방식의 답변들이 충분히 직관적이면서 쉽게 문제를 풀었다. 다른 사람들 답안을 살펴보면서 공부를 해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    order &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; order&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; order&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;3&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;6&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;9&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[암호 해독]]></title><description><![CDATA[암호 해독 https://school.programmers.co.kr/learn/courses/30/lessons/120892 변수 문자열 cipher 정수 code 제한사항 1 ≤ cipher의 길이 ≤ 1,000 1 ≤ code ≤ cipher…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/098/2023-02-28-practice56/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/098/2023-02-28-practice56/</guid><pubDate>Tue, 28 Feb 2023 06:22:00 GMT</pubDate><content:encoded>&lt;h3&gt;암호 해독&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120892&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120892&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 cipher&lt;br&gt;
정수 code&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ cipher의 길이 ≤ 1,000&lt;br&gt;
1 ≤ code ≤ cipher의 길이&lt;br&gt;
cipher는 소문자와 공백으로만 구성&lt;br&gt;
공백도 하나의 문자로 취급&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;메서드를 쓰는 것보다 정직하게 반복문으로 접근하는 편이 알아보기 쉽고 빠르겠다는 생각이 들었다. cipher의 길이가 길지 않기 때문에, for 반복문으로 1회만 반복하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res를 선언하고 빈 문자열 할당&lt;/li&gt;
&lt;li&gt;인덱스 번호와 글자의 순서를 맞추기 위해 cipher 앞에 공백 1자리 추가&lt;/li&gt;
&lt;li&gt;i &amp;#x3C; cipher.length 조건의 for 반복문 진입&lt;/li&gt;
&lt;li&gt;i % code === 0 이면 res에 cipher[i]를 추가&lt;/li&gt;
&lt;li&gt;res를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;code를 바로 더하는 방식을 생각하지 못했다. 해당 방식으로 실행 순서를 더 줄일 수 있으니 기억해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cipher&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    cipher &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; cipher&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; cipher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; code &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; cipher&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[대문자와 소문자]]></title><description><![CDATA[대문자와 소문자 https://school.programmers.co.kr/learn/courses/30/lessons/120893 변수 문자열 my_string 제한사항 1 ≤ my_string의 길이 ≤ 1,000 my_string…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/097/2023-02-28-practice55/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/097/2023-02-28-practice55/</guid><pubDate>Tue, 28 Feb 2023 06:04:00 GMT</pubDate><content:encoded>&lt;h3&gt;대문자와 소문자&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120893&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120893&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 my_string&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ my_string의 길이 ≤ 1,000&lt;br&gt;
my_string은 영어 대문자와 소문자로만 구성&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;알파벳 문자의 변환은 메서드를 써서 쉽게 할 수 있기 때문에, 방법을 고민했다. 정규표현식으로 소문자 여부를 확인하고, 맞으면 대문자로, 그렇지 않으면 소문자로 변환하는 방식으로 접근했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 my_string.split(&apos;&apos;) 할당&lt;/li&gt;
&lt;li&gt;res에 반복문으로 match 메서드로 /[a-z]/와 일치하는지 확인&lt;/li&gt;
&lt;li&gt;맞으면 toUpperCase(), 그렇지 않으면 toLowerCase() 적용&lt;/li&gt;
&lt;li&gt;res.join(&apos;&apos;)을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;toLowerCase의 값과 문자가 일치하는지 여부를 확인하는 방식으로 변환 없이 푸는 풀이가 있었다. 실제로 활용이 가능한 방법인 만큼 기억하고 있어야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; my_string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[a-z]&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[인덱스 바꾸기]]></title><description><![CDATA[인덱스 바꾸기 https://school.programmers.co.kr/learn/courses/30/lessons/120895 변수 문자열 my_string 정수 num1, num2 제한사항 1 < my_string의 길이 < 100 0 ≤ num…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/093/2023-02-24-practice53/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/093/2023-02-24-practice53/</guid><pubDate>Fri, 24 Feb 2023 09:02:00 GMT</pubDate><content:encoded>&lt;h3&gt;인덱스 바꾸기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120895&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120895&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 my_string&lt;br&gt;
정수 num1, num2&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 &amp;#x3C; my_string의 길이 &amp;#x3C; 100&lt;br&gt;
0 ≤ num1&lt;br&gt;
num2 &amp;#x3C; my_string의 길이&lt;br&gt;
my_string은 소문자&lt;br&gt;
num1 ≠ num2&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;replace 메서드를 사용해서 특정 문자열을 교체하는 것은 가능하지만, 특정 위치의 문자열만 골라서 바꾸는 것은 확신이 없었다. 별도의 변수를 선언해 입력받은 문자열을 배열로 분해하고, my_string에서 해당 위치의 문자를 받아 바로 교체하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 my_string.split(&apos;&apos;) 할당&lt;/li&gt;
&lt;li&gt;res[num1]에 my_string[num2] 할당&lt;/li&gt;
&lt;li&gt;res[num2]에 my_string[num1] 할당&lt;/li&gt;
&lt;li&gt;res.join(&apos;&apos;)을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;글자를 바꾸는 과정에서 구조분해 할당을 통해 조금 더 간단하게 작성할 수 있었다. 알고 있는 내용이더라도 코드에 적용할 수 있게 복습을 꾸준히 해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;my_string&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; my_string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;num1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; my_string&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;num2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;num2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; my_string&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;num1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[영어가 싫어요]]></title><description><![CDATA[영어가 싫어요 https://school.programmers.co.kr/learn/courses/30/lessons/120894 변수 문자열 numbers 제한사항 numbers는 소문자 numbers는 공백없이 조합 1 ≤ numbers…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/095/2023-02-27-practice54/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/095/2023-02-27-practice54/</guid><pubDate>Fri, 24 Feb 2023 09:02:00 GMT</pubDate><content:encoded>&lt;h3&gt;영어가 싫어요&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120894&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120894&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 numbers&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;numbers는 소문자&lt;br&gt;
numbers는 공백없이 조합&lt;br&gt;
1 ≤ numbers의 길이 ≤ 50&lt;br&gt;
0은 제일 앞에 오지 않음&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;모든 알파벳 숫자를 검사하는 과정은 피할 수 없다고 생각했다. 반복문으로 1회씩 순회하는 방식으로 문자열 상에서 알파벳을 숫자로 바꾸는 방식으로 접근했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 arr 선언하고 [&quot;zero&quot;, &quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;, &quot;six&quot;, &quot;seven&quot;, &quot;eight&quot;, &quot;nine&quot;] 할당&lt;/li&gt;
&lt;li&gt;for(i=0; i &amp;#x3C; 10; i++) 반복문 진입&lt;/li&gt;
&lt;li&gt;arr[i]를 i로 치환&lt;/li&gt;
&lt;li&gt;반복문에서 나온 뒤 Number(numbers)를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;풀이들이 대체로 비슷했는데 reduce를 활용한 풀이가 있었다. 다른 풀이들을 잘 살펴봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;zero&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;three&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;four&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;five&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;six&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;seven&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;eight&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;nine&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; numbers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[한 번만 등장한 문자]]></title><description><![CDATA[한 번만 등장한 문자 https://school.programmers.co.kr/learn/courses/30/lessons/120896 변수 문자열 s 제한사항 0 < s의 길이 < 1,000 s…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/092/2023-02-23-practice52/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/092/2023-02-23-practice52/</guid><pubDate>Thu, 23 Feb 2023 08:30:00 GMT</pubDate><content:encoded>&lt;h3&gt;한 번만 등장한 문자&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120896&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120896&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 s&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; s의 길이 &amp;#x3C; 1,000&lt;br&gt;
s는 소문자로만 구성&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;반복문을 한 번만 사용해서 문제를 해결하는 방법을 고민했다. 별도의 변수를 선언해서 담는 것은 문제가 없는데, 만약 지웠다가 다시 추가를 하게 되는 경우 의도와 달라지기 때문이다. 메서드를 써서 짧게 풀 수 있을 것 같은데 어떻게 조합해야 할지 감이 잘 오지 않았다. 정규표현식을 사용해봤는데 제대로 작동하지 않았다. 같은 알파벳이 두 개 이상 있으면 무조건 항목에서 제외되므로 동일한 알파벳이 두개 이상 연속되어 포함되어 있는지를 체크한 다음 없는 것을 확인한 경우 별도의 변수에 담아 반환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 빈 문자열 할당&lt;/li&gt;
&lt;li&gt;변수 letter를 선언하고 소문자 a부터 z까지를 문자열로 할당&lt;/li&gt;
&lt;li&gt;s를 메서드를 통해 오름차순 정렬&lt;/li&gt;
&lt;li&gt;for (i &amp;#x3C; 26) 반복문 진입&lt;/li&gt;
&lt;li&gt;같은 알파벳이 1개 이상 포함되어 있는지 확인&lt;/li&gt;
&lt;li&gt;and 조건으로 같은 알파벳이 2개 이상 있는지 확인한 뒤 없으면 res에 letter(i)를 추가&lt;/li&gt;
&lt;li&gt;res를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;쉬운 문제라고 생각했는데 시간이 오래 걸릴줄 몰랐다. 다른 사람들의 풀이를 보니 역시나 쉽게 해결한 풀이가 많았다. 다른 사람들의 풀이도 분석해보고 내일은 정규표현식을 꼭 공부해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; letter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;abcdefghijklmnopqrstuvwxyz&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;letter&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;letter&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; letter&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            res &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; letter&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[약수 구하기]]></title><description><![CDATA[약수 구하기 https://school.programmers.co.kr/learn/courses/30/lessons/120897 변수 정수 n…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/090/2023-02-22-practice51/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/090/2023-02-22-practice51/</guid><pubDate>Wed, 22 Feb 2023 07:40:00 GMT</pubDate><content:encoded>&lt;h3&gt;약수 구하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120897&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120897&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 n&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;예전에 반복문의 범위와 관련된 문제를 풀면서 약수, 제곱근을 활용한 방식이 효율적이라는 것을 기억하고 있어서 적용해보려고 했다. n의 범위가 최대 10000으로 큰 계산을 요구하지 않기 때문에 일단 n/2까지로 범위를 정하고 반복문으로 배열에 담는 방식으로 진행했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 arr 선언하고 빈 배열 할당&lt;/li&gt;
&lt;li&gt;for(i= 1; i &amp;#x3C;= n/2; i++) 반복문 진입&lt;/li&gt;
&lt;li&gt;n % i === 0을 확인해서 맞으면 arr에 push로 추가&lt;/li&gt;
&lt;li&gt;arr에 n을 push로 추가&lt;/li&gt;
&lt;li&gt;arr을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 풀이법을 살펴보니 filter를 사용한 풀이법이 많았다. 많은 데이터를 처리해야 한다면 메서드 사용이 더 효율적일듯 하다. 항상 염두에 둬야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; n&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[문자열 밀기]]></title><description><![CDATA[문자열 밀기 https://school.programmers.co.kr/learn/courses/30/lessons/120921 변수 문자열 A와 B 순서 맨 마지막 글자를 옮긴 A의 변형 문자열을 모두 만들어서 배열에 담은 다음, B…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/088/2023-02-20-practice50/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/088/2023-02-20-practice50/</guid><pubDate>Mon, 20 Feb 2023 08:20:00 GMT</pubDate><content:encoded>&lt;h3&gt;문자열 밀기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120921&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120921&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 A와 B&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;맨 마지막 글자를 옮긴 A의 변형 문자열을 모두 만들어서 배열에 담은 다음, B와 비교해서 index 넘버를 반환하는 방식을 생각했는데 비효율적이라는 생각이 들어서 포기했다. 그냥 반복문을 사용해서 문자열을 비교해가며 사용하는 방식으로 접근했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A와 B가 같은지 비교하여 같으면 0 반환&lt;/li&gt;
&lt;li&gt;for(i &amp;#x3C; A.length 조건) 반복문 진입&lt;/li&gt;
&lt;li&gt;변수 letter를 선언하고 A의 마지막 글자를 할당&lt;/li&gt;
&lt;li&gt;A를 concat으로 letter와 병합하고 마지막 글자를 지운 다음 A에 재할당&lt;/li&gt;
&lt;li&gt;A와 B가 같으면 i가 0부터 시작하므로 i+1을 반환&lt;/li&gt;
&lt;li&gt;for문 안에서 조합이 되지 않으면 A와 B가 같아질 수 없으므로 -1을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;매우 쉽게 해결할 수 있는 다른 사람의 풀이가 있어서 이번에도 풀고 나서 놀랐다. 메서드를 활용하는 방법을 꾸준히 고민해 봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; letter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; letter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[2차원으로 만들기]]></title><description><![CDATA[2차원으로 만들기 https://school.programmers.co.kr/learn/courses/30/lessons/120842 변수 정수 배열 num_list 정수 n…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/087/2023-02-17-practice49/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/087/2023-02-17-practice49/</guid><pubDate>Fri, 17 Feb 2023 14:10:00 GMT</pubDate><content:encoded>&lt;h3&gt;2차원으로 만들기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120842&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120842&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 num_list&lt;br&gt;
정수 n&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;메서드를 통해 접근해보려고 했는데, 적당한 메서드도 방법도 찾지 못했다. 평범하게 반복문을 사용하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 res 선언하고 빈 배열 할당&lt;/li&gt;
&lt;li&gt;변수 arr 선언하고 빈 배열 할당&lt;/li&gt;
&lt;li&gt;while 반복문(num_list.length)&lt;/li&gt;
&lt;li&gt;num_list의 첫 번째 요소를 shift로 제거하고 arr에 push로 추가&lt;/li&gt;
&lt;li&gt;if(arr. length === n) res에 arr을 push로 추가하고 arr에 다시 빈 배열 할당&lt;/li&gt;
&lt;li&gt;res를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 사람들의 답변을 봤는데 혹시나가 역시나… splice라는 메서드를 통해서 상당히 쉽게 문제를 해결했다. 메서드랑 친해지려는 노력을 계속 해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num_list&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num_list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num_list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[하샤드 수]]></title><description><![CDATA[하샤드 수 https://school.programmers.co.kr/learn/courses/30/lessons/12947 변수 자연수 x 순서 각 자리의 숫자를 문자열로 받은 다음 다시 풀어서 합치는 방법을 사용했다. 변수 str을 선언하고 x…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/086/2023-02-15-practice48/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/086/2023-02-15-practice48/</guid><pubDate>Wed, 15 Feb 2023 10:52:00 GMT</pubDate><content:encoded>&lt;h3&gt;하샤드 수&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/12947&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/12947&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;자연수 x&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;각 자리의 숫자를 문자열로 받은 다음 다시 풀어서 합치는 방법을 사용했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 str을 선언하고 x를 문자열로 변환하여 할당&lt;/li&gt;
&lt;li&gt;변수 num을 선언하고 0을 할당&lt;/li&gt;
&lt;li&gt;for 반복문 진입(e of str)&lt;/li&gt;
&lt;li&gt;num += Number(e)&lt;/li&gt;
&lt;li&gt;x % num === 0 이면 true를 반환, 아닐 경우 false를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        num &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[연속된 수의 합]]></title><description><![CDATA[연속된 수의 합 https://school.programmers.co.kr/learn/courses/30/lessons/120923 변수 정수 num, total 순서 total을 num…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/085/2023-02-10-practice47/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/085/2023-02-10-practice47/</guid><pubDate>Fri, 10 Feb 2023 14:50:00 GMT</pubDate><content:encoded>&lt;h3&gt;연속된 수의 합&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120923&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120923&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 num, total&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;total을 num으로 나눴을 때 몫이 중앙값이거나 근처에 있었다. 몫을 변수로 받은 다음 앞, 뒤의 값을 반환할 배열에 추가하는 식으로 접근했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 res 선언하고 빈 배열 할당&lt;/li&gt;
&lt;li&gt;변수 mid를 선언하고 totla / num 의 정수 값만 할당&lt;/li&gt;
&lt;li&gt;mid를 res에 추가&lt;/li&gt;
&lt;li&gt;for(i = 1; i &amp;#x3C; num/2; i++) 반복문 진입&lt;/li&gt;
&lt;li&gt;mid - i를 res 앞에 추가, mid + i를 res 뒷쪽에 추가&lt;/li&gt;
&lt;li&gt;num % 2 === 0을 확인, 맞으면 res의 마지막 요소를 제거&lt;/li&gt;
&lt;li&gt;res를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;반복문의 조건에서 짝수의 경우 등호가 붙지 않으면 정상적으로 작동하지 않았다. 등호를 추가한 조건으로 테스트를 통과했다. 그리고 역시 다른 형태로 접근한 풀이들이 있었는데 보면서 연구해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; total&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; mid &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;total &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mid&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mid &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mid &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[다음에 올 숫자]]></title><description><![CDATA[다음에 올 숫자 https://school.programmers.co.kr/learn/courses/30/lessons/120924 변수 등차수열 혹은 등비수열 common 순서 common의 최소 길이가 3이므로, 등차/등비수열 여부를 앞의…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/084/2023-02-06-practice46/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/084/2023-02-06-practice46/</guid><pubDate>Mon, 06 Feb 2023 14:37:00 GMT</pubDate><content:encoded>&lt;h3&gt;다음에 올 숫자&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120924&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120924&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;등차수열 혹은 등비수열 common&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;common의 최소 길이가 3이므로, 등차/등비수열 여부를 앞의 3개 요소를 통해 구분할 수 있다. 등비수열의 경우를 먼저 검사해서 맞으면 등비수열, 그렇지 않으면 등차수열로 계산하도록 작성했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 count, res를 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;조건문 common[1]/common[0] === commmon[2] / common[1] 이면 count에 common[1]/common[0] 할당&lt;/li&gt;
&lt;li&gt;res에 common[common.length - 1] * count를 할당&lt;/li&gt;
&lt;li&gt;그렇지 않으면 count에 common[1] - common[0]을 할당&lt;/li&gt;
&lt;li&gt;res에 common[common.length - 1] + count를 할당&lt;/li&gt;
&lt;li&gt;res를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;common&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;common&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; common&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; common&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; common&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;common&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; common&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; common&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; common&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; common&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[피자 나눠 먹기(3)]]></title><description><![CDATA[피자 나눠 먹기(3) https://school.programmers.co.kr/learn/courses/30/lessons/120816 변수 피자 조각 수 slice 피자를 먹는 사람의 수 n…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/078/2023-01-25-practice45/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/078/2023-01-25-practice45/</guid><pubDate>Wed, 25 Jan 2023 14:58:00 GMT</pubDate><content:encoded>&lt;h3&gt;피자 나눠 먹기(3)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120816&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120816&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;피자 조각 수 slice&lt;br&gt;
피자를 먹는 사람의 수 n&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;인당 최소 한 조각 이상을 먹으면 되므로 조각의 수 * 피자의 수가 인원수보다 많기만 하면 된다. 최대한 간결하게 반환할 수 있는 방법을 고민했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res를 선언하고 1을 할당&lt;/li&gt;
&lt;li&gt;while(res * slice &amp;#x3C; n)&lt;/li&gt;
&lt;li&gt;res++&lt;/li&gt;
&lt;li&gt;res를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;숫자에 올림을 적용하는 ceil 메서드가 조금 더 간단했다. 항상 메서드 적용을 생각해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;slice&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; slice &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[피자 나눠 먹기(2)]]></title><description><![CDATA[피자 나눠 먹기(2) https://school.programmers.co.kr/learn/courses/30/lessons/120815 변수 피자를 나눠먹을 사람의 수 n 1 ≤ n ≤ 100 순서 피자를 남기지 않고 먹어야 하는 조건이다. (…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/077/2023-01-24-practice44/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/077/2023-01-24-practice44/</guid><pubDate>Tue, 24 Jan 2023 14:16:00 GMT</pubDate><content:encoded>&lt;h3&gt;피자 나눠 먹기(2)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120815&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120815&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;피자를 나눠먹을 사람의 수 n&lt;br&gt;
1 ≤ n ≤ 100&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;피자를 남기지 않고 먹어야 하는 조건이다. (1)과 마찬가지로 큰 수의 계산을 요구하지 않으므로 최대한 간단한 계산식을 고민해 봤는데 수를 올려가면서 나머지를 0으로 맞춰야 하므로 이 경우는 반복문을 써야 한다고 판단했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res를 선언하고 1 할당&lt;/li&gt;
&lt;li&gt;while 반복문 진입(res % n !== 0)&lt;/li&gt;
&lt;li&gt;res++&lt;/li&gt;
&lt;li&gt;res를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;res가 피자 판수를 반환하기 때문에 조건문에 조각수를 곱해줬다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        res&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[피자 나눠 먹기(1)]]></title><description><![CDATA[피자 나눠 먹기(1) https://school.programmers.co.kr/learn/courses/30/lessons/120814 변수 피자를 나눠먹을 사람의 수 n 1 ≤ n ≤ 100 순서 한 판에 조각은 7조각이고 사람의 최대 수는 10…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/076/2023-01-23-practice43/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/076/2023-01-23-practice43/</guid><pubDate>Mon, 23 Jan 2023 14:15:00 GMT</pubDate><content:encoded>&lt;h3&gt;피자 나눠 먹기(1)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120814&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120814&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;피자를 나눠먹을 사람의 수 n&lt;br&gt;
1 ≤ n ≤ 100&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;한 판에 조각은 7조각이고 사람의 최대 수는 100명이므로 큰 수의 계산을 요구하지 않는다. 반복문을 쓰지 않고 바로 변수를 반환할 수 있는 계산식을 고민했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;n이 7보다 작거나 같은지 확인&lt;/li&gt;
&lt;li&gt;만족하면 1을 반환&lt;/li&gt;
&lt;li&gt;그렇지 않으면 n/7의 올림값을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;if문으로 정리한 다음 ?를 활용해 한줄 코드로 작성했다. 다른 사람들의 코드를 보니 반올림 조건을 통해 7보다 작은 경우도 충족할 수 있었는데 이 부분을 놓쳤다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[편지]]></title><description><![CDATA[편지 https://school.programmers.co.kr/learn/courses/30/lessons/120898 변수 축하 문구 message 순서 JavaScript의 경우 length 메서드가 있어서 바로 값을 반환했다. message…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/075/2023-01-19-practice42/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/075/2023-01-19-practice42/</guid><pubDate>Thu, 19 Jan 2023 14:53:00 GMT</pubDate><content:encoded>&lt;h3&gt;편지&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120898&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120898&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;축하 문구 message&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;JavaScript의 경우 length 메서드가 있어서 바로 값을 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;message.length에 2를 곱한 값을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 사람들의 답을 확인해봤지만 특별히 더 간단한 풀이는 없었다. 다른 언어로 해결할 경우 반복문을 써야 할 것 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[문자열 계산하기]]></title><description><![CDATA[문자열 계산하기 https://school.programmers.co.kr/learn/courses/30/lessons/120902 변수 문자열로 된 수식 my_string 제한사항 연산자는 +, -만 존재 5 ≤ my_string의 길이 ≤ 10…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/074/2023-01-05-practice41/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/074/2023-01-05-practice41/</guid><pubDate>Thu, 05 Jan 2023 14:35:00 GMT</pubDate><content:encoded>&lt;h3&gt;문자열 계산하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120902&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120902&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열로 된 수식 my_string&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;연산자는 +, -만 존재&lt;br&gt;
5 ≤ my_string의 길이 ≤ 100&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;문자열이 공백으로 구분되어 있기 쉽게 분해할 수 있다. 배열로 분해한 뒤 반복문으로 답을 구하는 방식으로 접근했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;my_string 배열로 분해&lt;/li&gt;
&lt;li&gt;변수 res 선언하고 my_string[0]을 할당, 배열에서 삭제&lt;/li&gt;
&lt;li&gt;while 반복문 진입(my_string.length)&lt;/li&gt;
&lt;li&gt;my_string[0]이 &apos;+&apos; 이면 res에 my_string[1]을 더함&lt;/li&gt;
&lt;li&gt;my_string[0]이 &apos;-&apos; 이면 res에 my_string[1]을 더함&lt;/li&gt;
&lt;li&gt;my_string[0], my_string[1]을 배열에서 삭제&lt;/li&gt;
&lt;li&gt;res를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;eval이 답안에 제일 많았는데, 보안상 문제로 사용하지 말것을 강력하게 권고하는 코드여서 체크해뒀다. eval은 나중에 꼭 왜 쓰지 말아야 하는지 간단하게라도 정리해야겠다. eval을 제외한 문제 풀이는 대체로 비슷했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    my_string &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; my_string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_string&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;+&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_string&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_string&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        my_string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        my_string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[배열의 유사도]]></title><description><![CDATA[배열의 유사도 https://school.programmers.co.kr/learn/courses/30/lessons/120903 변수 문자열 배열 s1, s2 제한사항 1 ≤ s1, s2의 길이 ≤ 100 1 ≤ s1, s2의 원소의 길이 ≤ 1…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/071/2022-12-29-practice39/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/071/2022-12-29-practice39/</guid><pubDate>Thu, 29 Dec 2022 14:55:00 GMT</pubDate><content:encoded>&lt;h3&gt;배열의 유사도&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120903&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120903&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 배열 s1, s2&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ s1, s2의 길이 ≤ 100&lt;br&gt;
1 ≤ s1, s2의 원소의 길이 ≤ 10&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;s1과 s2가 모두 배열로 주어지므로 메서드로 간단하게 접근이 가능하다고 판단했다. 반복문을 쓰지 않고 메서드만 사용하는 방법을 고민했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;s1.filter(e =&gt; )&lt;/li&gt;
&lt;li&gt;filter의 콜백함수 s2.findIndex(ele =&gt; ele === e) &gt; 0&lt;/li&gt;
&lt;li&gt;1의 길이를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;위의 순서대로 작성을 했더니 오류가 나서 includes를 활용한 반복문으로 풀었다. 다른 사람들의 풀이를 보고 생각해보니 콜백을 findIdex 대신 includes를 썼으면 해결이 됐을 것 같다. 메서드 활용을 조금 더 고민해 봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; s2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; s1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[세균 증식]]></title><description><![CDATA[세균 증식 https://school.programmers.co.kr/learn/courses/30/lessons/120910 변수 세균의 마릿수 n 경과한 시간 t 순서 1시간마다 두 배로 증식하기 때문에 t만큼의 시간이 지나면 2^t…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/070/2022-12-15-practice38/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/070/2022-12-15-practice38/</guid><pubDate>Thu, 15 Dec 2022 11:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;세균 증식&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120910&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120910&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;세균의 마릿수 n&lt;br&gt;
경과한 시간 t&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;1시간마다 두 배로 증식하기 때문에 t만큼의 시간이 지나면 2^t을 곱하면 된다. 간단한 문제이기 때문에 코드를 최대한 줄이는 방법을 고민했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;n * (2 ** t)를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;쉽게 풀렸는데 다른 답을 확인해보니 처음보는 연산자를 통해 더 짧게 줄일 수 있었다. 연산자도 진지하게 공부를 해봐야겠다. 늘 쉬운 문제에서도 모르는 게 나온다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; t&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[7의 개수]]></title><description><![CDATA[7의 개수 https://school.programmers.co.kr/learn/courses/30/lessons/120912 변수 정수 배열 array 순서 별도의 변수를 하나 선언한 다음, 배열의 각 요소를 문자열로 받은 다음 문자열…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/069/2022-12-14-practice37/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/069/2022-12-14-practice37/</guid><pubDate>Wed, 14 Dec 2022 14:48:00 GMT</pubDate><content:encoded>&lt;h3&gt;7의 개수&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120912&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120912&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 array&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;별도의 변수를 하나 선언한 다음, 배열의 각 요소를 문자열로 받은 다음 문자열 7의 갯수를 세는 방식으로 접근했다. 메서드를 사용하는 방향으로 고민했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res를 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;forEach (e =&gt; {})&lt;/li&gt;
&lt;li&gt;콜백 함수 내부에서 변수 str을 선언하고 string(e) 할당&lt;/li&gt;
&lt;li&gt;for of 반복문으로 str에 대해서 문자열 &apos;7&apos;을 검색, 7이 맞으면 res에 +1&lt;/li&gt;
&lt;li&gt;res를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;7&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[구슬을 나누는 경우의 수]]></title><description><![CDATA[구슬을 나누는 경우의 수 https://school.programmers.co.kr/learn/courses/30/lessons/120840 변수 구슬의 개수 balls 친구들에게 나누어 줄 구슬 개수 share 순서 서로 다른 n개 중 m…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/068/2022-12-13-practice36/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/068/2022-12-13-practice36/</guid><pubDate>Tue, 13 Dec 2022 14:09:00 GMT</pubDate><content:encoded>&lt;h3&gt;구슬을 나누는 경우의 수&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120840&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120840&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;구슬의 개수 balls&lt;br&gt;
친구들에게 나누어 줄 구슬 개수 share&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;서로 다른 n개 중 m개를 뽑는 경우의 수를 구하는 공식을 문제 지문에서 힌트로 제공하고 있다. 팩토리얼을 활용한 공식이라서 보통 재귀로 접근을 하는데 별도의 외부 함수와 재귀 용법을 사용하지 않고 문제를 푸는 방법을 고민해 봤다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 arr을 선언하고 [1, 1]을 할당&lt;/li&gt;
&lt;li&gt;for 반복문 진입(i = 2; i &amp;#x3C;= balls; i++)&lt;/li&gt;
&lt;li&gt;arr에 i * arr[i - 1] 을 추가&lt;/li&gt;
&lt;li&gt;arr[balls] / (arr[balls - shares] * arr[shares])를 결과값으로 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;문제에서 balls와 shares의 범위를 1에서 30까지로 정해놓았다. 이 부분을 고려해서 반복문의 범위를 30까지로 수정했다. 추가로 몇 개의 테스트를 통과하지 못해서 직접 console.log를 넣고 개발자 도구에서 테스트해보니 23부터 과학적 표기법으로 숫자가 커지는 것을 확인했다. BigInt를 넣어서 문제를 해결했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;balls&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; share&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;BigInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BigInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;BigInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BigInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;balls&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;balls &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; share&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;share&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[숫자 찾기]]></title><description><![CDATA[숫자 찾기 https://school.programmers.co.kr/learn/courses/30/lessons/120904 변수 정수 num, k 제한사항 0 < num < 1,000,000 0 ≤ k < 1…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/067/2022-12-08-practice35/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/067/2022-12-08-practice35/</guid><pubDate>Thu, 08 Dec 2022 14:35:00 GMT</pubDate><content:encoded>&lt;h3&gt;숫자 찾기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120904&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120904&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 num, k&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; num &amp;#x3C; 1,000,000&lt;br&gt;
0 ≤ k &amp;#x3C; 10&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;문자열로 변경해서 검색하면 메서드를 통해 쉽게 검색이 가능하다. indexOf 메서드를 사용했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;num으로 string을 생성한 뒤 indexOf(&apos;&apos; + k)을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;테스트해보니 index 숫자가 0부터 시작해서 자릿수와 차이가 났다. 변수로 받은 다음 조건문으로 1을 더해서 반환하도록 수정했다. 다른 사람의 풀이를 보니 맨 앞에 문자를 하나 추가해서 자릿수를 맞추는 방법을 썼는데 실제 코드를 작성할 때 활용할 수 있는 방법인것 같으니 기억해 둬야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; k&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; k&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[가장 큰 수 찾기]]></title><description><![CDATA[가장 큰 수 찾기 https://school.programmers.co.kr/learn/courses/30/lessons/120899 변수 정수 배열 array 순서 가장 큰 수와 index를 같이 반환해야 하기 때문에, i를 사용한 for…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/066/2022-12-07-practice34/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/066/2022-12-07-practice34/</guid><pubDate>Wed, 07 Dec 2022 13:05:00 GMT</pubDate><content:encoded>&lt;h3&gt;가장 큰 수 찾기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120899&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120899&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 array&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;가장 큰 수와 index를 같이 반환해야 하기 때문에, i를 사용한 for 반복문으로 접근했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;결과를 담을 상수 res를 선언하고 빈 배열을 할당&lt;/li&gt;
&lt;li&gt;for 반복문(i = 0; i &amp;#x3C; array.length; i++)&lt;/li&gt;
&lt;li&gt;조건문으로 i가 0일 때, res에 array[i]와 i를 추가&lt;/li&gt;
&lt;li&gt;그 외의 경우 추가 조건문으로 array[i]가 res[0]보다 큰 경우, res[0]에 array[i]를 할당, res[1]에 i를 할당&lt;/li&gt;
&lt;li&gt;res를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 사람들의 코드를 보니 indexOf를 사용해 코드를 줄일 수 있었다. 메서드 사용은 항상 염두에 두고 있어야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[n의 배수 고르기]]></title><description><![CDATA[n의 배수 고르기 https://school.programmers.co.kr/learn/courses/30/lessons/120905 변수 정수 n 정수 배열 numlist 제한사항 1 ≤ n ≤ 10,000 1 ≤ numlist의 크기 ≤ 100…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/065/2022-12-05-practice33/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/065/2022-12-05-practice33/</guid><pubDate>Mon, 05 Dec 2022 13:05:00 GMT</pubDate><content:encoded>&lt;h3&gt;n의 배수 고르기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120905&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120905&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 n&lt;br&gt;
정수 배열 numlist&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ n ≤ 10,000&lt;br&gt;
1 ≤ numlist의 크기 ≤ 100&lt;br&gt;
1 ≤ numlist의 원소 ≤ 100,000&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;filter 메서드를 사용해서 바로 정렬이 가능하다고 생각했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;numlist.filter(e =&gt; e % n === 0)을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; numlist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; numlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[자릿수 더하기]]></title><description><![CDATA[자릿수 더하기 https://school.programmers.co.kr/learn/courses/30/lessons/120906 변수 정수 n 제한사항 0 ≤ n ≤ 1,000,00…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/064/2022-12-02-practice32/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/064/2022-12-02-practice32/</guid><pubDate>Fri, 02 Dec 2022 06:10:00 GMT</pubDate><content:encoded>&lt;h3&gt;자릿수 더하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120906&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120906&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 n&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 ≤ n ≤ 1,000,000&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;배열로 풀어내서 메서드를 적용할 경우 복잡하지 않게 풀이가 가능하다고 판단했다. 메서드를 써서 접근했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;n을 문자열로 변환&lt;/li&gt;
&lt;li&gt;split 메서드로 배열로 분해&lt;/li&gt;
&lt;li&gt;map 메서드로 정수로 변환&lt;/li&gt;
&lt;li&gt;reduce함수로 합쳐서 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 풀이를 보니 map 과정을 생략하고 reduce 함수에서 바로 number로 형변환을 해서 적용했다. 초기값 0을 줘서 cur에만 number를 적용해도 문제가 없었다. reduce 함수 사용법을 더 살펴봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cur&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; acc &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; cur&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[문자열 나누기]]></title><description><![CDATA[문자열 나누기 https://school.programmers.co.kr/learn/courses/30/lessons/140108 변수 문자열 s…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/063/2022-12-01-practice31/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/063/2022-12-01-practice31/</guid><pubDate>Thu, 01 Dec 2022 14:55:00 GMT</pubDate><content:encoded>&lt;h3&gt;문자열 나누기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/140108&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/140108&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 s&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;같은 글자가 나오는 횟수를 카운트 해야 하는데, 한번 카운트가 끝나면 남은 문자열을 가지고 같은 과정을 반복해야 해서 이중 반복문을 써야 했다. 이중 반복문을 쓰더라도 한번 큰 반복 구간이 나온다면 나머지 문자열에서 글자수가 크게 줄어들기 때문에 문제가 없다고 생각하고 처음 생각한대로 정리했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;결과를 담을 상수 result를 선언하고 빈 배열 할당&lt;/li&gt;
&lt;li&gt;while 반복문 진입(s.length &gt; 0)&lt;/li&gt;
&lt;li&gt;변수 x를 선언하고 s[0] 할당&lt;/li&gt;
&lt;li&gt;변수 sameCount를 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;변수 diffCount를 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;변수 seperator를 선언하고 빈 문자열 할당&lt;/li&gt;
&lt;li&gt;for 반복문 진입(i = 0; i &amp;#x3C; s.length; i++)&lt;/li&gt;
&lt;li&gt;조건문 x === s[i] 일 때 sameCount++, 아니면 diffCount++&lt;/li&gt;
&lt;li&gt;조건문 sameCount === diffCount 일 때 seperator에 s.slice(0, i) 할당&lt;/li&gt;
&lt;li&gt;같은 조건문 내부에서 result.push(seperator)&lt;/li&gt;
&lt;li&gt;s = s.slice(i); 이후 break&lt;/li&gt;
&lt;li&gt;while 구문을 빠져 나온 후 result.length 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;문제에서 제시한 &apos;두 횟수가 다른 상태에서 더 이상 읽을 글자가 없다면, 역시 지금까지 읽은 문자열을 분리하고 종료합니다&apos;에 해당하는 탈출조건이 없는데 코드가 통과가 됐다. 해당 코드를 추가해서 다시 테스트해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; sC &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; dC &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; sep &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        sC&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
        dC&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sC &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; dC &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sC &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; dC&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        sep &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sep&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[명예의 전당]]></title><description><![CDATA[명예의 전당 https://school.programmers.co.kr/learn/courses/30/lessons/138477 변수 명예의 전당 목록의 점수의 개수 k 1일부터 마지막 날까지 출연한 가수들의 점수 score…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/060/2022-11-28-practice28/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/060/2022-11-28-practice28/</guid><pubDate>Mon, 28 Nov 2022 04:55:00 GMT</pubDate><content:encoded>&lt;h3&gt;명예의 전당&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/138477&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/138477&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;명예의 전당 목록의 점수의 개수 k&lt;br&gt;
1일부터 마지막 날까지 출연한 가수들의 점수 score&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;명예의 전당 목록에서 제일 낮은 점수를 배열로 저장하여 반환해야 한다. 명예의 전당을 저장할 별도의 변수를 선언한 뒤 새로운 가수의 점수를 비교하고, honor 배열의 제일 낮은 점수를 최종 답안에 추가하는 방식으로 접근했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;명예의 전당 배열을 담을 상수 honor를 선언하고 빈 배열 할당&lt;/li&gt;
&lt;li&gt;결과를 담을 상수 result를 선언하고 빈 배열 할당&lt;/li&gt;
&lt;li&gt;score의 배열 길이가 0보다 클 경우만 작동하는 while 반복문 진입&lt;/li&gt;
&lt;li&gt;변수 day를 선언하고 score.shift()를 할당&lt;/li&gt;
&lt;li&gt;honor.length &amp;#x3C; k 인 경우 honor에 추가(push)하고 오름차순 정렬&lt;/li&gt;
&lt;li&gt;else 구문으로 (honor.length &gt;= k인 경우) 조건문으로 day가 최저점수인 honor[0]보다 큰지 비교(같거나 작으면 honor를 바꿀 필요가 없음)&lt;/li&gt;
&lt;li&gt;honor 배열의 첫 번째 요소를 제거&lt;/li&gt;
&lt;li&gt;honor 배열에 day를 추가&lt;/li&gt;
&lt;li&gt;honor 배열을 오름차순으로 정렬&lt;/li&gt;
&lt;li&gt;조건문을 나와서 result에 honor[0]을 추가&lt;/li&gt;
&lt;li&gt;while 구문 밖에서 result를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;완전히 중복되는 코드를 보고 겹치는 부분을 합쳐보려고 했는데 잘 안됐다. 고민해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;k&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; score&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; honor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;score&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; day &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; score&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;honor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; k&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            honor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;day&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            honor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;day &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; honor&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                honor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                honor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;day&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                honor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        
        result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;honor&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[옹알이]]></title><description><![CDATA[옹알이 https://school.programmers.co.kr/learn/courses/30/lessons/120956 변수 문자열 배열 babbling 발음 가능한 문자열 "aya", "ye", "woo", "ma…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/061/2022-11-29-practice29/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/061/2022-11-29-practice29/</guid><pubDate>Mon, 28 Nov 2022 04:55:00 GMT</pubDate><content:encoded>&lt;h3&gt;옹알이&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120956&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120956&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 배열 babbling&lt;br&gt;
발음 가능한 문자열 &quot;aya&quot;, &quot;ye&quot;, &quot;woo&quot;, &quot;ma&quot;&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;발음 가능한 문자열은 문장 안에서 한 번만 등장하기 때문에, 발음 가능한 문자열을 빈 문자열로 대체하고 나서 babbling[i]가 빈문자열이 되면 count를 추가하는 방식으로 접근했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;발음 가능한 단어 갯수를 저장할 변수 count를 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;for of 반복문 진입&lt;/li&gt;
&lt;li&gt;replace 메서드를 통해 aya를 빈 문자열로 치환&lt;/li&gt;
&lt;li&gt;같은 방식으로 나머지 세 문자열도 빈 문자열로 치환&lt;/li&gt;
&lt;li&gt;조건문으로 e가 빈 문자열인지 확인, 빈 문자열이면 count에 1을 더함&lt;/li&gt;
&lt;li&gt;count를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;첫 번째 테스트케이스부터 결과가 일치하지 않았다. wyeoo의 경우, we를 빈 문자열로 치환한 다음 woo만 남으니 woo도 발음이 가능한 단어로 인식되서 결과가 추가되는 것을 확인했다. 발음 가능한 문자열을 &apos;1&apos;로 치환하고, 치환 결과가 &apos;1&apos;, &apos;11&apos;, &apos;111&apos;, &apos;1111&apos;인 경우에만 카운트가 올라가도록 했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;babbling&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; babbling&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        e &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;aya&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        e &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;ye&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        e &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;woo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        e &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;ma&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;1&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;11&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;111&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;1111&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; count&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[문자열안에 문자열]]></title><description><![CDATA[문자열안에 문자열 https://school.programmers.co.kr/learn/courses/30/lessons/120908 변수 문자열 str1, str2 제한사항 1 ≤ str1의 길이 ≤ 100 1 ≤ str2의 길이 ≤ 10…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/062/2022-11-30-practice30/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/062/2022-11-30-practice30/</guid><pubDate>Mon, 28 Nov 2022 04:55:00 GMT</pubDate><content:encoded>&lt;h3&gt;문자열안에 문자열&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120908&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120908&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 str1, str2&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ str1의 길이 ≤ 100&lt;br&gt;
1 ≤ str2의 길이 ≤ 100&lt;br&gt;
알파벳, 대문자, 소문자 구성&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;includes 메서드를 통해서 쉽게 확인할 수 있다. 결과를 바로 반환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;str1.includes(str2)로 str2이 포함되어 있는지 확인&lt;/li&gt;
&lt;li&gt;true면 1, false면 2 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;str1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; str2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; str1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[입국심사]]></title><description><![CDATA[입국심사 https://school.programmers.co.kr/learn/courses/30/lessons/43238 변수 입국 심사를 기다리는 사람의 수 n 각 심사관이 한 명을 심사하는데 걸리는 시간이 담긴 배열 times…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/059/2022-11-25-practice27/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/059/2022-11-25-practice27/</guid><pubDate>Fri, 25 Nov 2022 14:20:00 GMT</pubDate><content:encoded>&lt;h3&gt;입국심사&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/43238&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/43238&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;입국 심사를 기다리는 사람의 수 n&lt;br&gt;
각 심사관이 한 명을 심사하는데 걸리는 시간이 담긴 배열 times&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;심사관마다 심사하는 시간이 다르므로, 최대로 걸리는 시간은 &apos;시간이 가장 오래 걸리는 심사관&apos;이 &apos;모든 승객을 심사하는 경우&apos;에 걸리는 시간이다. 이 값을 넘어가진 않으므로, 범위 안에서 심사 횟수가 승객 수에 가장 근접하면서 동시에 가장 시간이 적게 걸리는 경우를 찾아서 반환한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;times 배열을 sort 메소드를 통해 오름차순으로 정렬&lt;/li&gt;
&lt;li&gt;결과를 담을 변수 result를 선언하고 0을 할당&lt;/li&gt;
&lt;li&gt;탐색 범위를 정할 변수 left, right를 선언하고 left에 0, right에 times의 마지막 요소의 값에 n을 곱한 값을 할당&lt;/li&gt;
&lt;li&gt;left와 right의 값이 같아질때까지 반복문을 실행&lt;/li&gt;
&lt;li&gt;중간값을 담을 변수 mid를 선언하고 left와 right의 평균값을 저장, 사람을 소수점으로 나눌 수 없으므로 정수만 취함&lt;/li&gt;
&lt;li&gt;심사관의 최대 심사횟수를 담을 변수 max를 선언하고 0을 할당&lt;/li&gt;
&lt;li&gt;심사관 별 평균 심사 인원을 계산하기 위해 times 배열에 대해서 내부 반복문 선언&lt;/li&gt;
&lt;li&gt;count에 심사관별 심사 인원을 더함(중간값을 심사관이 심사하는데 걸리는 시간으로 나눈 몫의 정수)&lt;/li&gt;
&lt;li&gt;max가 n보다 크거나 같을 경우 심사를 종료할 수 있으므로 result에 mid를 할당, right에 mid - 1을 할당하여 탐색 범위를 줄인다&lt;/li&gt;
&lt;li&gt;9의 조건을 만족하지 못할 경우 left에 mid + 1을 할당&lt;/li&gt;
&lt;li&gt;result를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;7~8 과정을 for 반복문 대신 forEach 메서드를 사용해서 줄였다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; times&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    times&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; left &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; right &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; times&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;times&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;left &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; mid &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;left &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; max &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        times&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; max &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; max &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mid &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;max &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mid&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            right &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mid &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            left &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mid &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[OX퀴즈]]></title><description><![CDATA[OX퀴즈 https://school.programmers.co.kr/learn/courses/30/lessons/120907 변수 문자열로 구성된 수식이 요소로 포함된 배열 quiz…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/058/2022-11-24-practice26/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/058/2022-11-24-practice26/</guid><pubDate>Thu, 24 Nov 2022 14:20:00 GMT</pubDate><content:encoded>&lt;h3&gt;OX퀴즈&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120907&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120907&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열로 구성된 수식이 요소로 포함된 배열 quiz&lt;br&gt;
연산자는 +와 - 중 하나&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;수식이 모두 문자열로 구성되어 있다. 문자열과 관련된 메서드를 활용할 수 있도록 정리했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 result를 선언하고 빈 배열 할당하기&lt;/li&gt;
&lt;li&gt;i를 사용해서 반복문&lt;/li&gt;
&lt;li&gt;수식을 담을 상수 yfx를 선언하고 split메서드를 사용해서 공백으로 나누어 저장하기&lt;/li&gt;
&lt;li&gt;조건문을 활용해서 +와 -의 경우를 나눈다.&lt;/li&gt;
&lt;li&gt;내부에 추가 조건문으로 숫자로 바꾼 yfx[0] + yfx[2]를 yfx[4]와 비교&lt;/li&gt;
&lt;li&gt;true일 경우 문자열 &quot;O&quot;를 result 배열에 추가, 아닐 경우 &quot;X&quot;를 추가&lt;/li&gt;
&lt;li&gt;5, 6과 같은 방식으로 yfx[0] - yfx[2]를 비교하여 result에 결과 추가&lt;/li&gt;
&lt;li&gt;result를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;quiz&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; quiz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; yfx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; quiz&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;yfx&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;yfx&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;yfx&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;yfx&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;O&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;X&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// - 수식의 경우&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;yfx&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;yfx&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;yfx&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;O&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;X&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[음양 더하기]]></title><description><![CDATA[음양 더하기 https://school.programmers.co.kr/learn/courses/30/lessons/76501 변수 정수 배열 absolutes 불리언 배열 signs 순서 absolutes와 signs…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/057/2022-11-23-practice25/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/057/2022-11-23-practice25/</guid><pubDate>Wed, 23 Nov 2022 14:20:00 GMT</pubDate><content:encoded>&lt;h3&gt;음양 더하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/76501&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/76501&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 absolutes&lt;br&gt;
불리언 배열 signs&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;absolutes와 signs의 같은 순번 배열을 조합해서 쓸 수 있으므로 i를 사용한 반복문으로 접근했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 result를 선언하고 0을 할당&lt;/li&gt;
&lt;li&gt;i 조건의 for 반복문 진입&lt;/li&gt;
&lt;li&gt;if문으로 signs[i]가 true인지 확인, result에 absolutes[i]를 더한다&lt;/li&gt;
&lt;li&gt;아닐 경우 result에서 absolutes[i]를 뺀다&lt;/li&gt;
&lt;li&gt;반복문을 나와서 result를 반환한다&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;absolutes&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; signs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; signs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;signs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; absolutes&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; absolutes&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[삼총사]]></title><description><![CDATA[삼총사 https://school.programmers.co.kr/learn/courses/30/lessons/131705 변수 학생들의 번호를 담은 배열 number 순서 학생들의 번호를 세개씩 뽑아서 더했을 때…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/056/2022-11-22-practice24/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/056/2022-11-22-practice24/</guid><pubDate>Tue, 22 Nov 2022 13:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;삼총사&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/131705&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/131705&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;학생들의 번호를 담은 배열 number&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;학생들의 번호를 세개씩 뽑아서 더했을 때 0이 되는 조합을 찾는 문제다. 범위를 줄여가면서 3번씩만 계산하면 되기 때문에 이 문제는 반복문으로 접근했다. 재귀 함수를 쓰는 경우를 공부해봐야겠다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 result를 선언하고 0을 할당&lt;/li&gt;
&lt;li&gt;index를 사용한 반복문을 선언(i = 0 부터 시작)&lt;/li&gt;
&lt;li&gt;내부 반복문 선언(j = i + 1부터 시작)&lt;/li&gt;
&lt;li&gt;세번째 반복문 선언(k = j + 1 부터 시작)&lt;/li&gt;
&lt;li&gt;number[i] + number[j] + number[k] === 0 일때 result에 1을 더한다&lt;/li&gt;
&lt;li&gt;result를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; number&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; number&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;k &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; k &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; number&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; k&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; number&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; number&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    result&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[잘라서 배열로 저장하기]]></title><description><![CDATA[잘라서 배열로 저장하기 https://school.programmers.co.kr/learn/courses/30/lessons/120913 변수 문자열 my_str 1보다 크거나 같고 my_str의 길이보다 작은 정수 n 순서 주어진 문자열 my…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/055/2022-11-21-practice23/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/055/2022-11-21-practice23/</guid><pubDate>Mon, 21 Nov 2022 12:20:00 GMT</pubDate><content:encoded>&lt;h3&gt;잘라서 배열로 저장하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120913&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120913&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 my_str&lt;br&gt;
1보다 크거나 같고 my_str의 길이보다 작은 정수 n&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;주어진 문자열 my_str의 길이가 n보다 클 때 지속적으로 반복되는 while 반복문으로 접근.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;n의 길이만큼 문자열을 잘라서 저장할 상수 answer를 선언하고 빈 배열 할당&lt;/li&gt;
&lt;li&gt;while 반복문(my_str의 길이가 n보다 크거나 같을 때 까지 반복)&lt;/li&gt;
&lt;li&gt;문자열 my_str의 앞 글자를 n만큼 잘라낸다(substring 메서드)&lt;/li&gt;
&lt;li&gt;배열 answer에 잘라낸 글자를 요소로 추가한다(push 메서드)&lt;/li&gt;
&lt;li&gt;n보다 작은 길이의 문자열이 my_str에 남아있는지 조건문으로 확인한다(my_str.length &gt; 0 &amp;#x26;&amp;#x26; my_str.length &amp;#x3C; n)&lt;/li&gt;
&lt;li&gt;남아 있다면 마지막으로 answer에 추가한다.&lt;/li&gt;
&lt;li&gt;answer를 반환한다&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;실제로 코드를 작성해보니 substring이 원본 문자열을 변화시키지 않아서 slice를 추가로 사용해야 했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;my_str&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; answer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; my_str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    my_str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; my_str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  
    answer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; my_str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    answer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; answer&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[제곱수 판별하기]]></title><description><![CDATA[제곱수 판별하기 https://school.programmers.co.kr/learn/courses/30/lessons/133502 변수 정수 n 제한사항 1 ≤ n ≤ 1,000,00…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/054/2022-11-20-practice22/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/054/2022-11-20-practice22/</guid><pubDate>Sun, 20 Nov 2022 12:20:00 GMT</pubDate><content:encoded>&lt;h3&gt;제곱수 판별하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/133502&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/133502&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 n&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ n ≤ 1,000,000&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;메서드를 통해 제곱근을 구할 수 있어서 계산 과정이 필요 없다. 제곱근이 소숫점 이하의 값을 가지면 정수 제곱근을 가지고 있지 않으므로 이걸 비교해서 답을 반환하는 방식으로 접근했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 sq 선언하고 Math.sqrt(n) 할당&lt;/li&gt;
&lt;li&gt;sq === Math.floor(sq) 비교, 맞으면 1, 아니면 2 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 사람의 풀이를 살펴보니 isInteger 메서드를 사용한 풀이도 있었고 1로 나눠서 나머지를 확인하는 방식도 있었다. 다른 풀이에 적용 가능한 방법이니 기억하고 있어야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; sq &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; sq &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sq&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[기사단원의 무기]]></title><description><![CDATA[기사단원의 무기 https://school.programmers.co.kr/learn/courses/30/lessons/136798 변수 기사 인원 수 number 협약에 정한 무기의 공격력 제한 limit limit…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/053/2022-11-19-practice21/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/053/2022-11-19-practice21/</guid><pubDate>Sat, 19 Nov 2022 12:20:00 GMT</pubDate><content:encoded>&lt;h3&gt;기사단원의 무기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/136798&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/136798&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;기사 인원 수 number&lt;br&gt;
협약에 정한 무기의 공격력 제한 limit&lt;br&gt;
limit에 걸렸을 때 살 수 있는 무기의 공격력 power&lt;br&gt;
무기점 주인이 무기를 만들 때 필요한 철의 무게가 무기의 공격력과 같음&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;number가 정수로 주어지면 number보다 작은 모든 수에 대해서 약수를 구해야 한다. 약수를 저장할 배열을 추가로 선언해서 따로 철의 무게를 구하는게 편해 보인다. 약수를 구하는 과정에서 시간 복잡도를 줄이는 방법을 쓰지 않으면 오류가 나서 조건을 추가했다. 제곱근을 사용하는 방식을 더 공부해야겠다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;무기점 주인이 최종적으로 사용할 철의 무게를 담을 weight 변수 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;무기의 공격력을 저장할 weapon 변수를 선언하고 빈 배열 할당&lt;/li&gt;
&lt;li&gt;반복문을 선언하고 반복문 내부에 약수를 저장할 변수 atk를 선언한다(공격력)&lt;/li&gt;
&lt;li&gt;약수를 구하는 반복문을 선언한다. 반복문 내부의 반복문 구조이므로 시간 복잡도를 낮추기 위해 조건을 i/2로 돌린다&lt;/li&gt;
&lt;li&gt;내부 반복문은 나머지가 0이면 atk에 1을 더하는 것&lt;/li&gt;
&lt;li&gt;구한 atk를 weapon 배열에 추가. 이때 1을 더해줘야 하는데 약수에는 자기 자신이 포함되기 때문&lt;/li&gt;
&lt;li&gt;waepon 배열에 담긴 공격력을 모두 합쳐서 weight에 대입. 조건문을 추가해서 limit보다 크면 power를 더한다.&lt;/li&gt;
&lt;li&gt;weight를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;number&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; limit&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; power&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; weight &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; weapon &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; number&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; atk &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; atk&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    weapon&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;atk&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; weapon&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    weapon&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; limit &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; weight &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; power &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; weight &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; weapon&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; weight&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[종이 자르기]]></title><description><![CDATA[종이 자르기 https://school.programmers.co.kr/learn/courses/30/lessons/120922 변수 정수 M, N 제한사항 0 < M, N < 100 종이를 겹쳐서 자를 수 없음 순서 M과 N이 모두…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/050/2022-11-15-practice18/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/050/2022-11-15-practice18/</guid><pubDate>Fri, 18 Nov 2022 07:25:00 GMT</pubDate><content:encoded>&lt;h3&gt;종이 자르기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120922&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120922&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 M, N&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; M, N &amp;#x3C; 100&lt;br&gt;
종이를 겹쳐서 자를 수 없음&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;M과 N이 모두 2 이상일 때 최소 1회 이상 가위질을 해야 한다. 겹쳐서 양쪽의 종이를 자를 수 없으므로 정직하게 M * N - 1회 가위질을 필요로 한다. 가위질을 할 필요가 없는 경우를 고민했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;M이 1일 경우 res에 N - 1 할당&lt;/li&gt;
&lt;li&gt;N이 1일 경우 res에 M - 1 할당&lt;/li&gt;
&lt;li&gt;M과 N이 모두 1보다 클 경우 res에 M * N - 1 할당&lt;/li&gt;
&lt;li&gt;res를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;단순한 문제였는데 가위질에 필요한 횟수가 (M - 1) * (N - 1)회 필요하다고 생각해서 시간을 오래 썼다. 손으로 직접 그려 보면서 겨우 필요한 횟수가 M * N -1회라는 것을 알 수 있었는데 심지어 다른 사람 풀이를 보니 그냥 M * N - 1만 반환해도 문제가 없었다. 생각해보니 제한사항에 M과 N이 모두 최소 1 이상이어서 조건 그대로 반환해도 최소 0이 나와서 문제가 없다는 것을 깨달았다. 풀면서 문제의 핵심을 놓치는 경우가 생기는 것 같은데 제한사항을 자주 확인하면서 풀어봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[숫자 문자열과 영단어]]></title><description><![CDATA[숫자 문자열과 영단어 https://school.programmers.co.kr/learn/courses/30/lessons/81301 변수 숫자 또는 영문자로 구성된 문자열 s 반환할 결과값은 숫자여야 함(Number type…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/052/2022-11-17-practice20/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/052/2022-11-17-practice20/</guid><pubDate>Thu, 17 Nov 2022 14:30:00 GMT</pubDate><content:encoded>&lt;h3&gt;숫자 문자열과 영단어&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/81301&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/81301&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;숫자 또는 영문자로 구성된 문자열 s&lt;br&gt;
반환할 결과값은 숫자여야 함(Number type)&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;반복문 내부에서 replace 메서드를 실행해서 간단하게 치환할 수 있다고 생각했다. 그런데 replace 메서드를 검색해보니 무조건 처음에 한 번 검색되는 문자열만 치환된다는 것을 확인했다. 결국 정규표현식을 쓸 수 밖에 없었다. 정규표현식 정리를 계속 미뤘는데 조만간 공부를 해봐야겠다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;단어를 대조할 대조군을 담을 상수 words를 선언하고 배열 [&quot;zero&quot;, ... &quot;nine&quot;]을 할당&lt;/li&gt;
&lt;li&gt;index를 사용한 반복문을 선언&lt;/li&gt;
&lt;li&gt;변수 regex를 선언하고 words에 저장한 각 단어를 검색 대상으로 지정할 정규표현식 words[i], &apos;g&apos; 를 할당&lt;/li&gt;
&lt;li&gt;s에 replace 메서드를 사용하여 regex로 검색한 단어를 i.toString()로 변환하고 s에 재할당&lt;/li&gt;
&lt;li&gt;s를 number type으로 치환하여 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; words &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;zero&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;three&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;four&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;five&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;six&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;seven&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;eight&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;nine&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; regex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;words&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;g&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[문자열 정렬하기 (2)]]></title><description><![CDATA[문자열 정렬하기 (2) https://school.programmers.co.kr/learn/courses/30/lessons/120911 변수 문자열 my_string 제한사항 0 < my_string 길이 < 10…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/051/2022-11-16-practice19/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/051/2022-11-16-practice19/</guid><pubDate>Wed, 16 Nov 2022 07:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;문자열 정렬하기 (2)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120911&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120911&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 my_string&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; my_string 길이 &amp;#x3C; 100&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;문자열 자체로는 정렬이 안되기 때문에 결국 배열로 분해해서 접근해야 했다. 메서드를 이용해서 별도의 변수 선언 없이 바로 반환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;toLowerCase() 실행&lt;/li&gt;
&lt;li&gt;split(&apos;&apos;) 실행&lt;/li&gt;
&lt;li&gt;sort() 실행&lt;/li&gt;
&lt;li&gt;join(&apos;&apos;) 실행 후 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; my_string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[듀얼 부팅으로 설치된 Ubuntu를 완전히 삭제하기]]></title><description><![CDATA[Windwos10 설치된 PC에서 Ubuntu를 듀얼 부팅으로 설치해서 오류 없이 잘 사용하고 있었는데, 메인보드 BIOS 업데이트를 했더니 한 방에 부팅이 안되는 황당한 상황이 발생했다. Ubunutu…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/019/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/019/</guid><pubDate>Thu, 04 Aug 2022 09:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Windwos10 설치된 PC에서 Ubuntu를 듀얼 부팅으로 설치해서 오류 없이 잘 사용하고 있었는데, 메인보드 BIOS 업데이트를 했더니 한 방에 부팅이 안되는 황당한 상황이 발생했다. Ubunutu를 완전히 삭제하는 방법은 검색하면 많은 자료를 찾을 수 있는데, 내가 설치해서 사용했던 환경이 조금 특수했었기에 시행착오를 조금 겪었다. 그래서 내가 삭제한 과정을 정리해두려고 한다.&lt;/p&gt;
&lt;h3&gt;설치 환경&lt;/h3&gt;
&lt;p&gt;Windows10이 설치된 단일디스크 SSD에, 저장용 HDD를 마찬가지로 단일디스크로 할당하여 사용중이었다. Ubuntu 20.04 설치 USB를 만들어서 부팅했더니 듀얼 부팅 설치가 활성화되긴 했는데 자동적으로 저장용 HDD를 설치 드라이브로 잡아서 변경을 할 수 없었다. SSD가 아니다보니 속도가 조금 느리긴 했지만 사용에 지장은 없었는데, 서문에 적은대로 BIOS 업데이트 한 번에 양 쪽 모두 사용할 수 없는 상황에 처했다.&lt;/p&gt;
&lt;h3&gt;Windows10으로 부팅 복구&lt;/h3&gt;
&lt;p&gt;내가 찾은 방법은 &lt;a href=&quot;https://zuttee.tistory.com/entry/Windows-10-%EB%B6%80%ED%8C%85-%EC%9E%90%EB%8F%99-%EB%B3%B5%EA%B5%AC-%EC%95%88%EB%90%A0%EC%8B%9C-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95&quot;&gt;https://zuttee.tistory.com/entry/Windows-10-%EB%B6%80%ED%8C%85-%EC%9E%90%EB%8F%99-%EB%B3%B5%EA%B5%AC-%EC%95%88%EB%90%A0%EC%8B%9C-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95&lt;/a&gt; 이 포스트의 2번 방법이다. 설치/복구용 USB/DVD는 반드시 있어야 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;설치/복구용 USB/DVD를 통해서 부팅&lt;/li&gt;
&lt;li&gt;Windows 10 설치 화면에서 shift+F10 눌러서 명령 프롬프트 진입&lt;/li&gt;
&lt;li&gt;diskpart를 사용해서 복구 디스크를 마운트&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;diskpart&lt;br&gt;
DISKPART&gt;list vol&lt;br&gt;
DISKPART&gt;set vol 3(크기를 보고 몇 번 디스크가 복구 디스크인지 확인해야 한다)&lt;br&gt;
DISKPART&gt;assign letter=b:(빈 문자열을 지정해 준다. 어지간하면 b드라이브가 비어있을 것이다)&lt;br&gt;
DISKPART&gt;exit&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;복구 디스크로 이동하여 OS 정보를 복구하는 명령어 실행&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;cd /d b:efi\microsoft\boot(b드라이브로 마운트 했을 때)&lt;br&gt;
B:\EFI\Microsoft\Boot&gt;bootrec /fixboot&lt;br&gt;
B:\EFI\Microsoft\Boot&gt;ren bcd bcd.bak&lt;br&gt;
B:\EFI\Microsoft\Boot&gt;bcdboot c:\windows /l ko-KR /s b: /f ALL&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;이후 exit 명령어로 빠져 나온 다음에 설치를 취소한 다음 재부팅되는 타이밍에 설치 USB/DVD를 제거하고 BIOS에 진입해서 부팅 디스크 순서를 다시 확인한다. 내 경우 여전히 OS는 잡히지 않았고 SSD, HDD, 우분투가 설치된 논리 드라이브만 검색되었으나 SSD를 0번으로 할당하자 정상적으로 Windows10 부팅에 성공했다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Ubuntu의 흔적 지우기&lt;/h3&gt;
&lt;p&gt;사실 이 포스트를 작성하게 된 가장 큰 이유다. 구글에 &apos;듀얼 부팅 우분투 삭제&apos;라고 검색하면 아마도 (&lt;a href=&quot;https://jimnong.tistory.com/677)%EC%9D%B4%EA%B3%B3%EA%B3%BC&quot;&gt;https://jimnong.tistory.com/677)이곳과&lt;/a&gt; (&lt;a href=&quot;https://yerinpy73.tistory.com/6)%EC%9D%B4%EA%B3%B3%EC%9D%B4&quot;&gt;https://yerinpy73.tistory.com/6)이곳이&lt;/a&gt; 상단에 나올 것이다. bootice라는 프로그램을 사용해서 흔적을 완전히 삭제하라고 하는데, 잘 따라하면 깔끔하게 삭제가 가능할 것이다. 내 PC는 두 번째 링크에서 우분투가 설치된 파티션을 삭제하고 기존 파티션에 병합하는 부분을 실행할 수 없었다. 이유를 모르겠지만 디스크 관리(diskgmt.msc)로는 무슨 시도를 해도 드라이브를 삭제하고 병합할 수 없었다. bootice로도 안되서 꽤 오랫동안 이 문제를 해결할 수 없었는데, &apos;우분투에서 sudo를 쓰는것 처럼 더 권한이 높은 관리 프로그램을 쓰면 되지 않을까&apos;라는 생각에 검색을 해봤는데 그게 diskpart였다. 정답을 이미 알고 있었는데 그동안 시간낭비를 했다는 허무함에 억울함이 한동안 가시질 않았다. bootice를 통해서 우분투가 설치된 디스크를 삭제할 수 없다면 diskpart를 쓰면 된다. 만약 중요한 내용을 백업해두지 않았다면 반드시 디스크를 다른 PC에 연결하거나 우분투 설치 usb로 임시 부팅을 해서 내용을 백업해야 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;windows키 + r(실행)에서 cmd 입력 또는 &apos;명령 프롬프트&apos; 검색&lt;/li&gt;
&lt;li&gt;diskpart 실행&lt;/li&gt;
&lt;li&gt;디스크 선택 → 초기화 실행&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;diskpart&lt;br&gt;
list disk(용량을 통해 디스크를 확인)&lt;br&gt;
SEL DISK 2(list에서 확인한 초기화할 디스크를 선택. 헷갈리면 두번 세번 확인하자)&lt;br&gt;
CLEAN(초기화)&lt;br&gt;
EXIT(diskpart 종료)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;디스크를 다시 할당하는 과정은 diskpart대신 디스크 관리에서 잡아주는게 편할 것이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;후기&lt;/h3&gt;
&lt;p&gt;내가 맞은 문제는 두 가지였다. 부팅 자체가 안되었고, 남아있는 우분투의 흔적을 완벽하게 지울 수 없었던 것. 듀얼 부팅의 문제는 결국 우분투 삭제로 해결했다. 업데이트를 하면서 우분투 부팅을 인식하지 못해서 그런게 아닐까 추측할 뿐이다. 바이오스 업데이트가 정말 듀얼 부팅에 문제를 일으켰는지 나의 지식으로 확인할 수는 없지만 어쨌든 유지 보수 측면에서 듀얼 부팅이 그렇게 유리한 환경은 아니라는 생각을 하게 됐다. 그런 이유로 기존에 집에서 잠자고 있던 PC를 다시 설치한 뒤 Windows를 삭제하고 우분투를 설치해서 개발용 PC로 사용하고 있다. 개발 작업을 위해 고사양 PC를 여러대 집에 구비하는 것은 낭비라고 생각해서 ubuntu와 관련된 키워드로 검색을 좀 해보니 WSL이라는 신기한 녀석을 알게 됐다. 이건 나중에 내가 취직을 하게 되면 Windows 기반으로 우분투와 얼마나 유사한 작업 환경을 보장하는지 직접 체크를 해볼 생각이다.&lt;/p&gt;
&lt;p&gt;두 번째 문제는 답을 알고 있었지만 그걸 적용해 볼 생각을 못했었다. 포스트를 작성하면서 diskpart에 대해서 검색을 해보니 꼭 우분투 드라이브가 아니더라도 다양한 이유로 디스크 관리로는 파티션 삭제가 안되는 경우가 많은 듯 했다. 직접 적용되는 내용은 아니지만 리눅스나 MacOS에서 sudo의 필요성을 windows를 통해 배운 모양새가 됐다. 앞으로 작업환경을 구축할 때 참고해야겠다.&lt;/p&gt;</content:encoded></item></channel></rss>