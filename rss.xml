<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[A starter blog demonstrating what Gatsby can do.]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 20 Jun 2023 12:37:48 GMT</lastBuildDate><item><title><![CDATA[TIL16]]></title><description><![CDATA[Nextjs - useRouter client component에서 사용할 수 있음 useRouter를 불러올 때 'next/navigation'에서 import(router 아님) useRouter…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/181/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/181/</guid><pubDate>Tue, 20 Jun 2023 22:54:00 GMT</pubDate><content:encoded>&lt;ol&gt;
&lt;li&gt;Nextjs - useRouter
&lt;ul&gt;
&lt;li&gt;client component에서 사용할 수 있음&lt;/li&gt;
&lt;li&gt;useRouter를 불러올 때 &apos;next/navigation&apos;에서 import(router 아님)&lt;/li&gt;
&lt;li&gt;useRouter에서 쓸수 있는 기능들은 공식문서에 설명 있음(&lt;a href=&quot;https://nextjs.org/docs/pages/api-reference/functions/use-router&quot;&gt;https://nextjs.org/docs/pages/api-reference/functions/use-router&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;useRouter 기능중에 prefetch를 통해 링크 문서를 미리 받아놓을 수 있는데, Link 태그가 prefetch 기능을 포함하고 있음. Link 태그로 많은 링크를 불러올 경우 prefetch={flase} 지정해서 prefetch 막을 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nextjs 서버 생성
&lt;ul&gt;
&lt;li&gt;/app/api/ 폴더 또는 루트 경로에서 /pages/api/ 폴더 하위에 JS 파일 생성&lt;/li&gt;
&lt;li&gt;req.method 유형에 따라서 if문으로 응답을 보내주면 됨. express와 똑같다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;과거 블로그 포스트 복구
&lt;ul&gt;
&lt;li&gt;XX개 복구&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL15]]></title><description><![CDATA[한동안 다른 일 때문에 손을 못댔다. 프로젝트를 새로 만들어서 nextjs 강의를 복습하고 끊겼던 진도도 추가로 나갔다. Nextjs 강의 수강 복습(Part 1) 복습 프로젝트 새로은 레포지토리 생성해서 연동 Nextjs 강의 수강 복습(Part…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/180/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/180/</guid><pubDate>Mon, 19 Jun 2023 22:54:00 GMT</pubDate><content:encoded>&lt;p&gt;한동안 다른 일 때문에 손을 못댔다. 프로젝트를 새로 만들어서 nextjs 강의를 복습하고 끊겼던 진도도 추가로 나갔다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Nextjs 강의 수강 복습(Part 1)
&lt;ul&gt;
&lt;li&gt;복습 프로젝트 새로은 레포지토리 생성해서 연동&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nextjs 강의 수강 복습(Part 2)
&lt;ul&gt;
&lt;li&gt;MongoDB 연동&lt;/li&gt;
&lt;li&gt;서버 컴포넌트, 클라이언트 컴포넌트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dynamic Route
&lt;ul&gt;
&lt;li&gt;Dynamic Route를 사용하기 위한 페이지 명 폴더를 만들고 하위에 대괄호로 감싼 폴더명 지정해서 하위 폴더 또 생성&lt;/li&gt;
&lt;li&gt;대괄호 안에 폴더명이 page.js 내부 함수에서 props로 불러오는 변수명이 됨&lt;/li&gt;
&lt;li&gt;MongoDB에서 document마다 자동으로 부여하는 id를 확인&lt;/li&gt;
&lt;li&gt;Link 태그에 href 속성 링크에 _id 변수를 적용해서 게시물마다 각각 다른 id를 받아서 url로 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL14]]></title><description><![CDATA[mongodb에서 불러온 데이터를 페이지에 적용하는 데 시행착오를 좀 겪었다. 서버 컴포넌트가 자바스크립트를 아예 사용하지 못한다고 생각해서 layout.js도 만들어보고 에러메시지도 검색해보고 하루를 넘게 삽질을 했는데 그냥 map…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/179/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/179/</guid><pubDate>Fri, 19 May 2023 21:00:00 GMT</pubDate><content:encoded>&lt;p&gt;mongodb에서 불러온 데이터를 페이지에 적용하는 데 시행착오를 좀 겪었다. 서버 컴포넌트가 자바스크립트를 아예 사용하지 못한다고 생각해서 layout.js도 만들어보고 에러메시지도 검색해보고 하루를 넘게 삽질을 했는데 그냥 map 함수로 평범하게 페이지를 잘 작성할 수 있었다. 1강때 배웠던 &apos;html 내부에서 JS 사용 불가능&apos; 이 내용이 무슨 의미인지 좀 찾아봐야겠다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;서버 컴포넌트에서 db에서 받아온 배열에 map을 적용해 바로 내용을 페이지로 보여주기 구현&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL13]]></title><description><![CDATA[몽고DB 연동 nextjs project 폴더에서 mongodb 라이브러리 설치 db와 연동을 담당하는 js 파일 하나 생성해서 아래 코드 실행 db에서 받아온 데이터를 실제로 활용할 페이지에서 connectDB 함수 호출해서 사용]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/178/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/178/</guid><pubDate>Thu, 18 May 2023 23:45:00 GMT</pubDate><content:encoded>&lt;ol&gt;
&lt;li&gt;몽고DB 연동
&lt;ul&gt;
&lt;li&gt;nextjs project 폴더에서 mongodb 라이브러리 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install mongodb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;db와 연동을 담당하는 js 파일 하나 생성해서 아래 코드 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import { MongoClient } from &apos;mongodb&apos;
const url = &apos;DB접속URL~~&apos;
const options = { useNewUrlParser: true }
let connectDB

if (process.env.NODE_ENV === &apos;development&apos;) {
  if (!global._mongo) {
     global._mongo = new MongoClient(url, options).connect()
   }
   connectDB = global._mongo
} else {
   connectDB = new MongoClient(url, options).connect()
}
export { connectDB }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;db에서 받아온 데이터를 실제로 활용할 페이지에서 connectDB 함수 호출해서 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import { connectDB } from &quot;/util/database.js&quot;

function () {
   let client = await connectDB;
   const db = client.db(&apos;forum&apos;);
   let result = await db.collection(&apos;post&apos;).find().toArray();
   console.log(result);       
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL12]]></title><description><![CDATA[Part2로 넘어가기 전에 Part1 강의내용을 복습하고 Part2 강의 내용을 일부 진행했다. NextJS에서 이미지 넣는 방법 이미지는 public 폴더에 저장 html  태그로 넣기 Nextjs에서 제공하는  태그로 넣기 - 최적화, import…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/177/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/177/</guid><pubDate>Thu, 18 May 2023 23:40:00 GMT</pubDate><content:encoded>&lt;p&gt;Part2로 넘어가기 전에 Part1 강의내용을 복습하고 Part2 강의 내용을 일부 진행했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NextJS에서 이미지 넣는 방법
&lt;ul&gt;
&lt;li&gt;이미지는 public 폴더에 저장&lt;/li&gt;
&lt;li&gt;html &lt;img&gt; 태그로 넣기&lt;/li&gt;
&lt;li&gt;Nextjs에서 제공하는 &lt;Image&gt; 태그로 넣기 - 최적화, import로 불러오기 필요함&lt;/li&gt;
&lt;li&gt;Image 태그는 외부 이미지 불러올 경우 width, height 무조건 지정 + next.config.js에 이미지 경로 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Client component와 Server component
&lt;ul&gt;
&lt;li&gt;Server component: 페이지 로드할 때 빠르지만 html 내부에 JS 사용 불가능함&lt;/li&gt;
&lt;li&gt;Client component: html 내부에 JS 사용이 가능하지만 페이지 용량이 늘어나고 로딩속도가 약간 느려짐&lt;/li&gt;
&lt;li&gt;hydration: html 문서 불러온 뒤 리액트 문법 적용을 위해 PC가 html을 분석하는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;deduplication 기능
&lt;ul&gt;
&lt;li&gt;같은 데이터 요청이 여러번 있을 경우 묶어서 1번만 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;몽고DB 생성
&lt;ul&gt;
&lt;li&gt;mongodb.com 가입&lt;/li&gt;
&lt;li&gt;freetier로 생성, 관리자를 생성할 때 권한을 atlas admin으로 변경해주기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL11]]></title><description><![CDATA[연습문제 풀이(175) 배열에 대해서 조건을 만족하는 원소가 하나라도 있는지 검사하는 some 메서드를 활용한 풀이를 봤다. 그동안 완전히 까먹고 있었던 메서드다. 활용 방법이 많다고 생각하니 잊지 말아야겠다. Nextjs 강의 수강 복습(Part…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/176/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/176/</guid><pubDate>Fri, 12 May 2023 22:54:00 GMT</pubDate><content:encoded>&lt;ol&gt;
&lt;li&gt;연습문제 풀이(175)
&lt;ul&gt;
&lt;li&gt;배열에 대해서 조건을 만족하는 원소가 하나라도 있는지 검사하는 some 메서드를 활용한 풀이를 봤다. 그동안 완전히 까먹고 있었던 메서드다. 활용 방법이 많다고 생각하니 잊지 말아야겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nextjs 강의 수강 복습(Part 1)
&lt;ul&gt;
&lt;li&gt;프로젝트 업로드 전에 복습하고 기능 구현 체크, 주석 달기 진행&lt;/li&gt;
&lt;li&gt;사이드 이펙트에 관한 내용을 학습하였으나 정리는 하지 못했음. 내일 잊지 말고 할 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[외계어 사전]]></title><description><![CDATA[외계어 사전 https://school.programmers.co.kr/learn/courses/30/lessons/120869 변수 배열 spell 사전 dic 제한 spell과 dic의 원소는 알파벳 소문자로만 이루어져 있음 2 ≤ spell…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/175/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/175/</guid><pubDate>Fri, 12 May 2023 22:40:00 GMT</pubDate><content:encoded>&lt;h3&gt;외계어 사전&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120869&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120869&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;배열 spell&lt;br&gt;
사전 dic&lt;/p&gt;
&lt;h4&gt;제한&lt;/h4&gt;
&lt;p&gt;spell과 dic의 원소는 알파벳 소문자로만 이루어져 있음&lt;br&gt;
2 ≤ spell의 크기 ≤ 10&lt;br&gt;
spell의 원소의 길이는 1&lt;br&gt;
1 ≤ dic의 크기 ≤ 10&lt;br&gt;
1 ≤ dic의 원소의 길이 ≤ 10&lt;br&gt;
spell의 원소를 모두 사용&lt;br&gt;
spell의 원소를 모두 사용해 만들 수 있는 단어는 dic에 두 개 이상 존재하지 않음&lt;br&gt;
dic과 spell 모두 중복된 원소를 갖지 않음&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;알파벳 문자는 배열에 담은 상태에서 sort 메서드로 정렬이 가능하기 때문에, 알파벳을 오름차순으로 정렬한 값을 비교하여 일치하는 값이 있는지 확인하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 2 할당&lt;/li&gt;
&lt;li&gt;변수 word 선언하고 spell을 오름차순으로 정렬한 뒤 string 타입으로 묶어서 할당&lt;/li&gt;
&lt;li&gt;변수 dictionary 선언하고 2와 같은 과정으로 원소를 오름차순으로 정렬한 배열을 할당&lt;/li&gt;
&lt;li&gt;배열의 모든 원소 중 word와 같은 값이 있는지 확인하여 있으면 res에 1 할당&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;some 메서드를 사용해서 아주 쉽게 푼 문제가 있었다. 꼭 기억해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;spell&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//기본값으로 일치하는 항목이 없다고 가정하고 2 할당&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; word &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;spell&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//알파벳 순으로 정렬&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; dictionary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;dic&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//dic의 원소를 알파벳 순으로 정렬, word와 같은 방식&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dictionary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; word&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//dictonary의 원소 중 word와 같은 원소가 있으면 res를 1로 변환&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL10]]></title><description><![CDATA[일교차가 큰데 밤에 그냥 자는 바람에 몸살 증세가 와서 애먹었다. 건강한 컨디션 유지하는데 신경써야겠다. 연습문제 풀이(172) forEach를 사용한 풀이 뜯어보는 중. mdn…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/174/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/174/</guid><pubDate>Thu, 11 May 2023 22:07:00 GMT</pubDate><content:encoded>&lt;p&gt;일교차가 큰데 밤에 그냥 자는 바람에 몸살 증세가 와서 애먹었다. 건강한 컨디션 유지하는데 신경써야겠다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;연습문제 풀이(172)
&lt;ul&gt;
&lt;li&gt;forEach를 사용한 풀이 뜯어보는 중. mdn 문서에서 설명한 전달 가능한 인자에 대해서 계속 찾아보고 있다. 배열의 속성을 뜯어서 따로 가져오는 문법은 모던 자바스크립트 책자에서 이미 읽어서 알고 있었는데 self는 오늘 처음봤다. 연습장에 따로 적어놓던가 해서 주말에 정리해야겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1 관련해서 시간복잡도 검색해봄
&lt;ul&gt;
&lt;li&gt;board가 length * length 이고 또 그 주변을 다시 한번 돌아야 하기 때문에 시간복잡도가 매우 크다고 생각했는데 실상은 그냥 O(n)이었다. board에 들어간 모든 데이터의 수가 n개라고 하면 그냥 시간복잡도가 O(n)이고, 검사를 9번 하는 것을 포함하면 O(9n)인데 계수는 영향을 끼치지 않으므로 그냥 O(n)이 맞다. 이런거 헷갈리지 말아야겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nextjs 강의 수강 복습(Part 1)
&lt;ul&gt;
&lt;li&gt;프로젝트 업로드 전에 복습하고 기능 구현 체크, 주석 달기 진행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[TIL9]]></title><description><![CDATA[연습문제 푸는 중(172) Nextjs 강의 수강(Part 1 - 10) state 문법의 응용, state 변경을 위해 얕은 복사 깊은 복사 개념 설명, 구조분해 할당]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/173/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/173/</guid><pubDate>Mon, 08 May 2023 21:47:00 GMT</pubDate><content:encoded>&lt;ol&gt;
&lt;li&gt;연습문제 푸는 중(172)&lt;/li&gt;
&lt;li&gt;Nextjs 강의 수강(Part 1 - 10)
&lt;ul&gt;
&lt;li&gt;state 문법의 응용, state 변경을 위해 얕은 복사 깊은 복사 개념 설명, 구조분해 할당&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[안전지대]]></title><description><![CDATA[안전지대 https://school.programmers.co.kr/learn/courses/30/lessons/120866 변수 2차원 배열 지도 board 제한 board는 n * n 배열 1 ≤ n ≤ 100 지뢰는 1로 표시 board…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/172/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/172/</guid><pubDate>Mon, 08 May 2023 14:22:52 GMT</pubDate><content:encoded>&lt;h3&gt;안전지대&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120866&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120866&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;2차원 배열 지도 board&lt;/p&gt;
&lt;h4&gt;제한&lt;/h4&gt;
&lt;p&gt;board는 n * n 배열&lt;br&gt;
1 ≤ n ≤ 100&lt;br&gt;
지뢰는 1로 표시&lt;br&gt;
board에는 지뢰가 있는 지역 1과 지뢰가 없는 지역 0만 존재&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;시간복잡도를 줄이는 방법을 고민했지만 별다른 수를 찾지 못했다. 나중에 다른 풀이를 보면서 공부해보기로 하고 반복문을 사용해서 모든 항목을 검사하되, 지뢰가 있는 칸이 나오면 반복문의 반복연산자에 숫자를 더해서 위험지역이 확실한 지역을 건너뛰는 방식을 적용했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;변수 n 선언하고 board.length를 number로 받아서 반환&lt;/li&gt;
&lt;li&gt;for (i = 0; i &amp;#x3C; n; i++) 반복문 진입 - 아래로 내려가는 반복문&lt;/li&gt;
&lt;li&gt;2번 반복문 내부에서 for (j = 0; j &amp;#x3C; n; j++) 반복문 진입 - 우측으로 진행하는 반복문&lt;/li&gt;
&lt;li&gt;변수 danger 선언하고 false 할당 - 검사해서 true로 바뀌면 res에 추가하지 않음&lt;/li&gt;
&lt;li&gt;for (k = i - 1; k &amp;#x3C;= i + 1; k++) 반복문 진입 - 윗줄 부터 아랫줄까지 검사&lt;/li&gt;
&lt;li&gt;k가 -1 또는 n 일때 continue - 검사 안함&lt;/li&gt;
&lt;li&gt;5번 반복문 내부에서 for (l = j - 1; l &amp;#x3C;= j + 1; l++) 반복문 진입 - 왼쪽부터 오른쪽까지 검사&lt;/li&gt;
&lt;li&gt;l가 -1 또는 n 일때 continue - 검사 안함&lt;/li&gt;
&lt;li&gt;board[k][l] === 1 확인, 맞으면 danger에 true 할당&lt;/li&gt;
&lt;li&gt;3번 반복문 내부에서 danger가 true인지 확인, 맞으면 j+=2, 틀리면 res++&lt;/li&gt;
&lt;li&gt;모든 반복문 나와서 res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;테스트케이스가 공개되지 않아서 어떤 이유인지는 모르겠으나 11번 조건이 있을 때 조건을 통과하지 못하는 경우가 있었다. 2씩 더했을때와 1씩 더했을 때 통과하지 못하는 케이스가 다른 걸 봐서는 이런 형태의 조건은 정상적으로 작동하지 않는 모양이다. 짝수와 홀수의 경우로 나뉘는 듯 한데 이건 직접 연구를 해봐야겠다. 다른 사람들의 풀이를 보니 좌표를 미리 배열로 받은 다음 forEach 메서드를 두 번 사용해 반복문과 같은 방식으로 답을 낸 풀이가 있었다. 이 풀이를 해석해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;board&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//board 전체에서 아래로 내려가는 반복문&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//i번째 줄에서 우측으로 진행하는 반복문&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; danger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//위험 여부 확인&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;k &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; k &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; k&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//윗줄부터 아래줄까지 검사&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;k &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; k &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//배열의 범위 바깥을 검사하지 않음&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;l &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; l &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; l&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//왼쪽부터 오른쪽까지 검사&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;l &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; l &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//배열의 범위 바깥을 검사하지 않음&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;board&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;l&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; danger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//지뢰가 있으면 위험&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;danger&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//풀이 11번 danger ? j+=2 : res++; 코드를 대체함&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL8]]></title><description><![CDATA[다항식 연산자 문제를 푸는데 시간을 많이썼다. Nextjs 강의 수강(9강) state 문법 연습문제 풀이(169) JavaScript의 스코프]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/171/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/171/</guid><pubDate>Sun, 07 May 2023 22:45:00 GMT</pubDate><content:encoded>&lt;p&gt;다항식 연산자 문제를 푸는데 시간을 많이썼다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Nextjs 강의 수강(9강)
&lt;ul&gt;
&lt;li&gt;state 문법&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;연습문제 풀이(169)&lt;/li&gt;
&lt;li&gt;JavaScript의 스코프&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[스코프]]></title><description><![CDATA[…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/170/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/170/</guid><pubDate>Sun, 07 May 2023 22:40:00 GMT</pubDate><content:encoded>&lt;p&gt;소인수분해 문제를 풀면서 내가 최초에 마주쳤던 오류가 변수와 관련된 문제여서 꼭 공부를 해야겠다고 생각했다. 모던 자바스크립트를 펼쳐보니 생각보다 내용이 많아서 한번에 내용을 찾아서 정리하는 것은 어려울 것 같아 기본적인 내용을 우선 정리했다. 이 포스트는 계속 업데이트 할 예정이다.&lt;/p&gt;
&lt;h3&gt;스코프&lt;/h3&gt;
&lt;p&gt;모든 프로그래밍 언어에서 적용되는 개념&lt;br&gt;
&lt;strong&gt;식별자(변수 이름, 함수 이름, 클래스 이름 등)가 유효한 범위&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;JavaScript의 스코프&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;식별자를 검색할 때 사용하는 규칙&lt;/strong&gt;&lt;br&gt;
자바스크립트 엔진은 코드를 실행할 때 코드의 문맥(context)를 고려함&lt;/p&gt;
&lt;h4&gt;전역 스코프와 지역 스코프&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;전역 : 코드의 가장 바깥 영역&lt;/li&gt;
&lt;li&gt;지역 : 함수 몸체 내부&lt;/li&gt;
&lt;li&gt;전역에 선언된 식별자는 전역 스코프, 지역에 선언된 식별자는 지역 스코프&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[다항식 더하기]]></title><description><![CDATA[다항식 더하기 https://school.programmers.co.kr/learn/courses/30/lessons/120863 변수 다항식 polynomial 제한 0 < polynomial에 있는 수 < 100 polynomial에 변수는 'x…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/169/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/169/</guid><pubDate>Sun, 07 May 2023 20:33:00 GMT</pubDate><content:encoded>&lt;h3&gt;다항식 더하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120863&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120863&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;다항식 polynomial&lt;/p&gt;
&lt;h4&gt;제한&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; polynomial에 있는 수 &amp;#x3C; 100&lt;br&gt;
polynomial에 변수는 &apos;x&apos;만 존재&lt;br&gt;
polynomial은 0부터 9까지의 정수, 공백, ‘x’, ‘+&apos;로 구성&lt;br&gt;
항과 연산기호 사이에는 항상 공백이 존재&lt;br&gt;
공백은 연속되지 않으며 시작이나 끝에는 공백이 없음&lt;br&gt;
하나의 항에서 변수가 숫자 앞에 오는 경우는 없음&lt;br&gt;
&quot; + 3xx + + x7 + &quot;와 같은 잘못된 입력은 주어지지 않음&lt;br&gt;
&quot;012x + 001&quot;처럼 0을 제외하고는 0으로 시작하는 수는 없음&lt;br&gt;
문자와 숫자 사이의 곱하기는 생략&lt;br&gt;
polynomial에는 일차 항과 상수항만 존재&lt;br&gt;
계수 1은 생략&lt;br&gt;
결괏값에 상수항은 마지막에 나옴&lt;br&gt;
0 &amp;#x3C; polynomial의 길이 &amp;#x3C; 50&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;x의 동류항을 별도의 배열로 분리하여 x와 정수의 합을 반환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 X 선언하고 polynomial.match(/\d*x/g) 할당&lt;/li&gt;
&lt;li&gt;X의 모든 원소의 x를 replace 0으로 변환한 뒤 결과가 &apos;0&apos;인 경우 &apos;10&apos;으로 재변환&lt;/li&gt;
&lt;li&gt;reduce 메서드 적용하여 모든 원소의 합으로 변환한 뒤 10으로 나눠줌&lt;/li&gt;
&lt;li&gt;변수 numbers 선언하고 polynomial.split(&apos; &apos;) 할당&lt;/li&gt;
&lt;li&gt;numbers 배열의 모든 원소를 number 타입으로 변환하고 NaN이 아닌 원소만 남김&lt;/li&gt;
&lt;li&gt;numbers에 reduce 적용하여 모든 수의 합을 할당&lt;/li&gt;
&lt;li&gt;X의 값이 1인지 확인, 1일 경우 빈 문자열을 재할당&lt;/li&gt;
&lt;li&gt;삼항연산자로 numbers의 값이 0인지 확인, 0일 경우 &lt;code class=&quot;language-text&quot;&gt;{X}x&lt;/code&gt;, 아닐 경우 &lt;code class=&quot;language-text&quot;&gt;{X}x + {numbers}&lt;/code&gt; 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;실제로 풀 때는 x동류항 또는 숫자 동류항이 없는 경우를 고려해서 중간에 배열이 맞는지 확인하는 과정을 추가하였다. x항만 존재하는 경우와, 정수항만 존재하는 경우가 따로 있어서 풀이와 코드가 많이 달라졌다. 다른 사람들의 풀이를 보니 split 메서드 연산자를 아예 &apos; + &apos;로 사용해서 항만 골라내는 방식이 있었는데 좋은 방식인 것 같다. 기억하고 있어야 겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;polynomial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; polynomial&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\d*x&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; numbers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; polynomial&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isNaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token constant&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;10&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cur&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cur&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        numbers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cur&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; acc &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; cur&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        res &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; + &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL7]]></title><description><![CDATA[답을 찾고나니 정말 작은 실수였는데 이렇게 시간을 오래 끌었나 싶다. 파면 팔수록 알아야 할게 늘어나는 기분이다. 소인수분해 문제 풀면서 발생했던 오류 원인과 해결책 찾아서 해당 포스트 업데이트 연습문제 풀이(168) 코딩애플 NextJs…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/168/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/168/</guid><pubDate>Thu, 04 May 2023 22:03:00 GMT</pubDate><content:encoded>&lt;p&gt;답을 찾고나니 정말 작은 실수였는데 이렇게 시간을 오래 끌었나 싶다. 파면 팔수록 알아야 할게 늘어나는 기분이다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;소인수분해 문제 풀면서 발생했던 오류 원인과 해결책 찾아서 해당 포스트 업데이트&lt;/li&gt;
&lt;li&gt;연습문제 풀이(168)&lt;/li&gt;
&lt;li&gt;코딩애플 NextJs 강의 수강 및 실습(8강)
&lt;ul&gt;
&lt;li&gt;props로 component간 데이터 상속하는 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[최댓값 만들기 (2)]]></title><description><![CDATA[최댓값 만들기 (2) https://school.programmers.co.kr/learn/courses/30/lessons/120862 변수 정수 배열 numbers 제한 -10,000 ≤ numbers의 원소 ≤ 10,000 2 ≤ numbers…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/167/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/167/</guid><pubDate>Thu, 04 May 2023 14:16:00 GMT</pubDate><content:encoded>&lt;h3&gt;최댓값 만들기 (2)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120862&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120862&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 numbers&lt;/p&gt;
&lt;h4&gt;제한&lt;/h4&gt;
&lt;p&gt;-10,000 ≤ numbers의 원소 ≤ 10,000&lt;br&gt;
2 ≤ numbers 의 길이 ≤ 100&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;처음에는 조건이 매우 까다롭다고 생각했다. 두 번째로 큰 수가 0이거나, 혹은 숫자가 하나만 양수고 나머지 숫자가 모두 음수이거나 하는 경우를 생각해봤다. 그런데 더 고민해보니 음수와 음수를 곱할 경우 양수가 되니 그냥 음수와 양수를 곱하는 경우만 피하면 된다는 결론이 나왔다. numbers에 100개의 원소가 다 들어있고 양수가 50개, 음수가 50개 들어있는 경우를 가정하여, 오름차순으로 정렬한뒤 numbers의 맨 앞의 원소 두개의 곱과 맨 뒤의 원소 두개의 곱을 비교하는 방법을 생각했다. numbers의 원소가 최소 2개이기 때문에, 모든 경우에 이 방법을 적용할 수 있다고 생각하여 이 방법 그대로 답을 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 arr 선언하고 [...numbers].sort((a, b) =&gt; b - a) 할당&lt;/li&gt;
&lt;li&gt;변수 length 선언하고 Number(arr.length) - 1 할당&lt;/li&gt;
&lt;li&gt;삼항연산자로 arr[0] * arr[1] &gt;= arr[length] * arr[length - 1] 확인&lt;/li&gt;
&lt;li&gt;맞으면 arr[0] * [1] 반환, 틀리면 arr[length] * arr[length - 1] 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 풀이를 보니 방식은 똑같고 삼항연산자 대신 Math.max 메서드로 두 값을 비교했는데 이 쪽이 더 깔끔해보인다. 아직 메서드 사용이 서투른 것 같다. 더 공부해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL6]]></title><description><![CDATA[…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/166/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/166/</guid><pubDate>Mon, 01 May 2023 21:20:00 GMT</pubDate><content:encoded>&lt;p&gt;소인수분해를 구현하는 문제를 푸는데 많은 시간을 썼다. 아쉽다. 앞으로 미흡하다고 생각하는 부분은 미루지 않고 이해가 될때까지 풀어보려고 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;연습문제 풀기&lt;/li&gt;
&lt;li&gt;소수를 판별하는 함수 작성 중 에러가 발생하여 해당 에러 메시지를 검색하고 해결 방법 정리(포스트 작성 중)&lt;/li&gt;
&lt;li&gt;소인수분해 알고리즘 학습&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;**내가 생각하지 못했던 부분은 while 반복문 사용, 중복되는 원소를 걸러주는 set 객체 사용&lt;br&gt;
**내가 생각하기에 직관적으로 이해가 제일 잘됐던 구현(&lt;a href=&quot;https://dalconbox.tistory.com/288&quot;&gt;https://dalconbox.tistory.com/288&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;fs&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; input &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/dev/stdin&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; primes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; i
    primes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;primes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;수의 범위를 정해야 하는 경우 제곱근을 쓰면 왜 시간복잡도가 줄어드는지 이해함 → &apos;좌우대칭&apos;을 기억하자&lt;/li&gt;
&lt;li&gt;소인수분해 2부터 시작해서 순서대로 나누는 과정을 console.log로 보여주는 코드 → &lt;a href=&quot;https://rheem-hm.tistory.com/48&quot;&gt;https://rheem-hm.tistory.com/48&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[소인수분해 문제를 풀면서 발생했던 오류 파헤치기]]></title><description><![CDATA[내가 처음에 소인수분해 문제를 풀면서 작성했던 코드는 이거였다(틀린 답이다). 제대로 작성한것 같은데, 계속 아래와 같은 오류가 발생했다. 처음에는 소수 여부를 판별하는 isPrime…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/165/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/165/</guid><pubDate>Mon, 01 May 2023 17:25:00 GMT</pubDate><content:encoded>&lt;p&gt;내가 처음에 소인수분해 문제를 풀면서 작성했던 코드는 이거였다(틀린 답이다).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;제대로 작성한것 같은데, 계속 아래와 같은 오류가 발생했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;#
# Fatal error &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; line &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
# Fatal JavaScript invalid size error &lt;span class=&quot;token number&quot;&gt;169220804&lt;/span&gt;
#
#
#
#FailureMessage Object&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x7fff4a7255d0&lt;/span&gt;
 &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xb6ca81&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x1bef1a4&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;V8_Fatal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;char &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xe63268&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x1010b12&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x1011456&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x11d1b73&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;internal&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Runtime_GrowArrayElements&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;int&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; unsigned long&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;internal&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;Isolate&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x15d5439&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;처음에는 소수 여부를 판별하는 isPrime 함수가 잘못되었나 싶어서 아래 함수를 복사해서 붙여넣었더니 정상적으로 작동했다(&lt;a href=&quot;https://velog.io/@loocia1910/javascript%EC%97%90%EC%84%9C-%EC%86%8C%EC%88%98Prime-number-%EA%B5%AC%ED%95%98%EA%B8%B0&quot;&gt;https://velog.io/@loocia1910/javascript%EC%97%90%EC%84%9C-%EC%86%8C%EC%88%98Prime-number-%EA%B5%AC%ED%95%98%EA%B8%B0&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 음수와 1은 소수가 아니다&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 2는 짝수 중 유일한 소수이다&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token comment&quot;&gt;// 이제 num이 홀수 일때 다른 수에 나눠지는지 판별한다&lt;/span&gt;
  
  &lt;span class=&quot;token comment&quot;&gt;// Math.sqrt(num) 즉, √num까지 나눠 떨어지는지 검사한다&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 원리는 아래글 &quot;에라토스테네스의 체&quot; 참고&lt;/span&gt;
 
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sqrt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; divider &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; divider &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; sqrt&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; divider &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; divider &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;내가 작성한 isPrime과 별 차이가 없다고 생각해서, 에러 메시지 자체를 검색하니 스택오버플로우 질문과 해당 질문의 답변을 한글로 번역한 포스트를 찾을수 있었는데, 심플한 오류 메시지 그대로 &apos;메모리를 과하게 사용했다&apos;가 결론이었다. 여기서 &apos;메모리를 과하게 사용할 이유가 있나?&apos; 싶어서 설마하는 마음에, 원래의 코드에서 isPrime함수의 for 반복문 변수명을 i에서 j로 바꿨다. 그랬더니 잘 작동한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; sqrt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;내 기억으론 분명히 변수의 범위는 함수 내부로 제한된다고 기억하고 있어서 같은 변수를 써도 된다고 생각했는데, 문제를 푸는 페이지 내부에서는 하나의 범위로 묶인 모양이다. 그래서 반복문마다 i가 계속 사용되는 바람에 메모리를 모두 점유하는 문제가 발생했다. 이 문제에 발을 좀 오래 묶여있어서, 앞으로 함수를 선언할 때 변수명도 겹치지 않게 잘 선택해야겠다는 교훈으로 마무리 지으려고 한다. 대신 변수 범위는 주말에 공부를 조금 해봐야겠다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[소인수분해]]></title><description><![CDATA[소인수분해 https://school.programmers.co.kr/learn/courses/30/lessons/120852 변수 자연수 n 제한 2 ≤ n ≤ 10,000 풀이 짝수 여부를 확인한 뒤,…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/164/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/164/</guid><pubDate>Mon, 01 May 2023 17:25:00 GMT</pubDate><content:encoded>&lt;h3&gt;소인수분해&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120852&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120852&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;자연수 n&lt;/p&gt;
&lt;h4&gt;제한&lt;/h4&gt;
&lt;p&gt;2 ≤ n ≤ 10,000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;짝수 여부를 확인한 뒤, 2로 나눈 수를 홀수로 나눠서 검사하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 res 선언하고 빈 배열 할당&lt;/li&gt;
&lt;li&gt;n % 2 === 0 이면 res에 2 추가&lt;/li&gt;
&lt;li&gt;위의 if문 내부에서 while (n % 2 === 0) n /= 2 실행&lt;/li&gt;
&lt;li&gt;for(i = 3; i * i &amp;#x3C;= n; i+=2) 반복문 진입&lt;/li&gt;
&lt;li&gt;n % i === 0 이면 res에 i 추가&lt;/li&gt;
&lt;li&gt;5번 if문 내부에서 while(n % i === 0) n /= i 실행&lt;/li&gt;
&lt;li&gt;n &gt; 2일 경우 res에 추가&lt;/li&gt;
&lt;li&gt;res.length가 0보다 큰지 확인, 크면 res, 그렇지 않으면 [n]을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;문제 풀이에 오늘 하루를 거의 다 보냈다. 소수를 구하는 공식에서 에러가 나서 시간을 많이 잡아먹었고, 에러를 해결했는데도 테스트케이스를 통과하지 못해서 또 많이 고민해야했다. 공부해야할 다른 내용들이 많지만 굉장히 기본적인 것을 놓친 기분이 들어서 이 문제를 풀면서 생긴 의문들을 해소할때까지 다른 내용을 미뤄두고 우선 공부해볼 생각이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; n&lt;span class=&quot;token operator&quot;&gt;/=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; n&lt;span class=&quot;token operator&quot;&gt;/=&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL5]]></title><description><![CDATA[컨디션 이슈가 있어서 시간을 많이 못썼다. 오늘 한 일들 코딩 테스트 2문제 풀음 161, 162 정규식 표현 복습해봄, 몰랐던 연산자 활용 검색 ** /\d/ 생각 못함. 오늘 봤으니 확실히 기억해두기 ** string type…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/163/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/163/</guid><pubDate>Fri, 28 Apr 2023 21:30:00 GMT</pubDate><content:encoded>&lt;p&gt;컨디션 이슈가 있어서 시간을 많이 못썼다.&lt;/p&gt;
&lt;h4&gt;오늘 한 일들&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;코딩 테스트 2문제 풀음&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;161, 162&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;정규식 표현 복습해봄, 몰랐던 연산자 활용 검색&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;** /\d/ 생각 못함. 오늘 봤으니 확실히 기억해두기&lt;br&gt;
** string type 원소를 바꾸는 과정에서 v =&gt; +v 용법. + 활용법&lt;/p&gt;</content:encoded></item><item><title><![CDATA[문자열 정렬하기 (1)]]></title><description><![CDATA[문자열 정렬하기 (1) https://school.programmers.co.kr/learn/courses/30/lessons/120850 변수 문자열 my_string 제한 1 ≤ my_string의 길이 ≤ 100 my_string…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/162/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/162/</guid><pubDate>Fri, 28 Apr 2023 21:26:00 GMT</pubDate><content:encoded>&lt;h3&gt;문자열 정렬하기 (1)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120850&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120850&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 my_string&lt;/p&gt;
&lt;h4&gt;제한&lt;/h4&gt;
&lt;p&gt;1 ≤ my_string의 길이 ≤ 100&lt;br&gt;
my_string에는 숫자가 한 개 이상 포함되어 있음&lt;br&gt;
my_string은 영어 소문자 또는 0부터 9까지의 숫자로 이루어져 있음&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;숫자를 오름차순으로 골라내서 배열로 반환해야 한다. 메서드를 써서 쉽게 반환할 수 있기 때문에 순서를 고민했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;my_string.replaceAll(/[a-z]/g,&apos;&apos;) 실행&lt;/li&gt;
&lt;li&gt;split 메서드로 배열로 분해&lt;/li&gt;
&lt;li&gt;map 메서드로 e =&gt; Number(e) 변환&lt;/li&gt;
&lt;li&gt;sort 메서드로 오름차순 정렬 후 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;풀이가 다양했다. 모르는 부분들을 잘 체크해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; my_string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[a-z]&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[모음 제거]]></title><description><![CDATA[모음 제거 https://school.programmers.co.kr/learn/courses/30/lessons/120849 변수 문자열 my_string 제한사항 my_string은 소문자와 공백으로 이루어져 있음 1 ≤ my_string…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/161/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/161/</guid><pubDate>Fri, 28 Apr 2023 21:16:00 GMT</pubDate><content:encoded>&lt;h3&gt;모음 제거&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120849&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120849&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 my_string&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;my_string은 소문자와 공백으로 이루어져 있음&lt;br&gt;
1 ≤ my_string의 길이 ≤ 1,000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;my_string.replaceAll(/a|e|i|o|u/g,&apos;&apos;) 실행 후 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;| 연산자 대신 []로 묶는 정규식이 더 깔끔했다. 정규식에 더 익숙해져야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; my_string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;a|e|i|o|u&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL4]]></title><description><![CDATA[오늘 한 일들 코딩 테스트 1문제 풀기(레벨 1 문제 푸는 중) '코드 없는 알고리즘과 데이터 구조' 독서(3장, 20:40 ~ 21:30) 코딩애플 NextJs 강의 수강 및 실습(7강)]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/160/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/160/</guid><pubDate>Thu, 27 Apr 2023 21:38:00 GMT</pubDate><content:encoded>&lt;h3&gt;오늘 한 일들&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;코딩 테스트 1문제 풀기(레벨 1 문제 푸는 중)&lt;/li&gt;
&lt;li&gt;&apos;코드 없는 알고리즘과 데이터 구조&apos; 독서(3장, 20:40 ~ 21:30)&lt;/li&gt;
&lt;li&gt;코딩애플 NextJs 강의 수강 및 실습(7강)&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[팩토리얼]]></title><description><![CDATA[팩토리얼 https://school.programmers.co.kr/learn/courses/30/lessons/120848 변수 정수 n 제한사항 i! ≤ n 0 < n ≤ 3,628,800 풀이 변수 res, fac 선언하고 1 할당 while…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/159/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/159/</guid><pubDate>Thu, 27 Apr 2023 20:25:00 GMT</pubDate><content:encoded>&lt;h3&gt;팩토리얼&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120848&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120848&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 n&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;i! ≤ n&lt;br&gt;
0 &amp;#x3C; n ≤ 3,628,800&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;변수 res, fac 선언하고 1 할당&lt;/li&gt;
&lt;li&gt;while(fac &amp;#x3C;= n) 반복문 진입&lt;/li&gt;
&lt;li&gt;fac *= res; res++ 실행&lt;/li&gt;
&lt;li&gt;res - 2 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;res가 계속 크게 나와서 2를 뺀 값을 return했더니 모든 테스트를 통과해서 당황했다. 내 풀이처럼 두 변수를 놓고 계산 결과를 반영하면서 반복문으로 해결한 다른 풀이를 보니 마찬가지로 -1을 한 풀이가 있었는데 접근 자체는 옳은 방향이었던것 같다. 이해를 위해 검색을 해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; fac &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fac &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        fac &lt;span class=&quot;token operator&quot;&gt;*=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        res&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;     
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL3]]></title><description><![CDATA[오늘 한 일들 코딩 테스트 1문제 풀기(레벨 1 문제 푸는 중) '코드 없는 알고리즘과 데이터 구조' 독서(3장, 16:10 ~ 17:15) 코딩애플 NextJs 강의 수강 및 실습(5, 6강) 예전 블로그 포스트 25개 복구 블로그 deploy…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/158/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/158/</guid><pubDate>Wed, 26 Apr 2023 21:38:00 GMT</pubDate><content:encoded>&lt;h3&gt;오늘 한 일들&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;코딩 테스트 1문제 풀기(레벨 1 문제 푸는 중)&lt;/li&gt;
&lt;li&gt;&apos;코드 없는 알고리즘과 데이터 구조&apos; 독서(3장, 16:10 ~ 17:15)&lt;/li&gt;
&lt;li&gt;코딩애플 NextJs 강의 수강 및 실습(5, 6강)&lt;/li&gt;
&lt;li&gt;예전 블로그 포스트 25개 복구&lt;/li&gt;
&lt;li&gt;블로그 deploy 실행&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;내일 할 일들&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;코딩 테스트 문제 1문제 풀기, 어제 못 푼 문제 이어서 풀기&lt;/li&gt;
&lt;li&gt;&apos;코드 없는 알고리즘과 데이터 구조&apos; 40분 이상 읽기&lt;/li&gt;
&lt;li&gt;NestJS 강의 수강 및 실습&lt;/li&gt;
&lt;li&gt;예전 블로그 포스트 Gatsby 형식으로 복구&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[최댓값 만들기 (1)]]></title><description><![CDATA[최댓값 만들기 (1) https://school.programmers.co.kr/learn/courses/30/lessons/120847 변수 정수 배열 numbers 제한사항 0 ≤ numbers의 원소 ≤ 10,000 2 ≤ numbers…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/156/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/156/</guid><pubDate>Wed, 26 Apr 2023 16:06:00 GMT</pubDate><content:encoded>&lt;h3&gt;최댓값 만들기 (1)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120847&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120847&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 numbers&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 ≤ numbers의 원소 ≤ 10,000&lt;br&gt;
2 ≤ numbers의 길이 ≤ 100&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;numbers를 정렬한 다음 가장 큰 두개의 값만 남겨서 곱을 바로 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;numbers 내림차순 정렬&lt;/li&gt;
&lt;li&gt;numbers의 원소를 앞의 두 개만 남기고 모두 삭제&lt;/li&gt;
&lt;li&gt;두 원소의 곱을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;reduce 메서드를 이용해 slice 과정을 생략한 풀이가 있었다. reduce에 전달되는 인자로 인덱스가 존재한다는 사실을 자꾸 까먹는것 같다. 답안을 잘 기억해두고 MDN 문서도 다시 봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cur&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; acc &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; cur&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL2]]></title><description><![CDATA[오늘 한 일들 코딩 테스트 2문제 풀기 '코드 없는 알고리즘과 데이터 구조' 독서(2장, 16:00 ~ 16:42) 코딩애플 NextJs 강의 수강 및 실습(3, 4강) 예전 블로그 포스트 10개 복구 내일 할 일들 코딩 테스트 문제…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/155/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/155/</guid><pubDate>Tue, 25 Apr 2023 22:43:00 GMT</pubDate><content:encoded>&lt;h3&gt;오늘 한 일들&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;코딩 테스트 2문제 풀기&lt;/li&gt;
&lt;li&gt;&apos;코드 없는 알고리즘과 데이터 구조&apos; 독서(2장, 16:00 ~ 16:42)&lt;/li&gt;
&lt;li&gt;코딩애플 NextJs 강의 수강 및 실습(3, 4강)&lt;/li&gt;
&lt;li&gt;예전 블로그 포스트 10개 복구&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;내일 할 일들&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;코딩 테스트 문제 2문제 이상 풀기(1문제는 레벨 1)&lt;/li&gt;
&lt;li&gt;&apos;코드 없는 알고리즘과 데이터 구조&apos; 40분 이상 읽기&lt;/li&gt;
&lt;li&gt;NestJS 강의 수강 및 실습&lt;/li&gt;
&lt;li&gt;예전 블로그 포스트 Gatsby 형식으로 복구&lt;/li&gt;
&lt;li&gt;블로그 deploy 실행&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[합성수 찾기]]></title><description><![CDATA[합성수 찾기 https://school.programmers.co.kr/learn/courses/30/lessons/120846 변수 자연수 n 제한사항 1 ≤ n ≤ 100 풀이 약수의 갯수를 구하는 방법을 어떻게 할지에 시간을 정말 많이 썼다.…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/154/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/154/</guid><pubDate>Tue, 25 Apr 2023 10:15:00 GMT</pubDate><content:encoded>&lt;h3&gt;합성수 찾기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120846&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120846&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;자연수 n&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ n ≤ 100&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;약수의 갯수를 구하는 방법을 어떻게 할지에 시간을 정말 많이 썼다. 4 이상의 짝수는 무조건 합성수다. 홀수의 경우가 문제인데, 홀수 x 홀수가 나오는 경우가 생각보다 많지 않았다(결국 검색을 해서 소수를 제외하면 9 이상의 홀수도 모두 합성수라는 사실을 알았다). 조금 무식한 방법이지만 n의 범위가 1에서 100 사이로 넓지 않기 때문에, n의 범위 안에 있는 소수를 검색해서 소수의 갯수를 제외한 n의 값을 반환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 n 할당&lt;/li&gt;
&lt;li&gt;상수 primeNumber 선언하고 1에서 97까지 소수를 담은 배열 할당&lt;/li&gt;
&lt;li&gt;for (i = 1; i &amp;#x3C;= n; i++) 반복문 진입&lt;/li&gt;
&lt;li&gt;primeNumber.includes(i) 확인, 맞으면 res--&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;문제의 조건에 맞춰서 풀긴 했지만 만족하기 어려운 풀이였다. 더 넓은 범위에도 적용할 수 있는 방식을 다른 사람들 풀이를 보면서 연구해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; primeNumber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;37&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;67&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;71&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;79&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;83&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;primeNumber&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[주사위의 개수]]></title><description><![CDATA[주사위의 개수 https://school.programmers.co.kr/learn/courses/30/lessons/120845 변수 배열 box 주사위 모서리의 길이 정수 n 제한사항 box의 길이는 3 box[0] = 상자의 가로 길이 box[…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/153/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/153/</guid><pubDate>Tue, 25 Apr 2023 09:55:00 GMT</pubDate><content:encoded>&lt;h3&gt;주사위의 개수&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120845&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120845&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;배열 box&lt;br&gt;
주사위 모서리의 길이 정수 n&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;box의 길이는 3&lt;br&gt;
box[0] = 상자의 가로 길이&lt;br&gt;
box[1] = 상자의 세로 길이&lt;br&gt;
box[2] = 상자의 높이 길이&lt;br&gt;
1 ≤ box의 원소 ≤ 100&lt;br&gt;
1 ≤ n ≤ 50&lt;br&gt;
n ≤ box의 원소&lt;br&gt;
주사위는 상자와 평행하게 넣음&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;box[i]/n 의 정수 부분을 곱한 값을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;box에 reduce 메서드를 적용한 풀이들이 있었다. 배열이 나오면 항상 배열에 적용하는 메서드 적용이 가능한지 생각해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;box&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;box&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;box&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;box&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL1]]></title><description><![CDATA[그동안 코딩 테스트 문제도 풀고 블로그를 꾸준히 작성은 해 왔는데, 제대로 활용하지 못하는 것 같아서 블로그를 더 잘 활용할 방법을 떠올리던 중에 마침 TIL 포스트가 떠올라서 오늘부터 바로 작성하려고 한다. 오늘 한 일들 코딩 테스트…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/152/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/152/</guid><pubDate>Mon, 24 Apr 2023 22:02:00 GMT</pubDate><content:encoded>&lt;p&gt;그동안 코딩 테스트 문제도 풀고 블로그를 꾸준히 작성은 해 왔는데, 제대로 활용하지 못하는 것 같아서 블로그를 더 잘 활용할 방법을 떠올리던 중에 마침 TIL 포스트가 떠올라서 오늘부터 바로 작성하려고 한다.&lt;/p&gt;
&lt;h3&gt;오늘 한 일들&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;코딩 테스트 1문제 풀기&lt;/li&gt;
&lt;li&gt;&apos;코드 없는 알고리즘과 데이터 구조&apos; 독서(1장, 13:20 ~ 14:00)&lt;/li&gt;
&lt;li&gt;코딩애플 NextJs 강의 수강 및 실습(1, 2 강)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;내일 할 일들&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;코딩 테스트 문제 2문제 이상 풀기&lt;/li&gt;
&lt;li&gt;&apos;코드 없는 알고리즘과 데이터 구조&apos; 40분 이상 읽기&lt;/li&gt;
&lt;li&gt;NestJS 강의 수강 및 실습&lt;/li&gt;
&lt;li&gt;예전 블로그 포스트 Gatsby 형식으로 복구&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[배열 회전시키기]]></title><description><![CDATA[배열 회전시키기 https://school.programmers.co.kr/learn/courses/30/lessons/120844 변수 정수가 담긴 배열 numbers 문자열 direction 제한사항 3 ≤ numbers의 길이 ≤ 2…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/151/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/151/</guid><pubDate>Mon, 24 Apr 2023 21:57:00 GMT</pubDate><content:encoded>&lt;h3&gt;배열 회전시키기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120844&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120844&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수가 담긴 배열 numbers&lt;br&gt;
문자열 direction&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;3 ≤ numbers의 길이 ≤ 20&lt;br&gt;
direction은 &quot;left&quot; 와 &quot;right&quot; 둘 중 하나&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;변수를 최대한 줄여서 간략하게 문제를 풀어보려고 했으나 코드를 간결하게 만들기 어려웠다. 변수를 선언하고 direction에 맞춰서 배열을 조합해서 반환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 left 선언하고 numbers.shift() 할당&lt;/li&gt;
&lt;li&gt;변수 right 선언하고 numbers.pop() 할당&lt;/li&gt;
&lt;li&gt;삼항연산자 조건으로 direction === &apos;left&apos; 확인&lt;/li&gt;
&lt;li&gt;만족하면 numbers.concat([right, left])&lt;/li&gt;
&lt;li&gt;아니면 [right, left].concat(numbers)&lt;/li&gt;
&lt;li&gt;5를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;unshift(numbers.pop()), push(numbers.shift())로 바로 집어넣는 방식을 전혀 떠올리지 못했다. 다른 풀이를 보니 대부분 이런 식으로 풀었다. 복잡하지 않은 문제에 시간을 많이 쓴 것 같다. 메소드를 응용하는 방법을 계속 고민해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; direction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; left &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; right &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; direction &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;left&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[공 던지기]]></title><description><![CDATA[공 던지기 https://school.programmers.co.kr/learn/courses/30/lessons/120843 변수 정수 배열 numbers 정수 K 제한사항 공은…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/150/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/150/</guid><pubDate>Fri, 21 Apr 2023 17:15:00 GMT</pubDate><content:encoded>&lt;h3&gt;공 던지기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120843&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120843&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 numbers&lt;br&gt;
정수 K&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;공은 1번부터 던지며 오른쪽으로 한 명을 건너뛰고 그다음 사람에게만 던질 수 있음&lt;br&gt;
2 &amp;#x3C; numbers의 길이 &amp;#x3C; 100&lt;br&gt;
0 &amp;#x3C; k &amp;#x3C; 1,000&lt;br&gt;
numbers의 첫 번째와 마지막 번호는 실제로 바로 옆에 있음&lt;br&gt;
numbers는 1부터 시작하며 번호는 순서대로 올라감&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;수열이라고 생각하고 10번째 값까지 적어보니 2n-1번째 값을 찾는 수열 문제임을 확인했다. 추가로 배열의 인덱스는 0부터 시작하기 때문에, 구하는 값은 2n - 2에 해당하는 numbers의 원소다. numbers의 길이보다 길 경우 길이로 나눈 나머지를 인덱스에 넣는 방식으로 값을 찾았다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;삼항연산자 조건으로 k * 2 - 2 &gt; numbsers.length 확인&lt;/li&gt;
&lt;li&gt;만족하면 numbers[(k * 2 - 2) % numbers.length]&lt;/li&gt;
&lt;li&gt;그 외의 경우 numbers[k * 2 - 2]&lt;/li&gt;
&lt;li&gt;3을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 풀이를 살펴보니 2n - 2의 값을 numbers의 길이와 굳이 비교할 필요가 없었다. -- 연산자를 사용한 풀이도 있었는데 변수 앞에 먼저 --를 실행해서 k가 1일 때 바로 0으로 만드는 풀이도 있었다. (n - 1) * 2로 푸는 방법인데 이 쪽이 계산을 더 간단하게 만들어준다. 답이 정상적으로 구해지더라도 계산을 더 간소하게 할 수 있는지 꼭 제출 전에 살펴봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; k&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; k &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;k &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;k &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[가위 바위 보]]></title><description><![CDATA[가위 바위 보 https://school.programmers.co.kr/learn/courses/30/lessons/120839 변수 문자열 rsp 제한사항 가위는 2 바위는 0 보는 5로 표현 0 < rsp의 길이 ≤ 100 rsp…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/149/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/149/</guid><pubDate>Thu, 20 Apr 2023 20:18:00 GMT</pubDate><content:encoded>&lt;h3&gt;가위 바위 보&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120839&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120839&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 rsp&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;가위는 2 바위는 0 보는 5로 표현&lt;br&gt;
0 &amp;#x3C; rsp의 길이 ≤ 100&lt;br&gt;
rsp와 길이가 같은 문자열을 return&lt;br&gt;
rsp는 숫자 0, 2, 5로 이루어져 있음&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;replaceAll 메서드를 생각했는데 바꾼 답이 바꾸지 않은 답과 중복될 경우 그 다음번 변환에서 반드시 바뀌어서 쓸 수 없었다. 배열로 받아서 모두 바꾸는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;구조분해 할당으로 rsp 분해&lt;/li&gt;
&lt;li&gt;map 메서드 적용, 콜백 함수로 삼항연산자 ? 사용해서 &quot;2&quot;, 아닐 경우 &quot;0&quot; 여부를 확인&lt;/li&gt;
&lt;li&gt;가위 바위 보에 이기는 답을 반환&lt;/li&gt;
&lt;li&gt;join(&apos;&apos;) 메서드 실행한 3을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;문자열을 분해해서 변환하는 접근 방식은 대부분 동일했다. 더 좋은 방식이 있는지 찾아봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;rsp&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;2&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;5&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[캐릭터의 좌표]]></title><description><![CDATA[캐릭터의 좌표 https://school.programmers.co.kr/learn/courses/30/lessons/120861 변수 배열 keyinput 맵의 크기 board 제한사항 캐릭터는 항상 [0,0]에서 시작 board…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/148/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/148/</guid><pubDate>Wed, 19 Apr 2023 19:55:07 GMT</pubDate><content:encoded>&lt;h3&gt;캐릭터의 좌표&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120861&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120861&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;배열 keyinput&lt;br&gt;
맵의 크기 board&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;캐릭터는 항상 [0,0]에서 시작&lt;br&gt;
board은 [가로 크기, 세로 크기] 형태&lt;br&gt;
board의 가로 크기와 세로 크기는 홀수&lt;br&gt;
board의 크기를 벗어난 방향키 입력은 무시&lt;br&gt;
0 ≤ keyinput의 길이 ≤ 50&lt;br&gt;
1 ≤ board[0] ≤ 99&lt;br&gt;
1 ≤ board[1] ≤ 99&lt;br&gt;
keyinput은 항상 up, down, left, right만 주어짐&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;상수 res 선언하고 [0, 0] 할당&lt;/li&gt;
&lt;li&gt;상수 limit 선언하고 [Math.trunc(board[0] / 2), Math.trunc(board[1] / 2)] 할당&lt;/li&gt;
&lt;li&gt;for (e of keyinput) 반복문 진입&lt;/li&gt;
&lt;li&gt;조건문으로 e 값 확인, e === &apos;up&apos;일 때 res[1]++, Math.abs(res[1]) &gt; limit[1] 이면 res[1]--&lt;/li&gt;
&lt;li&gt;e === &apos;down&apos;일 때 res[1]--, Math.abs(res[1]) &gt; limit[1] 이면 res[1]++&lt;/li&gt;
&lt;li&gt;e === &apos;left&apos;일 때 res[0]--, Math.abs(res[0]) &gt; limit[0] 이면 res[0]++&lt;/li&gt;
&lt;li&gt;e === &apos;right&apos;일 때 res[0]++, Math.abs(res[0]) &gt; limit[0] 이면 res[0]--&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;switch를 사용한 구문이 깔끔하게 정리가 되어 있고 길이도 크게 길지 않았다. switch를 활용하는 경우를 찾아봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;keyinput&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; board&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; limit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;board&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;board&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; keyinput&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;up&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; limit&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;down&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; limit&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;left&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; limit&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;right&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; limit&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[진료 순서 정하기]]></title><description><![CDATA[진료 순서 정하기 https://school.programmers.co.kr/learn/courses/30/lessons/120835 변수 정수 배열 emergency 제한사항 중복된 원소 없음 1 ≤ emergency의 길이 ≤ 10…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/147/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/147/</guid><pubDate>Tue, 18 Apr 2023 11:38:00 GMT</pubDate><content:encoded>&lt;h3&gt;진료 순서 정하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120835&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120835&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 emergency&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;중복된 원소 없음&lt;br&gt;
1 ≤ emergency의 길이 ≤ 10&lt;br&gt;
1 ≤ emergency의 원소 ≤ 100&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;emergency 배열을 내림차순으로 정렬한 새로운 배열을 받은 다음, 반복문을 통해 메서드로 인덱스 넘버를 받는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 dig 선언하고 emergency를 복사한 배열을 내림차순으로 정렬&lt;/li&gt;
&lt;li&gt;상수 res 선언하고 빈 배열 할당&lt;/li&gt;
&lt;li&gt;for(i=0, i &amp;#x3C; emergency.length, i++) 반복문 실행&lt;/li&gt;
&lt;li&gt;반복문 내부에서 res.push(dig.findIndex(e =&gt; e === emergency[i]) + 1) 실행&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;for 반복문을 forEach 메서드로 대체해서 풀었다. 다른 풀이를 보니 별도의 배열을 선언해서 정렬한 것은 같은데 emergency에 바로 map을 적용해서 푸는 방식이 많았다. indexOf 메서드를 썼는데 더 간단한 방법인 것 같다. 기억해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;emergency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; dig &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;emergency&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    emergency&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ele&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; ele&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[배열 자르기]]></title><description><![CDATA[배열 자르기 https://school.programmers.co.kr/learn/courses/30/lessons/120833 변수 정수 배열 numbers 정수 num1, num2 제한사항 2 ≤ numbers의 길이 ≤ 30 0 ≤ numbers…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/146/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/146/</guid><pubDate>Mon, 17 Apr 2023 10:40:00 GMT</pubDate><content:encoded>&lt;h3&gt;배열 자르기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120833&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120833&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 numbers&lt;br&gt;
정수 num1, num2&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;2 ≤ numbers의 길이 ≤ 30&lt;br&gt;
0 ≤ numbers의 원소 ≤ 1,000&lt;br&gt;
0 ≤num1 &amp;#x3C; num2 &amp;#x3C; numbers의 길이&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;메서드를 사용해서 바로 배열을 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;numbers.slice(num1, num2 + 1) 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num2 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[짝수의 합]]></title><description><![CDATA[짝수의 합 https://school.programmers.co.kr/learn/courses/30/lessons/120831 변수 정수 n 제한사항 0 < n ≤ 100…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/145/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/145/</guid><pubDate>Wed, 12 Apr 2023 09:35:00 GMT</pubDate><content:encoded>&lt;h3&gt;짝수의 합&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120831&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120831&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 n&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; n ≤ 1000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;조건을 만족하는 수의 합은 보통 공식이 있어서 이 문제도 공식이 있지 않을까 했는데, 혼자서 찾는 것은 쉽지 않았다. 공식은 나중에 찾아보기로 하고 반복문으로 합을 구했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;for(i = 2; i &amp;#x3C;= n; i += 2) 반복문 진입&lt;/li&gt;
&lt;li&gt;res += i 실행&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 사람들의 풀이를 보니 역시 공식이 있었다. 원리를 찾아봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[숨어있는 숫자의 덧셈 (2)]]></title><description><![CDATA[숨어있는 숫자의 덧셈 (2) https://school.programmers.co.kr/learn/courses/30/lessons/120864 변수 문자열 my_string 제한사항 1 ≤ my_string의 길이 ≤ 1,000 1 ≤ my…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/144/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/144/</guid><pubDate>Sat, 08 Apr 2023 23:52:00 GMT</pubDate><content:encoded>&lt;h3&gt;숨어있는 숫자의 덧셈 (2)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120864&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120864&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 my_string&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ my_string의 길이 ≤ 1,000&lt;br&gt;
1 ≤ my_string 안의 자연수 ≤ 1000&lt;br&gt;
연속된 수는 하나의 숫자로 간주&lt;br&gt;
0이 선행하는 경우 없음&lt;br&gt;
문자열에 자연수가 없는 경우 0을 return&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;split 메서드로 나눠서 숫자 여부를 확인할 수 있다. 빈 문자열로 나누는 대신 정규표현식을 써서 알파벳에 해당하면 모두 빈 문자열로 치환하고, 숫자만 남은 배열을 하나의 값으로 합쳐서 바로 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;my_string.split(/\D/) 실행&lt;/li&gt;
&lt;li&gt;filter 메서드로 원소의 길이가 0보다 큰 원소만 남김&lt;/li&gt;
&lt;li&gt;reduce 메서드로 초기값 0, 나머지 원소의 Number tpye을 모두 합쳐서 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 풀이를 보니 나와 비슷하게 접근했는데 정규식의 뒤에 +를 붙이고 filter를 생략한 풀이가 있었다. 저런 활용법은 생각하지 못했다. 정규표현식 응용 방법을 많이 검색해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; my_string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cur&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cur&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[순서쌍의 개수]]></title><description><![CDATA[순서쌍의 개수 https://school.programmers.co.kr/learn/courses/30/lessons/120836 변수 자연수 n 제한사항 1 ≤ n ≤ 1,000,00…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/143/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/143/</guid><pubDate>Fri, 07 Apr 2023 16:12:00 GMT</pubDate><content:encoded>&lt;h3&gt;순서쌍의 개수&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120836&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120836&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;자연수 n&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ n ≤ 1,000,000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;순서쌍의 갯수를 물어보는 문제이므로 반복문을 통해 순서쌍이 성립되는 경우만 별도의 변수에 합산했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;for(i = 1; i &amp;#x3C;= n / 2; i++) 반복문 진입&lt;/li&gt;
&lt;li&gt;n % i === 0 확인, 맞으면 res++&lt;/li&gt;
&lt;li&gt;res + 1을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;제곱근을 이용한 방식이 아직도 헷갈린다. 제곱근 방식을 사용한 다른 사람들의 풀이를 연구해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[양꼬치]]></title><description><![CDATA[양꼬치 https://school.programmers.co.kr/learn/courses/30/lessons/120830 변수 정수 n, k 제한사항 0 < n < 1,000 n / 10 ≤ k < 1,00…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/142/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/142/</guid><pubDate>Thu, 06 Apr 2023 01:31:00 GMT</pubDate><content:encoded>&lt;h3&gt;양꼬치&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120830&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120830&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 n, k&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; n &amp;#x3C; 1,000&lt;br&gt;
n / 10 ≤ k &amp;#x3C; 1,000&lt;br&gt;
서비스로 받은 음료수는 모두 마심&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;양꼬치의 주문 수가 n이므로 n을 10으로 나눈 몫 만큼 음료수 주문 숫자 k를 차감하면 된다. 별도의 변수 선언 없이 바로 값을 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;12000 * n + 2000 * (k - Math.trunc(n / 10))를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; k&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;k &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[특정 문자 제거하기]]></title><description><![CDATA[특정 문자 제거하기 https://school.programmers.co.kr/learn/courses/30/lessons/120826 변수 문자열 my_string 문자 letter 제한사항 1 ≤ my_string의 길이 ≤ 100 letter…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/141/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/141/</guid><pubDate>Wed, 05 Apr 2023 23:06:00 GMT</pubDate><content:encoded>&lt;h3&gt;특정 문자 제거하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120826&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120826&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 my_string&lt;br&gt;
문자 letter&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ my_string의 길이 ≤ 100&lt;br&gt;
letter은 길이 1인 영문자&lt;br&gt;
my_string과 letter은 알파벳 대소문자 구성&lt;br&gt;
대문자와 소문자를 구분&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;replaceAll 메서드로 letter에 해당하는 모든 문자를 모두 바로 변환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;my_string.replaceAll(letter, &apos;&apos;)를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;my_string&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; letter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; my_string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;letter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[문자 반복 출력하기]]></title><description><![CDATA[문자 반복 출력하기 https://school.programmers.co.kr/learn/courses/30/lessons/120825 변수 문자열 my_string 정수 n 제한사항 2 ≤ my_string 길이 ≤ 5 2 ≤ n ≤ 10 "my…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/140/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/140/</guid><pubDate>Wed, 05 Apr 2023 22:56:00 GMT</pubDate><content:encoded>&lt;h3&gt;문자 반복 출력하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120825&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120825&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 my_string&lt;br&gt;
정수 n&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;2 ≤ my_string 길이 ≤ 5&lt;br&gt;
2 ≤ n ≤ 10&lt;br&gt;
&quot;my_string&quot;은 영어 대소문자&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;문자열을 그대로 반복하는게 아니라 글자별로 반복하는 구조다. 배열로 분해한 다음 각 원소를 n번씩 반복해서 합치는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;my_string을 배열로 변환&lt;/li&gt;
&lt;li&gt;map 메서드 실행, 콜백 함수로 e =&gt; e = e.repeat(n) 실행&lt;/li&gt;
&lt;li&gt;join(&apos;&apos;) 메서드 실행&lt;/li&gt;
&lt;li&gt;my_string 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;my_string&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;my_string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[문자열 뒤집기]]></title><description><![CDATA[문자열 뒤집기 https://school.programmers.co.kr/learn/courses/30/lessons/120822 변수 문자열 my_string 제한사항 1 ≤ my_string의 길이 ≤ 1,00…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/139/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/139/</guid><pubDate>Wed, 05 Apr 2023 21:50:00 GMT</pubDate><content:encoded>&lt;h3&gt;문자열 뒤집기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120822&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120822&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 my_string&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ my_string의 길이 ≤ 1,000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;바로 전 문제에서 배열을 뒤집는 방식을 사용했다. 배열로 분해한 다음 뒤집어서 합치는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;my_string.split(&apos;&apos;) 실행&lt;/li&gt;
&lt;li&gt;reverse 메서드로 반전&lt;/li&gt;
&lt;li&gt;join(&apos;&apos;) 메서드 실행&lt;/li&gt;
&lt;li&gt;my_string 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 사람들의 풀이 중에 Array 생성자를 써서 split 메서드를 대신 사용하는 풀이가 있었다. 앞으로 문자열을 분해할 때는 Array 생성자를 써야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; my_string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[배열 뒤집기]]></title><description><![CDATA[배열 뒤집기 https://school.programmers.co.kr/learn/courses/30/lessons/120821 변수 정수 배열 num_list 제한사항 1 ≤ num_list의 길이 ≤ 1,000 0 ≤ num_list의 원소 ≤…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/138/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/138/</guid><pubDate>Wed, 05 Apr 2023 21:41:00 GMT</pubDate><content:encoded>&lt;h3&gt;배열 뒤집기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120821&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120821&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 num_list&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ num_list의 길이 ≤ 1,000&lt;br&gt;
0 ≤ num_list의 원소 ≤ 1,000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;반복문을 통해 배열을 역으로 순환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 res 선언하고 빈 배열 할당&lt;/li&gt;
&lt;li&gt;for(i = num_list.length - 1; i &gt;= 0; i--) 반복문 실행&lt;/li&gt;
&lt;li&gt;res.push(num_list[i]) 실행&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;배열을 뒤집는 메서드가 없다고 생각했는데, reverse라는 메서드가 있었다. 앞으로는 특별한 경우가 아니면 reverse 메서드를 써야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num_list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; num_list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num_list&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[나이 출력]]></title><description><![CDATA[나이 출력 https://school.programmers.co.kr/learn/courses/30/lessons/120820 변수 나이 age 제한사항 0 < age ≤ 120 나이는 태어난 연도에 1살이며 1년마다…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/137/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/137/</guid><pubDate>Wed, 05 Apr 2023 20:23:00 GMT</pubDate><content:encoded>&lt;h3&gt;나이 출력&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120820&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120820&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;나이 age&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; age ≤ 120&lt;br&gt;
나이는 태어난 연도에 1살이며 1년마다 1씩 증가&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;간단한 사칙연산이라 바로 답을 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;2022 - age + 1 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; age &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[짝수 홀수 개수]]></title><description><![CDATA[짝수 홀수 개수 https://school.programmers.co.kr/learn/courses/30/lessons/120824 변수 정수 배열 num_list 제한사항 1 ≤ num_list의 길이 ≤ 100 0 ≤ num_list의 원소 ≤…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/136/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/136/</guid><pubDate>Tue, 04 Apr 2023 17:15:00 GMT</pubDate><content:encoded>&lt;h3&gt;짝수 홀수 개수&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120824&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120824&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 num_list&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ num_list의 길이 ≤ 100&lt;br&gt;
0 ≤ num_list의 원소 ≤ 1,000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;다른 문제의 풀이를 보면서 reduce 메서드를 통해 하나의 배열로 묶어서 반환하는 방식을 봤는데 직접 시도해보니 잘 되지 않았다. 별도의 배열을 선언해서 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 res 선언하고 [0, 0] 할당&lt;/li&gt;
&lt;li&gt;num_list에 forEach 적용, 콜백 함수로 각 원소에 대해서 짝수, 홀수 여부를 확인&lt;/li&gt;
&lt;li&gt;짝수면 res[0] + 1, 홀수면 res[1] + 1&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;접근방법이 굉장히 다양했다. 짝수 홀수 검사를 하지 않고 2로 나눈 나머지를 바로 반환할 배열의 순서로 활용한 답이 많은 추천을 받았는데 나중에 사용할 수 있는 방법인 것 같다. 기억해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num_list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    num_list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[저주의 숫자 3]]></title><description><![CDATA[저주의 숫자 3 https://school.programmers.co.kr/learn/courses/30/lessons/120871 변수 정수 배열 n 제한사항 1 ≤ n ≤ 100 풀이 숫자 3이 등장하면 안되고,…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/135/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/135/</guid><pubDate>Mon, 03 Apr 2023 10:56:00 GMT</pubDate><content:encoded>&lt;h3&gt;저주의 숫자 3&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120871&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120871&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 n&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ n ≤ 100&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;숫자 3이 등장하면 안되고, 3의 배수도 사용할 수 없다. 이 조건들을 그대로 만족하는 식은 작성하기 어렵고 직관적이지 않다고 생각해서, 반복문을 써서 조건을 만족하는 경우에 변환되는 숫자에 1씩 더해서 조건을 피하는 방식으로 변환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;for(i = 0; i &amp;#x3C; n; i++) 반복문 진입&lt;/li&gt;
&lt;li&gt;res + 1&lt;/li&gt;
&lt;li&gt;res가 3의 배수인지 확인, 맞으면 res + 1&lt;/li&gt;
&lt;li&gt;res 끝자리 3 여부 확인, 맞으면 res + 1&lt;/li&gt;
&lt;li&gt;res 10의 자리 3 여부 확인, 맞으면 res + 10&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;실제 코드를 작성한 다음 오류를 체크하면서 계산해보니 처음에 순서대로 작성한 알고리즘과는 조금 달라졌다. 변환의 경우 53 → 54 → 55와 같이 두 번 연속으로 변환해야 하는 경우가 있어 같은 조건을 한 번 더 체크하는 방식으로 해결했다. 다른 풀이를 보니 대체로 정규표현식이나 배열을 생성하는 과정을 통해서 문제를 해결했다. for 반복문 i를 쓰면서 i에 3이 포함되지 않은 경우 별도로 선언된 카운트를 올리는 방식으로 i를 바로 반환하는 풀이가 제일 직관적이었던 것 같다. 정규표현식은 잊을만하면 항상 찾게 되는데 아직까지 자유자재로 쓰진 못하는 것 같다. 자주 찾아봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        res&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;       
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[배열의 평균값]]></title><description><![CDATA[배열의 평균값 https://school.programmers.co.kr/learn/courses/30/lessons/120817 변수 정수 배열 numbers 제한사항 0 ≤ numbers의 원소 ≤ 1,000 1 ≤ numbers의 길이 ≤ 10…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/134/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/134/</guid><pubDate>Sat, 01 Apr 2023 22:03:00 GMT</pubDate><content:encoded>&lt;h3&gt;배열의 평균값&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120817&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120817&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 numbers&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 ≤ numbers의 원소 ≤ 1,000&lt;br&gt;
1 ≤ numbers의 길이 ≤ 100&lt;br&gt;
정답의 소수 부분이 .0 또는 .5인 경우만 주어짐&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;reduce 메서드로 바로 답을 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;numbers.reduce() 실행&lt;/li&gt;
&lt;li&gt;콜백 함수로 (acc, cur, idx, { length }) =&gt; idx === length - 1 ? (acc + cur) / length : acc + cur 실행&lt;/li&gt;
&lt;li&gt;최초값으로 0 할당&lt;/li&gt;
&lt;li&gt;1을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cur&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; idx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; length &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; idx &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;acc &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; cur&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; acc &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; cur&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[개미 군단]]></title><description><![CDATA[개미 군단 https://school.programmers.co.kr/learn/courses/30/lessons/120837 변수 사냥감의 체력 hp 제한사항 hp는 자연수 0 ≤ hp ≤ 100…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/133/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/133/</guid><pubDate>Sat, 01 Apr 2023 21:40:00 GMT</pubDate><content:encoded>&lt;h3&gt;개미 군단&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120837&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120837&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;사냥감의 체력 hp&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;hp는 자연수&lt;br&gt;
0 ≤ hp ≤ 1000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;복잡한 계산이 필요하지 않아서 답을 담을 변수를 선언하고 사칙 연산으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 Math.trunc(hp / 5) 할당&lt;/li&gt;
&lt;li&gt;hp = hp % 5 할당&lt;/li&gt;
&lt;li&gt;res = res + hp Math.trunc(hp / 3) 할당&lt;/li&gt;
&lt;li&gt;hp = hp % 3 할당&lt;/li&gt;
&lt;li&gt;res + hp를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hp &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    hp &lt;span class=&quot;token operator&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    res &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hp &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    hp &lt;span class=&quot;token operator&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; hp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[옷가게 할인 받기]]></title><description><![CDATA[옷가게 할인 받기 https://school.programmers.co.kr/learn/courses/30/lessons/120818 변수 구매한 옷의 가격 price 제한사항 10 ≤ price ≤ 1,000,000 price는 10원 단위(…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/132/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/132/</guid><pubDate>Fri, 31 Mar 2023 17:15:00 GMT</pubDate><content:encoded>&lt;h3&gt;옷가게 할인 받기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120818&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120818&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;구매한 옷의 가격 price&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;10 ≤ price ≤ 1,000,000&lt;br&gt;
price는 10원 단위(1의 자리가 0)&lt;br&gt;
소수점 이하를 버린 정수를 반환&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;조건문을 통해서 price의 할인 조건을 확인 후 할인된 가격을 반환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;price &gt;= 500000 확인, 맞으면 price * 8 / 10에서 소수점 이하를 버린 값을 반환&lt;/li&gt;
&lt;li&gt;price &gt;= 300000 확인, 맞으면 price * 9 / 10에서 소수점 이하를 버린 값을 반환&lt;/li&gt;
&lt;li&gt;price &gt;= 100000 확인, 맞으면 price * 95 / 100에서 소수점 이하를 버린 값을 반환&lt;/li&gt;
&lt;li&gt;조건을 모두 만족하지 않으면 price를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;price &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; price &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; price &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;300000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; price &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; price &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; price &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;95&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; price&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[아이스 아메리카노]]></title><description><![CDATA[아이스 아메리카노 https://school.programmers.co.kr/learn/courses/30/lessons/120819 변수 돈 money 제한사항 0 < money ≤ 1,000,00…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/131/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/131/</guid><pubDate>Fri, 31 Mar 2023 16:40:00 GMT</pubDate><content:encoded>&lt;h3&gt;아이스 아메리카노&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120819&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120819&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;돈 money&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; money ≤ 1,000,000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;배열 내부에서 필요한 값을 계산해서 바로 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;money를 5500으로 나눈 값의 소수점을 버린 값을 배열에 추가&lt;/li&gt;
&lt;li&gt;money를 5500으로 나눈 값의 나머지를 배열에 추가&lt;/li&gt;
&lt;li&gt;배열을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;money &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; money &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[숨어있는 숫자의 덧셈 (1)]]></title><description><![CDATA[숨어있는 숫자의 덧셈 (1) https://school.programmers.co.kr/learn/courses/30/lessons/120851 변수 문자열 my_string 제한사항 1 ≤ my_string의 길이 ≤ 1,000 my_string…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/130/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/130/</guid><pubDate>Thu, 30 Mar 2023 15:10:00 GMT</pubDate><content:encoded>&lt;h3&gt;숨어있는 숫자의 덧셈 (1)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120851&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120851&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 my_string&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ my_string의 길이 ≤ 1,000&lt;br&gt;
my_string은 소문자, 대문자 그리고 한자리 자연수로 구성&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;배열로 분해하여 숫자만 골라내는 과정을 적용했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;split(&apos;&apos;) 메서드 써서 배열로 분해&lt;/li&gt;
&lt;li&gt;배열의 각 원소를 강제로 number 타입으로 변환했을 때 NaN 여부를 확인&lt;/li&gt;
&lt;li&gt;숫자로 변환&lt;/li&gt;
&lt;li&gt;모든 원소의 합을 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;reduce 메서드의 콜백에서 자꾸 이상한 결과가 나와서 결국 map 메서드를 써서 number 타입으로 전체 형변환을 해버렸다. 다른 사람들의 풀이를 보니 reduce의 콜백에서 acc와 cur을 모두 강제로 paresInt 함수로 number 타입으로 강제로 바꿔서 연산을 했는데, 아마 이 부분을 내가 놓친 것 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; my_string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isNaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cur&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; acc &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; cur&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[배열 원소의 길이]]></title><description><![CDATA[배열 원소의 길이 https://school.programmers.co.kr/learn/courses/30/lessons/120854 변수 문자열 배열 strlist 제한사항 1 ≤ strlist 원소의 길이 ≤ 100 strlist…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/129/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/129/</guid><pubDate>Thu, 30 Mar 2023 14:15:00 GMT</pubDate><content:encoded>&lt;h3&gt;배열 원소의 길이&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120854&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120854&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 배열 strlist&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ strlist 원소의 길이 ≤ 100&lt;br&gt;
strlist는 알파벳 소문자, 대문자, 특수문자로 구성&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;길이는 메서드를 통해 바로 받을 수 있기 때문에, 별도의 변수 없이 바로 변환해서 반환했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;strlist에 map 메서드 적용, e =&gt; e = e.length 콜백함수 실행 후 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;strlist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; strlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[점의 위치 구하기]]></title><description><![CDATA[점의 위치 구하기 https://school.programmers.co.kr/learn/courses/30/lessons/120841 변수 정수 배열 dot 제한사항 dot의 길이 = 2 dot[0] x좌표, dot[1] y좌표 -500 ≤ dot…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/128/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/128/</guid><pubDate>Wed, 29 Mar 2023 13:20:00 GMT</pubDate><content:encoded>&lt;h3&gt;점의 위치 구하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120841&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120841&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 dot&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;dot의 길이 = 2&lt;br&gt;
dot[0] x좌표, dot[1] y좌표&lt;br&gt;
-500 ≤ dot의 원소 ≤ 500&lt;br&gt;
dot의 원소는 0이 오지 않음&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;Y축을 기준으로 dot[0]이 양수인지 음수인지 확인하여 1, 2 사분면을 정한다. 만약 dot[1]이 음수라면 사분면의 값에서 5를 빼고 절대값을 취하면 원하는 사분면을 얻을 수 있기 때문에, 이 과정을 그대로 코드로 옮겼다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 dot[0]이 0보다 큰지 확인하여 1 또는 2 할당&lt;/li&gt;
&lt;li&gt;dot[1]이 0보다 작은 수인지 확인, 작으면 res에서 5를 빼고 절대값&lt;/li&gt;
&lt;li&gt;res를 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;변수를 선언하지 않고 조건문을 연달아서 사용하는 방식의 풀이들이 많았다. 알아보기 어려운 코드라고 생각하지만, 사용할 수 있는 방법이기 때문에 직접 작성해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dot&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; dot&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[직사각형 넓이 구하기]]></title><description><![CDATA[직사각형 넓이 구하기 https://school.programmers.co.kr/learn/courses/30/lessons/120860 변수 배열 dots 제한사항 dots의 길이 = 4 dots의 원소의 길이 = 2 -256 < dots[i…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/127/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/127/</guid><pubDate>Tue, 28 Mar 2023 16:13:00 GMT</pubDate><content:encoded>&lt;h3&gt;직사각형 넓이 구하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120860&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120860&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;배열 dots&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;dots의 길이 = 4&lt;br&gt;
dots의 원소의 길이 = 2&lt;br&gt;
-256 &amp;#x3C; dots[i]의 원소 &amp;#x3C; 256&lt;br&gt;
잘못된 입력 없음&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;문제에서 변이 축과 평행한 직사각형이라고 조건을 줘서 계산이 쉬웠다. 예시 2에서 각 꼭짓점이 순서대로 주어지지 않았기 때문에 dots를 정렬하는 방식을 고민했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 x, y를 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;dots에 sort((a, b) =&gt; a[0] === b[0] || a - b) 실행&lt;/li&gt;
&lt;li&gt;x에 dots[0][0] - dots[2][0]의 절대값 할당&lt;/li&gt;
&lt;li&gt;y에 dots[0][1] - dots[1][1]의 절대값 할당&lt;/li&gt;
&lt;li&gt;x * y 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;다른 사람들의 풀이가 매우 다채로웠다. 대체로 변의 길이를 구해서 푸는 방식은 비슷했는데 그 과정을 알아보기 힘든 몇개의 풀이가 있었다. 이 답변들을 살펴봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;dots&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    dots&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dots&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; dots&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dots&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; dots&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[모스부호 (1)]]></title><description><![CDATA[모스부호 (1) https://school.programmers.co.kr/learn/courses/30/lessons/120838 변수 문자열 letter 제한사항 1 ≤ letter의 길이 ≤ 1,000 return값은 소문자 letter…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/126/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/126/</guid><pubDate>Mon, 27 Mar 2023 09:59:00 GMT</pubDate><content:encoded>&lt;h3&gt;모스부호 (1)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120838&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120838&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 letter&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ letter의 길이 ≤ 1,000&lt;br&gt;
return값은 소문자&lt;br&gt;
letter의 모스부호는 공백으로 나누어져 있음&lt;br&gt;
letter에 공백은 연속으로 두 개 이상 존재하지 않음&lt;br&gt;
해독할 수 없는 편지 없음&lt;br&gt;
편지의 시작과 끝에는 공백이 없음&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;공백으로 나누어져 있으므로 배열로 쉽게 분해할 수 있다. 신호를 키, 문자를 값으로 하는 객체를 선언한 다음 letter를 분해한 배열의 모든 원소를 변환한 다음 합쳐서 반환하는 방식으로 접근했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 morse 선언하고 모스 부호 객체 할당&lt;/li&gt;
&lt;li&gt;letter.split(&apos; &apos;) 적용해서 배열로 분해&lt;/li&gt;
&lt;li&gt;메서드로 letter의 모든 요소에 대해서 e =&gt; e = mores[&lt;code class=&quot;language-text&quot;&gt;${e}&lt;/code&gt;] 콜백을 실행하는 메서드 적용&lt;/li&gt;
&lt;li&gt;letter.join(&apos;&apos;) 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;join 메서드와 split 메서드를 합쳐서 reduce 메서드로 한 번에 푸는 방법이 매우 적절해 보인다. 잊지 말고 앞으로 적용해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; morse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;token string-property property&quot;&gt;&apos;.-&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;-...&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;-.-.&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;c&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;-..&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;d&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;.&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;e&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;..-.&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;f&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string-property property&quot;&gt;&apos;--.&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;g&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;....&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;h&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;..&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;i&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;.---&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;j&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;-.-&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;k&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;.-..&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;l&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string-property property&quot;&gt;&apos;--&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;m&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;-.&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;n&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;---&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;o&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;.--.&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;p&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;--.-&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;q&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;.-.&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string-property property&quot;&gt;&apos;...&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;s&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;-&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;t&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;..-&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;u&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;...-&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;v&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;.--&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;w&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;-..-&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;x&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string-property property&quot;&gt;&apos;-.--&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;y&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&apos;--..&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;z&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    letter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; letter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; morse&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;e&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; letter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[최빈값 구하기]]></title><description><![CDATA[최빈값 구하기 https://school.programmers.co.kr/learn/courses/30/lessons/120812 변수 정수 배열 array 제한사항 0 < array의 길이 < 100 0 ≤ array의 원소 < 100…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/125/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/125/</guid><pubDate>Sat, 25 Mar 2023 21:21:00 GMT</pubDate><content:encoded>&lt;h3&gt;최빈값 구하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120812&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120812&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 array&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; array의 길이 &amp;#x3C; 100&lt;br&gt;
0 ≤ array의 원소 &amp;#x3C; 1000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;원소의 범위가 0에서 999사이의 정수이므로 큰 계산을 요구하지 않는다. 길이 1000의 별도의 배열을 선언하고 매개변수로 넘겨받은 array에 해당하는 배열[e]의 값을 1 더하는 과정을 통해 최대로 등장한 원소의 길이를 반환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상수 count 선언하고 Array 생성자로 길이 1000의 배열 생성, 모두 0으로 할당&lt;/li&gt;
&lt;li&gt;변수 maxNum 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;array 모든 원소에 대해서 콜백 함수로 e =&gt; count[e]++ 실행&lt;/li&gt;
&lt;li&gt;maxNum에 array에서 가장 큰 값을 구조분해 할당으로 찾아서 할당&lt;/li&gt;
&lt;li&gt;count.indexOf(maxNum) === count.lastIndexOf(maxNum) 여부를 확인, 맞으면 count.indexOf(maxNum) 반환, 틀리면 -1 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;처음에 객체로 풀면 좋겠다는 생각을 했었는데, 아무리 생각해도 지나치게 많은 과정을 거치는 것 같아 시간을 두고 고민을 해서 풀이 과정을 줄일 수 있었다. 다른 사람들의 풀이를 보니 굉장히 다양한 방법으로 문제를 풀었다. 직관적으로 이해가 쉽지 않은 풀이도 많았는데 이해할 수 있도록 꼼꼼히 살펴봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; maxNum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    maxNum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;maxNum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lastIndexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;maxNum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;maxNum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[중앙값 구하기]]></title><description><![CDATA[중앙값 구하기 https://school.programmers.co.kr/learn/courses/30/lessons/120853 변수 정수 배열 array 제한사항 array의 길이는 홀수 0 < array의 길이 < 100 -1,00…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/124/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/124/</guid><pubDate>Fri, 24 Mar 2023 10:23:00 GMT</pubDate><content:encoded>&lt;h3&gt;중앙값 구하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120853&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120853&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 배열 array&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;array의 길이는 홀수&lt;br&gt;
0 &amp;#x3C; array의 길이 &amp;#x3C; 100&lt;br&gt;
-1,000 &amp;#x3C; array의 원소 &amp;#x3C; 1,000&lt;/p&gt;
&lt;h4&gt;풀이&lt;/h4&gt;
&lt;p&gt;배열을 정렬해서 가운데 원소를 바로 반환하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;array.sort() 실행&lt;/li&gt;
&lt;li&gt;array[Math.trunc(array.length / 2)] 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;sort 메서드가 오름차순 정렬을 기본으로 하기에 콜백을 따로 주지 않았는데 테스트케이스를 통과하지 못했다. 어떻게 정렬되는지 다시 확인을 해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[나머지 구하기]]></title><description><![CDATA[나머지 구하기 https://school.programmers.co.kr/learn/courses/30/lessons/120810 변수 정수 num1, num2 제한사항 0 < num1 ≤ 100 0 < num2 ≤ 100 코드]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/123/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/123/</guid><pubDate>Fri, 24 Mar 2023 09:53:00 GMT</pubDate><content:encoded>&lt;h3&gt;나머지 구하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120810&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120810&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 num1, num2&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; num1 ≤ 100&lt;br&gt;
0 &amp;#x3C; num2 ≤ 100&lt;/p&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; num1 &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; num2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[컨트롤 제트]]></title><description><![CDATA[컨트롤 제트 https://school.programmers.co.kr/learn/courses/30/lessons/120853 변수 문자열 s 제한사항 1 ≤ s의 길이 ≤ 200 -1,000 < s의 원소 중 숫자 < 1,000 s는 숫자, "Z…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/122/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/122/</guid><pubDate>Thu, 23 Mar 2023 12:47:00 GMT</pubDate><content:encoded>&lt;h3&gt;컨트롤 제트&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120853&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120853&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;문자열 s&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;1 ≤ s의 길이 ≤ 200&lt;br&gt;
-1,000 &amp;#x3C; s의 원소 중 숫자 &amp;#x3C; 1,000&lt;br&gt;
s는 숫자, &quot;Z&quot;, 공백&lt;br&gt;
s에 있는 숫자와 &quot;Z&quot;는 서로 공백으로 구분&lt;br&gt;
연속된 공백은 주어지지 않음&lt;br&gt;
0을 제외하고는 0으로 시작하는 숫자는 없음&lt;br&gt;
s는 &quot;Z&quot;로 시작하지 않음&lt;br&gt;
s의 시작과 끝에는 공백이 없음&lt;br&gt;
&quot;Z&quot;가 연속해서 나오는 경우는 없음&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;공백으로 구분된 문자열 형태로 주어지므로 배열로 나눈 뒤 반복문을 적용하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;변수 res 선언하고 0 할당&lt;/li&gt;
&lt;li&gt;s를 공백 문자열로 split해서 배열로 재할당&lt;/li&gt;
&lt;li&gt;배열 s에서 &quot;Z&quot;가 아닌 모든 원소를 숫자로 변환&lt;/li&gt;
&lt;li&gt;for (i = 0; i &amp;#x3C; s.length; i++) 반복문 진입&lt;/li&gt;
&lt;li&gt;s[i] === &apos;Z&apos; 일 때 res -= s[i - 1]&lt;/li&gt;
&lt;li&gt;그 외의 경우 res += s[i]&lt;/li&gt;
&lt;li&gt;res 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;코드를 작성하면서 reduce 메서드를 떠올렸는데 Z의 경우를 처리하는 게 불편하다고 생각해서 반복문으로 풀었다. 다른 사람들의 풀이를 보니 reduce를 사용한 풀이가 보이는데 보면서 어떻게 사용했는지 분석을 해봐야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Z&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Z&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;-=&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[분수의 덧셈]]></title><description><![CDATA[분수의 덧셈 https://school.programmers.co.kr/learn/courses/30/lessons/120808 변수 첫 번째 분수의 분자와 분모를 뜻하는 numer1, denom1 두 번째 분수의 분자와 분모를 뜻하는 numer…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/121/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/121/</guid><pubDate>Wed, 22 Mar 2023 13:56:00 GMT</pubDate><content:encoded>&lt;h3&gt;분수의 덧셈&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120808&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120808&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;첫 번째 분수의 분자와 분모를 뜻하는 numer1, denom1&lt;br&gt;
두 번째 분수의 분자와 분모를 뜻하는 numer2, denom2&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C;numer1, denom1, numer2, denom2 &amp;#x3C; 1,000&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;수의 범위가 크지 않으므로 따로 분모를 일치시키는 과정을 거치지 않고 바로 첫 번째 분수에 denom2를 곱하고, 마찬가지로 두 번째 분수에도 denom1을 곱하는 방식으로 풀었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;getGCD = (a, b) =&gt; (b &gt; 0 ? getGCD(b, a % b) : a); 함수 선언&lt;/li&gt;
&lt;li&gt;변수 numer3 선언하고 numer1 * denom2 + numer2 * denom1 할당&lt;/li&gt;
&lt;li&gt;denom3 선언하고 denom1 * denom2 할당&lt;/li&gt;
&lt;li&gt;변수 GCD 선언하고 getGCD(numer3, denom3) 할당&lt;/li&gt;
&lt;li&gt;[numer3 / GCD, denom3/GCD] 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numer1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; denom1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; numer2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; denom2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;getGCD&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getGCD&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; numer3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; numer1 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; denom2 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; numer2 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; denom1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; denom3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; denom1 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; denom2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;GCD&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getGCD&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numer3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; denom3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;numer3 &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;GCD&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; denom3&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;GCD&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[숫자 비교하기]]></title><description><![CDATA[숫자 비교하기 https://school.programmers.co.kr/learn/courses/30/lessons/120807 변수 정수 num1, num2 제한사항 0 ≤ num1 ≤ 10,000 0 ≤ num2 ≤ 10,000 순서 num…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/120/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/120/</guid><pubDate>Wed, 22 Mar 2023 13:37:00 GMT</pubDate><content:encoded>&lt;h3&gt;숫자 비교하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120807&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120807&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 num1, num2&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 ≤ num1 ≤ 10,000&lt;br&gt;
0 ≤ num2 ≤ 10,000&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;num1, num2가 같은 값인지 확인, 맞으면 1 반환&lt;/li&gt;
&lt;li&gt;1을 만족하지 않으면 -1 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; num1 &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; num2 &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[두 수의 나눗셈]]></title><description><![CDATA[두 수의 나눗셈 https://school.programmers.co.kr/learn/courses/30/lessons/120806 변수 정수 num1, num2 제한사항 0 < num1 ≤ 100 0 < num2 ≤ 10…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/119/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/119/</guid><pubDate>Wed, 22 Mar 2023 13:33:00 GMT</pubDate><content:encoded>&lt;h3&gt;두 수의 나눗셈&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120806&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120806&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;변수&lt;/h4&gt;
&lt;p&gt;정수 num1, num2&lt;/p&gt;
&lt;h4&gt;제한사항&lt;/h4&gt;
&lt;p&gt;0 &amp;#x3C; num1 ≤ 100&lt;br&gt;
0 &amp;#x3C; num2 ≤ 100&lt;/p&gt;
&lt;h4&gt;순서&lt;/h4&gt;
&lt;p&gt;반올림을 하기 전에 먼저 1000을 곱해야 한다. 순서를 고려해서 작성했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Math.floor(num1 * 1000 / num2) 반환&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;코드&lt;/h4&gt;
&lt;p&gt;floor 대신 trunc 메서드를 다른 사람 풀이를 보면서 알게 됐다. 소수점을 제거하는 기능으로 사용하는 메서드인 만큼, 앞으로는 floor보다는 trunc 메서드를 사용해야겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num1 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; num2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TypeScript Part 2-3]]></title><description><![CDATA[React + TypeScript
Tuple Type
declare]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/008/2022-07-20TypeScript8/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/008/2022-07-20TypeScript8/</guid><pubDate>Wed, 20 Jul 2022 05:48:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;React + TypeScript
Tuple Type
declare&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[TypeScript Part 2-2]]></title><description><![CDATA[Protect
Static
Class
Type export
Type Parameter]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/007/2022-07-19TypeScript7/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/007/2022-07-19TypeScript7/</guid><pubDate>Tue, 19 Jul 2022 08:10:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;Protect
Static
Class
Type export
Type Parameter&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[TypeScript Part 2-1]]></title><description><![CDATA[함수에서 Type지정
Narrowing
Never Type]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/006/2022-07-18TypeScript6/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/006/2022-07-18TypeScript6/</guid><pubDate>Mon, 18 Jul 2022 08:10:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;함수에서 Type지정
Narrowing
Never Type&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[TypeScript Part 1-5]]></title><description><![CDATA[TypeScript에서 class Object에서 Type지정]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/005/2022-07-15TypeScript5/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/005/2022-07-15TypeScript5/</guid><pubDate>Mon, 18 Jul 2022 06:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;TypeScript에서 class&lt;/h3&gt;
&lt;h3&gt;Object에서 Type지정&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Narrowing과 Assertion]]></title><description><![CDATA[Narrowing & Assertion | 연산자를 사용해서 두 가지 type을 지정할 수 있음
any type : 어떤 자료 형태도 할당 가능. 하지만 타입 관련 에러를 막기 위해 typescript를 쓰기 때문에 남발하면 typescript…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/004/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/004/</guid><pubDate>Thu, 14 Jul 2022 12:35:00 GMT</pubDate><content:encoded>&lt;h1&gt;Narrowing &amp;#x26; Assertion&lt;/h1&gt;
&lt;p&gt;| 연산자를 사용해서 두 가지 type을 지정할 수 있음
any type : 어떤 자료 형태도 할당 가능. 하지만 타입 관련 에러를 막기 위해 typescript를 쓰기 때문에 남발하면 typescript 쓰는 이유가 사라짐
unknown : any와 마찬가지로 모든 타입의 변수를 다 할당할 수 있음. 차이점은 unknown type은 어떤 자료가 들어가도 그대로 타입이 unknown임&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; 이름&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Bulbarsaur&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//이름 = 123; 컴파일할 때 오류가 뜬다.&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; 배열&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Bulbarsaur&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Ivysaur&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; 번호&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;indexnum &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; indexnum&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;nameType&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; 이름&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;nameType &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Venusaur&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;함수명&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//에러가 발생하는 함수&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;/*function 함수명(x:number | string) {
    return x*2;
}*/&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//이건 가능&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;함수2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; nbumber &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;number&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;pokemon&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; bulbarsaur&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;pokemon &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bulbarsaur&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TypeScript에서 사용하는 Type]]></title><description><![CDATA[TypeScript에서 사용하는 Type JavaScript에서 사용하는 원시타입(primitive types)들은 TypeScript에도 모두 있다. string number boolean null undefined 그런데 TypeScript…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/003/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/003/</guid><pubDate>Wed, 13 Jul 2022 08:30:00 GMT</pubDate><content:encoded>&lt;h3&gt;TypeScript에서 사용하는 Type&lt;/h3&gt;
&lt;p&gt;JavaScript에서 사용하는 원시타입(primitive types)들은 TypeScript에도 모두 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;string&lt;br&gt;
number&lt;br&gt;
boolean&lt;br&gt;
null&lt;br&gt;
undefined&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;그런데 TypeScript의 사용 목적에 비춰서 생각해보면 null이나 undefined는 굳이 사용할 이유가 없다. Type을 엄격하게 지정해서 오류를 방지하기 위해 TypeScript를 쓰기 때문에, 아예 변수 선언이 되지 않아서 반환되는 null이나 선언해놓고 값을 입력하지 않아서 등장하는 undefined를 볼 이유가 없다. tsconfig.json에서도 옵션이 있었기 때문에 혹시라도 써야 할 일이 있다면 tsconfig.json부터 시작해서 많은 부분을 건드려야 한다.&lt;/p&gt;
&lt;p&gt;TypeScript에서 추가로 사용하는 Type들도 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;union&lt;br&gt;
any&lt;br&gt;
unknown&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 타입들은 TypeScript에서 Type을 조금 더 편리하게 관리하기 위해서 사용하는 Type들이다.&lt;/p&gt;
&lt;h4&gt;Type 지정하는 방법&lt;/h4&gt;
&lt;p&gt;원시타입 입력&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;let 변수명: 타입 = 입력할 값(타입이 문자면 문자열, 숫자면 숫자)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;배열에 타입 지정&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;let 변수명: 타입[] = [&apos;타입과 일치하는 값&apos;,...]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;두 개 이상의 타입을 동시에 넣어야 할 경우&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;let 변수명: (타입1 | 타입2)[] = [&apos;타입1과 일치하는 값&apos;, &apos;타입2와 일치하는 값&apos;,...]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;객체에 타입 지정&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;let pokemon : {키1 : 타입, 키2: 타입, ...} = {키1 : 값, 키2 : 값, ...}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;내용을 참고해서 예제를 만들었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; 이름&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Bulbarsaur&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//이름 = 123; 컴파일할 때 오류가 뜬다.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; 번호&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; 이상해풀&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;002&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Ivysaur&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; 이상해꽃&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; evolve&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;boolean&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
    index&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Venusaur&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; evolve&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Union Type&lt;/h4&gt;
&lt;p&gt;변수에 두가지 Type을 같이 사용해야 할 경우, | 연산자를 통해 변수에 들어갈 타입을 묶어서 지정할 수 있다. 이렇게 두 개의 타입을 묶어서 사용하는 Type을 Union 타입이라고 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; 포켓몬&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Charmeleon&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; 포켓몬&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 둘을 묶어야 할 경우&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; 포켓몬&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Charizard&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 이렇게 하면 number 또는 &apos;문자열만 들어가는 배열&apos;이 된다.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; 포켓몬&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;7&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Squirtle&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Any Type&lt;/h4&gt;
&lt;p&gt;어떤 자료 형태도 할당 가능한 타입이다. 타입 관련 에러를 막기 위해 typescript를 쓴다는 사실을 생각해보면 any type 남용은 typescript를 쓰는 이유를 스스로 없애버리는 셈이다. 버그 체크 등 반드시 필요한 경우를 제외하고는 쓰지 말아야 한다.&lt;/p&gt;
&lt;h4&gt;Unknown Type&lt;/h4&gt;
&lt;p&gt;any와 마찬가지로 모든 타입의 변수를 다 할당할 수 있는 unknown 타입이 있다. any와 마찬가지로 모든 타입의 값을 할당할 수 있지만 몇가지 다른 점이 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;unknown 타입으로 선언된 변수는 any 타입이나 unknown 타입으로 선언된 변수를 제외하고 다른 타입으로 선언된 변수에 할당할 수 없다&lt;/li&gt;
&lt;li&gt;unknown 타입으로 선언된 변수는 해당 변수가 가지는 원래 타입의 메소드를 호출하거나 프로퍼티에 접근할 수 없다(any 타입은 된다)&lt;/li&gt;
&lt;li&gt;unknown 타입으로 선언했지만 narrowing이나 assertion을 통해 2번 문제를 해결할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; 포켓몬&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Bulbarsaur&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; 포켓몬&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; 포켓몬&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Venusaur&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//오류 안남&lt;/span&gt;
포켓몬&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; 포켓몬&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;unknown&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//오류 남&lt;/span&gt;
포켓몬&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Void Type&lt;/h4&gt;
&lt;p&gt;TS에서 함수를 선언할 때 함수로 들어오는 파라메터에도 타입 설정이 필요하다. 추가로 함수가 반환하는 값에도 파라메터 설정이 필요하다. return 값이 없을 경우 함수에 지정하는 type이 void 타입이다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[tsconfig.json]]></title><description><![CDATA[tsconfig.json TypeScript 파일을 JavaScript로 변환할 때 어떻게 변환할 것인지 세부설정을 담은 파일이다. 컴파일 옵션은 무조건 들어가야 한다. 컴파일 옵션 외에도 watchOption, typeAcquisition…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/002/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/002/</guid><pubDate>Tue, 12 Jul 2022 10:30:00 GMT</pubDate><content:encoded>&lt;h3&gt;tsconfig.json&lt;/h3&gt;
&lt;p&gt;TypeScript 파일을 JavaScript로 변환할 때 어떻게 변환할 것인지 세부설정을 담은 파일이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string-property property&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token string-property property&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;es5&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string-property property&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;commonjs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;컴파일 옵션은 무조건 들어가야 한다. 컴파일 옵션 외에도 watchOption, typeAcquisition이 들어가야 하는데 오늘은 compilerOption만 정리하고 나중에 보강할 예정이다. 전체 설정은 (&lt;a href=&quot;https://www.typescriptlang.org/tsconfig&quot;&gt;https://www.typescriptlang.org/tsconfig&lt;/a&gt;) 여기서 볼 수 있다.&lt;/p&gt;
&lt;p&gt;complilerOptions에 들어갈 하위 키들을 강의자료를 참고해서 정리했다.&lt;/p&gt;
&lt;h4&gt;1.JS 변환 관련&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&apos;target&apos;: &apos;es3&apos;, &apos;es5&apos;, &apos;es6&apos; / &apos;es2015&apos;, &apos;es2016&apos;, &apos;es2017&apos;,&apos;es2018&apos;, &apos;es2019&apos;, &apos;es2020&apos;, &apos;es2021&apos;, &apos;es2022&apos;, &apos;esnext&apos; 중 1개&lt;br&gt;
es5로 변환한 파일을 열어보면 변수 선언이 죄다 var로 되어 있다. 현재 사용되는 es6 문법에서는 사용하지 말것을 권장하는 문법이기 때문에 해도 된다 하지 말아야 한다 이런 부분을 알아보려고 검색을 해봤는데 TypeScript 홈페이지의 tsconfig 항목에서 답을 찾아볼 수 있었다. &apos;ES6를 지원하는 환경이면 ES6가 좋은 선택이다&apos;라고 하니 예전 문법으로 작성해도 큰 문제는 없다고 생각한다. 아마 하위 호환을 위해 예전 문법으로도 변환할 수 있도록 기능을 살려둔게 아닐까. JS쪽에서 가능하면 ES6 이후 문법 사용을 권장하고 있으니 디폴트 값은 es6로 해야겠다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&apos;module&apos;: &apos;commonjs&apos;, &apos;amd&apos;, &apos;es2015&apos;, &apos;esnext&apos;&lt;br&gt;
code 모듈화해서 내보내고 가져올 때 무슨 import 문법 쓸건지 정한다. es6에서는 모듈 시스템인 import를 사용한다고 한다. 이건 JS와 관련된 내용이라 여기에는 길게 적지 않으려고 한다. 기본값을 es6로 지정해서 사용하는 만큼 나는 es2015를 기본값으로 넣으려고 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&apos;allowJs&apos;: true, false&lt;br&gt;
js 파일을 ts에서 import해서 쓸 수 있는지 여부를 확인한다. 필요한 경우 true.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;checkJs&quot;: true, false&lt;br&gt;
일반 js 파일에서도 typescript에서 확인하는 에러를 체크하는지 설정한다. JS 파일을 불러올 경우 필요할 듯. 쓴다면 true.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;declaration&quot;: true, false&lt;br&gt;
컴파일할 때 타입을 저장하는 .d.ts 파일 생성 여부를 확인한다. 매우 편리한 기능이므로 어지간하면 true.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;rootDir&quot;: &quot;./&quot; 또는 지정된 폴더&lt;br&gt;
루트경로를 변경한다. 아래 옵션과 함께 JS 파일 저장 경로에 영향을 준다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;outDir&quot;: &quot;./&quot; 또는 경로 지정&lt;br&gt;
컴파일한 JS파일을 저장할 경로를 변경한다. 같은 폴더안에 저장하지 않을 경우 유용할 듯.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;removeComments&quot;: true, false&lt;br&gt;
JS 파일로 컴파일할 때 TS 파일에 있는 주석을 삭제할 것인지 물어본다. 실제 작동하는 JS 파일로 컴파일 할때 작동하는 파일이므로 어지간하면 true.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;2. TS 문법 관련&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;strict&quot;: true, false
Type과 관련된 기능들에 적용되는 엄격한 설정들을 모두 활성화하는 명령. strict, noImplicit 가 붙는 옵션을 모두 활성화 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;noImplicitAny&quot;: true, false&lt;br&gt;
any타입을 금지할 지 설정한다. any type은 디버그나 반드시 필요한 경우가 아니면 사용되지 않으므로 어지간하면 true.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;strictNullChecks&quot; : true, false&lt;br&gt;
null, undefined에 뭔가 실행할 경우 에러를 띄워준다. 변수를 하나씩 체크할 필요가 없어져서 오류 체크에 매우 유용할 듯.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;strictFunctionTypes&quot;: true, false&lt;br&gt;
함수 파라미터 타입을 엄격하게 체크.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;strictPropertyInitialization&quot;: true, false&lt;br&gt;
class constructor 작성시 타입체크 를 엄격하게 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;alwaysStrict&quot;: true, false&lt;br&gt;
컴파일하는 JS에서도 &quot;use strict&quot;를 적용하는지 여부.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;3. 메모리 관리&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;noUnusedLocals&quot;: true, false&lt;br&gt;
사용하지 않은 지역변수가 존재하면 에러를 출력한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;noUnusedParameters&quot;: true, false&lt;br&gt;
사용하지 않은 파라미터가 존재하면 에러를 출력한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;noImplicitReturns&quot;: true, false&lt;br&gt;
return이 없는 함수가 존재하면 에러를 출력한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;noFallthroughCasesInSwitch&quot;: true, false&lt;br&gt;
switch문에 오류가 있으면 에러를 출력한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;내가 설정한 tsconfig.json&lt;/h3&gt;
&lt;p&gt;앞으로 작업할 때 기본값으로 만들어서 사용할 json 파일을 작성해둔다. 사용해보고 앞으로 계속 업데이트할 예정이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string-property property&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token string-property property&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;es6&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string-property property&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string-property property&quot;&gt;&quot;declaration&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string-property property&quot;&gt;&quot;removeComments&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string-property property&quot;&gt;&quot;strict&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string-property property&quot;&gt;&quot;noUnusedLocals&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string-property property&quot;&gt;&quot;noUnusedParameters&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TypeScript 설치와 적용]]></title><description><![CDATA[TypeScript를 쓰는 이유 52 10 JS는 Type이 다른데 알아서 계산을 해준다(Dynamic Typing). 여러명이 작업하면 이런 실수를 하거나 혹은 의도하지 않은 결과값을 반환해서 오류가 발생할 수 있다. TypeScript는 Type…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/001/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/001/</guid><pubDate>Mon, 11 Jul 2022 07:30:00 GMT</pubDate><content:encoded>&lt;h3&gt;TypeScript를 쓰는 이유&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;5&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;5&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;52&lt;br&gt;
10&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JS는 Type이 다른데 알아서 계산을 해준다(Dynamic Typing). 여러명이 작업하면 이런 실수를 하거나 혹은 의도하지 않은 결과값을 반환해서 오류가 발생할 수 있다. TypeScript는 Type을 엄격하게 확인해서 의도하지 않은 오류를 막아준다. 그 외에 객체 지향 프로그래밍에 조금 더 적합하게 튜닝이 되어 있다는데 이건 지금은 체감 못하는 중이다.&lt;/p&gt;
&lt;h3&gt;TypeScript 설치&lt;/h3&gt;
&lt;p&gt;Nodejs 설치되어 있는지 확인한 뒤 터미널에서&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install -g typescript&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;를 입력한다.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;오류날 경우&lt;/summary&gt;
nodejs 업데이트    
windows : powershell 관리자 권한으로 실행한 뒤 set-ExecutionPolicy Unrestricted 입력 → y    
mac : sudo 붙여서 실행    
&lt;/details&gt;
&lt;p&gt;설치 끝나면 TypeScript로 작업할 폴더로 이동해서 tsconfig.json 파일을 생성하고 TypeScript를 JavaScript로 컴파일할때 설정을 직접 작성해줘야 한다. 그 다음에 TypeScript로 작업을 시작하면 된다. JS로 변환하기 전 파일 확장자는 .ts&lt;/p&gt;
&lt;p&gt;그리고 TypeScript 파일은 nodejs에서 바로 실행할 수 없다. TypeScript로 작성한 파일을 실행하려면 JS로 변환이 필요하다. 터미널을 열고&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tsc -w&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;입력 후 실행하면 작업을 저장할 때 마다 자동으로 JavaScript로 컴파일해 준다.&lt;/p&gt;
&lt;h4&gt;React에 적용&lt;/h4&gt;
&lt;details&gt;
&lt;summary&gt;React 프로젝트에 적용&lt;/summary&gt;
&lt;p&gt;작업 폴더에서 터미널 열고
npm install --save typescript @types/node @types/react @types/react-dom @types jest
입력&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;새로운 React 프로젝트 생성&lt;/summary&gt;
&lt;p&gt;프로젝트를 생성할 작업 폴더에서 터미널 열고
npx create-react-app my-app --template typescript
입력&lt;/p&gt;
&lt;/details&gt;
&lt;h4&gt;Vue에 적용&lt;/h4&gt;
&lt;p&gt;작업 폴더에서 터미널 열고
vue add typescript
입력&lt;/p&gt;
&lt;p&gt;vue 파일에서 타입스크립트 활용하려면&lt;/p&gt;
&lt;blockquote&gt;
&lt;script lang=&quot;ts&quot;&gt;    
&lt;/script&gt;    
&lt;/blockquote&gt;
&lt;h3&gt;TypeScript → JavaScript 자동변환&lt;/h3&gt;
&lt;p&gt;작업 폴더에서 터미널 열고&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tsc -w&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;실행&lt;/p&gt;</content:encoded></item></channel></rss>